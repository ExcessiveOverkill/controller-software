/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post99, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:267" *)
(* generator = "Amaranth" *)
module Controller(clk_100M, clk_50M, clk_25M, reset, ACLK, ARESETN, AWREADY, WREADY, BVALID, ARREADY, RDATA, RLAST, RVALID, slot_A_in, slot_B_in, slot_C_in, slot_D_in, AWADDR, AWLEN, AWSIZE, AWBURST
, AWPROT, AWUSER, AWVALID, WDATA, WSTRB, WLAST, WVALID, BREADY, ARADDR, ARLEN, ARSIZE, ARBURST, ARPROT, ARVALID, RREADY, buzzer, slot_A_out, slot_A_out_enable, slot_B_out, slot_B_out_enable, slot_C_out
, slot_C_out_enable, slot_D_out, slot_D_out_enable, pl_ps_interrupts, clk_200M);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire [10:0] \$10 ;
  reg \$100 ;
  reg \$101 ;
  reg [2:0] \$102 ;
  reg [1:0] \$103 ;
  reg [31:0] \$104 ;
  reg [9:0] \$105 ;
  reg [9:0] \$106 ;
  reg [3:0] \$107 ;
  reg [3:0] \$108 ;
  reg [15:0] \$109 ;
  wire \$11 ;
  reg \$110 ;
  reg \$111 ;
  reg [15:0] \$112 ;
  reg [2:0] \$113 ;
  wire \$114 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire [18:0] \$19 ;
  wire \$2 ;
  wire [18:0] \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire [10:0] \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire [10:0] \$4 ;
  wire [10:0] \$40 ;
  wire [10:0] \$41 ;
  wire \$42 ;
  wire [10:0] \$43 ;
  wire [4:0] \$44 ;
  wire \$45 ;
  wire [10:0] \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire [10:0] \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire [10:0] \$56 ;
  wire [4:0] \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire [94:0] \$6 ;
  wire [32:0] \$60 ;
  wire [2:0] \$61 ;
  wire \$62 ;
  wire [10:0] \$63 ;
  wire [10:0] \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire [10:0] \$67 ;
  wire [4:0] \$68 ;
  wire \$69 ;
  wire [94:0] \$7 ;
  wire \$70 ;
  wire [32:0] \$71 ;
  wire [3:0] \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  wire [16:0] \$76 ;
  wire \$77 ;
  wire \$78 ;
  wire \$79 ;
  wire [10:0] \$8 ;
  wire \$80 ;
  reg \$81 ;
  reg [63:0] \$82 ;
  reg \$83 ;
  reg \$84 ;
  reg \$85 ;
  reg \$86 ;
  reg \$87 ;
  reg \$88 ;
  reg [1:0] \$89 ;
  wire [10:0] \$9 ;
  reg [2:0] \$90 ;
  reg [31:0] \$91 ;
  reg [9:0] \$92 ;
  reg [9:0] \$93 ;
  reg [3:0] \$94 ;
  reg [3:0] \$95 ;
  reg [15:0] \$96 ;
  reg [3:0] \$97 ;
  reg \$98 ;
  reg \$99 ;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 AXI_controller_master CLK" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:56" *)
  input ACLK;
  wire ACLK;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARADDR" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:92" *)
  output [31:0] ARADDR;
  reg [31:0] ARADDR = 32'd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARBURST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:95" *)
  output [1:0] ARBURST;
  wire [1:0] ARBURST;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 AXI_controller_master RST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:57" *)
  input ARESETN;
  wire ARESETN;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARLEN" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:93" *)
  output [3:0] ARLEN;
  reg [3:0] ARLEN = 4'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARPROT" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:98" *)
  output [2:0] ARPROT;
  wire [2:0] ARPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:103" *)
  input ARREADY;
  wire ARREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARSIZE" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:94" *)
  output [2:0] ARSIZE;
  wire [2:0] ARSIZE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:102" *)
  output ARVALID;
  reg ARVALID = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master AWADDR" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:61" *)
  output [31:0] AWADDR;
  reg [31:0] AWADDR = 32'd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARBURST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:95" *)
  output [1:0] AWBURST;
  wire [1:0] AWBURST;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master AWLEN" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:62" *)
  output [3:0] AWLEN;
  reg [3:0] AWLEN = 4'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARPROT" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:98" *)
  output [2:0] AWPROT;
  wire [2:0] AWPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master AWREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:72" *)
  input AWREADY;
  wire AWREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master ARSIZE" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:94" *)
  output [2:0] AWSIZE;
  wire [2:0] AWSIZE;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:70" *)
  output [-1:0] AWUSER;
  wire [-1:0] AWUSER;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master AWVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:71" *)
  output AWVALID;
  reg AWVALID = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master BREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:88" *)
  output BREADY;
  reg BREADY = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master BVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:87" *)
  input BVALID;
  wire BVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master RDATA" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:107" *)
  input [63:0] RDATA;
  wire [63:0] RDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master RLAST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:109" *)
  input RLAST;
  wire RLAST;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master RREADY" *)
  (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME AXI_controller_master, CLK_DOMAIN controller_firmware_processing_system7_0_0_FCLK_CLK0, FREQ_HZ 100000000, PHASE 0.0, PROTOCOL AXI3, DATA_WIDTH 64, ID_WIDTH 0, ADDR_WIDTH 32, HAS_BURST 1, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 0, HAS_RRESP 0, SUPPORTS_NARROW_BURST 0, MAX_BURST_LENGTH 16, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, READ_WRITE_MODE READ_WRITE" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:112" *)
  output RREADY;
  reg RREADY = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master RVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:111" *)
  input RVALID;
  wire RVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master WDATA" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:76" *)
  output [63:0] WDATA;
  reg [63:0] WDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master WLAST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:78" *)
  output WLAST;
  reg WLAST = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master WREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:81" *)
  input WREADY;
  wire WREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master WSTRB" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:77" *)
  output [7:0] WSTRB;
  wire [7:0] WSTRB;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_controller_master WVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:80" *)
  output WVALID;
  reg WVALID = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:460" *)
  reg axi_read_busy = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:495" *)
  reg axi_read_data_incremented = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:328" *)
  reg axi_transfer_busy = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:327" *)
  reg axi_transfer_start = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:459" *)
  reg axi_write_busy = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:46" *)
  wire [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  wire [15:0] \bram_address$122 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:30" *)
  wire [15:0] \bram_address$129 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  wire [15:0] \bram_address$130 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:21" *)
  wire [15:0] \bram_address$137 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  wire [15:0] \bram_address$138 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:70" *)
  wire [31:0] bram_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:48" *)
  wire [31:0] \bram_read_data$128 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:70" *)
  wire [31:0] \bram_read_data$135 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:32" *)
  wire [31:0] \bram_read_data$136 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:70" *)
  wire [31:0] \bram_read_data$143 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:23" *)
  wire [31:0] \bram_read_data$144 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:47" *)
  wire [31:0] bram_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  wire [31:0] \bram_write_data$124 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:31" *)
  wire [31:0] \bram_write_data$131 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  wire [31:0] \bram_write_data$132 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:22" *)
  wire [31:0] \bram_write_data$139 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  wire [31:0] \bram_write_data$140 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:49" *)
  wire bram_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  wire \bram_write_enable$126 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:33" *)
  wire \bram_write_enable$133 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  wire \bram_write_enable$134 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:24" *)
  wire \bram_write_enable$141 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  wire \bram_write_enable$142 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:167" *)
  wire busy;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:115" *)
  output buzzer;
  wire buzzer;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input clk_100M;
  wire clk_100M;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:271" *)
  input clk_200M;
  wire clk_200M;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  input clk_25M;
  wire clk_25M;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:273" *)
  input clk_50M;
  wire clk_50M;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:451" *)
  reg [15:0] cycle_timer = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:447" *)
  reg [15:0] cycle_timer_config = 16'hffff;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  reg [31:0] data_input = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  reg [31:0] \data_input$190  = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  reg [31:0] \data_input$204  = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:159" *)
  reg [31:0] \data_input$218  = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:172" *)
  wire [15:0] data_memory_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:173" *)
  reg [31:0] data_memory_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:174" *)
  wire [31:0] data_memory_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:175" *)
  wire data_memory_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:160" *)
  wire [31:0] data_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  wire [31:0] \data_output$191 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  wire [31:0] \data_output$205 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  wire [31:0] \data_output$219 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:316" *)
  reg [9:0] data_read_axi_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:317" *)
  reg [63:0] data_read_axi_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:305" *)
  wire [9:0] data_read_dma_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:306" *)
  wire [31:0] data_read_dma_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:307" *)
  wire [31:0] data_read_dma_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:308" *)
  wire data_read_dma_write_en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [9:0] data_read_port_axi__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [31:0] data_read_port_axi__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [9:0] data_read_read_port_dma__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [31:0] data_read_read_port_dma__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:401" *)
  wire [9:0] data_read_write_port_dma__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:402" *)
  reg [31:0] data_read_write_port_dma__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:400" *)
  reg data_read_write_port_dma__en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:318" *)
  reg [9:0] data_write_axi_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:319" *)
  reg [63:0] data_write_axi_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:320" *)
  reg data_write_axi_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:310" *)
  wire [9:0] data_write_dma_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:311" *)
  wire [31:0] data_write_dma_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:312" *)
  wire [31:0] data_write_dma_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:313" *)
  wire data_write_dma_write_en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:401" *)
  reg [9:0] data_write_port_axi__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:402" *)
  reg [31:0] data_write_port_axi__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:400" *)
  reg data_write_port_axi__en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [9:0] data_write_read_port_dma__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [31:0] data_write_read_port_dma__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:401" *)
  wire [9:0] data_write_write_port_dma__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:402" *)
  reg [31:0] data_write_write_port_dma__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:400" *)
  reg data_write_write_port_dma__en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:35" *)
  wire [7:0] debug;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:330" *)
  wire [7:0] debug_pins;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:452" *)
  reg [3:0] dma_instruction_block_select = 4'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:377" *)
  reg dma_memory_half = 1'h0;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  reg [1:0] \fsm_state$119  = 2'h0;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  reg [2:0] \fsm_state$157  = 3'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:169" *)
  wire [15:0] instruction_memory_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:170" *)
  wire [63:0] instruction_memory_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:298" *)
  wire [7:0] instruction_read_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:299" *)
  wire [63:0] instruction_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  wire [7:0] instruction_read_port__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [63:0] instruction_read_port__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:300" *)
  wire [7:0] instruction_write_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:301" *)
  wire [63:0] instruction_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:302" *)
  wire instruction_write_en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:401" *)
  reg [7:0] instruction_write_port__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:402" *)
  reg [63:0] instruction_write_port__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\memory.py:400" *)
  reg instruction_write_port__en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:491" *)
  reg [9:0] internal_axi_read_address = 10'h000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:492" *)
  reg [63:0] internal_axi_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:493" *)
  reg internal_axi_read_valid = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:629" *)
  reg [9:0] internal_axi_write_address = 10'h000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:630" *)
  reg [63:0] internal_axi_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:632" *)
  reg internal_axi_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:631" *)
  reg internal_axi_write_ready = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:494" *)
  reg [63:0] last_axi_read_data = 64'h0000000000000000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:132" *)
  output [15:0] pl_ps_interrupts;
  reg [15:0] pl_ps_interrupts = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:486" *)
  wire read_addr_complete;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  reg [15:0] read_bram_address_input = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  reg [15:0] \read_bram_address_input$182  = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  reg [15:0] \read_bram_address_input$196  = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:155" *)
  reg [15:0] \read_bram_address_input$214  = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:156" *)
  wire [15:0] read_bram_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  wire [15:0] \read_bram_address_output$183 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  wire [15:0] \read_bram_address_output$197 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  wire [15:0] \read_bram_address_output$215 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:477" *)
  reg [9:0] read_bursts_remaining = 10'h000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  reg read_complete_input = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  reg \read_complete_input$192  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  reg \read_complete_input$206  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:161" *)
  reg \read_complete_input$220  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:162" *)
  wire read_complete_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  wire \read_complete_output$193 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  wire \read_complete_output$207 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  wire \read_complete_output$221 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:479" *)
  reg [3:0] read_current_burst = 4'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  reg [7:0] read_node_address_input = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  reg [7:0] \read_node_address_input$186  = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  reg [7:0] \read_node_address_input$200  = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:151" *)
  reg [7:0] \read_node_address_input$210  = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:152" *)
  wire [7:0] read_node_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  wire [7:0] \read_node_address_output$187 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  wire [7:0] \read_node_address_output$201 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  wire [7:0] \read_node_address_output$211 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:474" *)
  reg [2:0] read_stage = 3'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:52" *)
  input reset;
  wire reset;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:39" *)
  wire [9:0] rs422_rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:40" *)
  wire [9:0] rs422_tx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:26" *)
  wire [5:0] rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:18" *)
  wire [21:0] slotIn;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:16" *)
  wire [21:0] slotOut;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:17" *)
  wire [21:0] slotOutEnable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:118" *)
  input [21:0] slot_A_in;
  wire [21:0] slot_A_in;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:119" *)
  output [21:0] slot_A_out;
  wire [21:0] slot_A_out;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:120" *)
  output [21:0] slot_A_out_enable;
  wire [21:0] slot_A_out_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:18" *)
  input [21:0] slot_B_in;
  wire [21:0] slot_B_in;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:16" *)
  output [21:0] slot_B_out;
  wire [21:0] slot_B_out;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:17" *)
  output [21:0] slot_B_out_enable;
  wire [21:0] slot_B_out_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:124" *)
  input [21:0] slot_C_in;
  wire [21:0] slot_C_in;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:129" *)
  output [21:0] slot_C_out;
  wire [21:0] slot_C_out;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:129" *)
  output [21:0] slot_C_out_enable;
  wire [21:0] slot_C_out_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:127" *)
  input [21:0] slot_D_in;
  wire [21:0] slot_D_in;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:129" *)
  output [21:0] slot_D_out;
  wire [21:0] slot_D_out;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:129" *)
  output [21:0] slot_D_out_enable;
  wire [21:0] slot_D_out_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:166" *)
  reg start = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:444" *)
  wire [31:0] status;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:271" *)
  wire sync_200_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:271" *)
  wire sync_200_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  wire sync_25_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  wire sync_25_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:273" *)
  wire sync_50_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:273" *)
  wire sync_50_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:496" *)
  reg [63:0] timed_axi_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:17" *)
  wire [7:0] timer_pulse;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:19" *)
  wire trigger;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:28" *)
  wire \trigger$154 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:24" *)
  wire [5:0] tx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:481" *)
  wire write_addr_complete;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  reg [15:0] write_bram_address_input = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  reg [15:0] \write_bram_address_input$184  = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  reg [15:0] \write_bram_address_input$198  = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:157" *)
  reg [15:0] \write_bram_address_input$216  = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:158" *)
  wire [15:0] write_bram_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  wire [15:0] \write_bram_address_output$185 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  wire [15:0] \write_bram_address_output$199 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  wire [15:0] \write_bram_address_output$217 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:476" *)
  reg [9:0] write_bursts_remaining = 10'h000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  reg write_complete_input = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  reg \write_complete_input$194  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  reg \write_complete_input$208  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:163" *)
  reg \write_complete_input$222  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:164" *)
  wire write_complete_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  wire \write_complete_output$195 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  wire \write_complete_output$209 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  wire \write_complete_output$223 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:478" *)
  reg [3:0] write_current_burst = 4'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:482" *)
  wire write_data_complete;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  reg [7:0] write_node_address_input = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  reg [7:0] \write_node_address_input$188  = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  reg [7:0] \write_node_address_input$202  = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:153" *)
  reg [7:0] \write_node_address_input$212  = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:154" *)
  wire [7:0] write_node_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  wire [7:0] \write_node_address_output$189 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  wire [7:0] \write_node_address_output$203 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  wire [7:0] \write_node_address_output$213 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:467" *)
  reg [1:0] write_stage = 2'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:278" *)
  reg [31:0] data_memory_read [1023:0];
  initial begin
    data_memory_read[0] = 32'd0;
    data_memory_read[1] = 32'd1;
    data_memory_read[2] = 32'd2;
    data_memory_read[3] = 32'd3;
    data_memory_read[4] = 32'd4;
    data_memory_read[5] = 32'd5;
    data_memory_read[6] = 32'd6;
    data_memory_read[7] = 32'd7;
    data_memory_read[8] = 32'd8;
    data_memory_read[9] = 32'd9;
    data_memory_read[10] = 32'd10;
    data_memory_read[11] = 32'd11;
    data_memory_read[12] = 32'd12;
    data_memory_read[13] = 32'd13;
    data_memory_read[14] = 32'd14;
    data_memory_read[15] = 32'd15;
    data_memory_read[16] = 32'd16;
    data_memory_read[17] = 32'd17;
    data_memory_read[18] = 32'd18;
    data_memory_read[19] = 32'd19;
    data_memory_read[20] = 32'd20;
    data_memory_read[21] = 32'd21;
    data_memory_read[22] = 32'd22;
    data_memory_read[23] = 32'd23;
    data_memory_read[24] = 32'd24;
    data_memory_read[25] = 32'd25;
    data_memory_read[26] = 32'd26;
    data_memory_read[27] = 32'd27;
    data_memory_read[28] = 32'd28;
    data_memory_read[29] = 32'd29;
    data_memory_read[30] = 32'd30;
    data_memory_read[31] = 32'd31;
    data_memory_read[32] = 32'd32;
    data_memory_read[33] = 32'd33;
    data_memory_read[34] = 32'd34;
    data_memory_read[35] = 32'd35;
    data_memory_read[36] = 32'd36;
    data_memory_read[37] = 32'd37;
    data_memory_read[38] = 32'd38;
    data_memory_read[39] = 32'd39;
    data_memory_read[40] = 32'd40;
    data_memory_read[41] = 32'd41;
    data_memory_read[42] = 32'd42;
    data_memory_read[43] = 32'd43;
    data_memory_read[44] = 32'd44;
    data_memory_read[45] = 32'd45;
    data_memory_read[46] = 32'd46;
    data_memory_read[47] = 32'd47;
    data_memory_read[48] = 32'd48;
    data_memory_read[49] = 32'd49;
    data_memory_read[50] = 32'd50;
    data_memory_read[51] = 32'd51;
    data_memory_read[52] = 32'd52;
    data_memory_read[53] = 32'd53;
    data_memory_read[54] = 32'd54;
    data_memory_read[55] = 32'd55;
    data_memory_read[56] = 32'd56;
    data_memory_read[57] = 32'd57;
    data_memory_read[58] = 32'd58;
    data_memory_read[59] = 32'd59;
    data_memory_read[60] = 32'd60;
    data_memory_read[61] = 32'd61;
    data_memory_read[62] = 32'd62;
    data_memory_read[63] = 32'd63;
    data_memory_read[64] = 32'd64;
    data_memory_read[65] = 32'd65;
    data_memory_read[66] = 32'd66;
    data_memory_read[67] = 32'd67;
    data_memory_read[68] = 32'd68;
    data_memory_read[69] = 32'd69;
    data_memory_read[70] = 32'd70;
    data_memory_read[71] = 32'd71;
    data_memory_read[72] = 32'd72;
    data_memory_read[73] = 32'd73;
    data_memory_read[74] = 32'd74;
    data_memory_read[75] = 32'd75;
    data_memory_read[76] = 32'd76;
    data_memory_read[77] = 32'd77;
    data_memory_read[78] = 32'd78;
    data_memory_read[79] = 32'd79;
    data_memory_read[80] = 32'd80;
    data_memory_read[81] = 32'd81;
    data_memory_read[82] = 32'd82;
    data_memory_read[83] = 32'd83;
    data_memory_read[84] = 32'd84;
    data_memory_read[85] = 32'd85;
    data_memory_read[86] = 32'd86;
    data_memory_read[87] = 32'd87;
    data_memory_read[88] = 32'd88;
    data_memory_read[89] = 32'd89;
    data_memory_read[90] = 32'd90;
    data_memory_read[91] = 32'd91;
    data_memory_read[92] = 32'd92;
    data_memory_read[93] = 32'd93;
    data_memory_read[94] = 32'd94;
    data_memory_read[95] = 32'd95;
    data_memory_read[96] = 32'd96;
    data_memory_read[97] = 32'd97;
    data_memory_read[98] = 32'd98;
    data_memory_read[99] = 32'd99;
    data_memory_read[100] = 32'd100;
    data_memory_read[101] = 32'd101;
    data_memory_read[102] = 32'd102;
    data_memory_read[103] = 32'd103;
    data_memory_read[104] = 32'd104;
    data_memory_read[105] = 32'd105;
    data_memory_read[106] = 32'd106;
    data_memory_read[107] = 32'd107;
    data_memory_read[108] = 32'd108;
    data_memory_read[109] = 32'd109;
    data_memory_read[110] = 32'd110;
    data_memory_read[111] = 32'd111;
    data_memory_read[112] = 32'd112;
    data_memory_read[113] = 32'd113;
    data_memory_read[114] = 32'd114;
    data_memory_read[115] = 32'd115;
    data_memory_read[116] = 32'd116;
    data_memory_read[117] = 32'd117;
    data_memory_read[118] = 32'd118;
    data_memory_read[119] = 32'd119;
    data_memory_read[120] = 32'd120;
    data_memory_read[121] = 32'd121;
    data_memory_read[122] = 32'd122;
    data_memory_read[123] = 32'd123;
    data_memory_read[124] = 32'd124;
    data_memory_read[125] = 32'd125;
    data_memory_read[126] = 32'd126;
    data_memory_read[127] = 32'd127;
    data_memory_read[128] = 32'd128;
    data_memory_read[129] = 32'd129;
    data_memory_read[130] = 32'd130;
    data_memory_read[131] = 32'd131;
    data_memory_read[132] = 32'd132;
    data_memory_read[133] = 32'd133;
    data_memory_read[134] = 32'd134;
    data_memory_read[135] = 32'd135;
    data_memory_read[136] = 32'd136;
    data_memory_read[137] = 32'd137;
    data_memory_read[138] = 32'd138;
    data_memory_read[139] = 32'd139;
    data_memory_read[140] = 32'd140;
    data_memory_read[141] = 32'd141;
    data_memory_read[142] = 32'd142;
    data_memory_read[143] = 32'd143;
    data_memory_read[144] = 32'd144;
    data_memory_read[145] = 32'd145;
    data_memory_read[146] = 32'd146;
    data_memory_read[147] = 32'd147;
    data_memory_read[148] = 32'd148;
    data_memory_read[149] = 32'd149;
    data_memory_read[150] = 32'd150;
    data_memory_read[151] = 32'd151;
    data_memory_read[152] = 32'd152;
    data_memory_read[153] = 32'd153;
    data_memory_read[154] = 32'd154;
    data_memory_read[155] = 32'd155;
    data_memory_read[156] = 32'd156;
    data_memory_read[157] = 32'd157;
    data_memory_read[158] = 32'd158;
    data_memory_read[159] = 32'd159;
    data_memory_read[160] = 32'd160;
    data_memory_read[161] = 32'd161;
    data_memory_read[162] = 32'd162;
    data_memory_read[163] = 32'd163;
    data_memory_read[164] = 32'd164;
    data_memory_read[165] = 32'd165;
    data_memory_read[166] = 32'd166;
    data_memory_read[167] = 32'd167;
    data_memory_read[168] = 32'd168;
    data_memory_read[169] = 32'd169;
    data_memory_read[170] = 32'd170;
    data_memory_read[171] = 32'd171;
    data_memory_read[172] = 32'd172;
    data_memory_read[173] = 32'd173;
    data_memory_read[174] = 32'd174;
    data_memory_read[175] = 32'd175;
    data_memory_read[176] = 32'd176;
    data_memory_read[177] = 32'd177;
    data_memory_read[178] = 32'd178;
    data_memory_read[179] = 32'd179;
    data_memory_read[180] = 32'd180;
    data_memory_read[181] = 32'd181;
    data_memory_read[182] = 32'd182;
    data_memory_read[183] = 32'd183;
    data_memory_read[184] = 32'd184;
    data_memory_read[185] = 32'd185;
    data_memory_read[186] = 32'd186;
    data_memory_read[187] = 32'd187;
    data_memory_read[188] = 32'd188;
    data_memory_read[189] = 32'd189;
    data_memory_read[190] = 32'd190;
    data_memory_read[191] = 32'd191;
    data_memory_read[192] = 32'd192;
    data_memory_read[193] = 32'd193;
    data_memory_read[194] = 32'd194;
    data_memory_read[195] = 32'd195;
    data_memory_read[196] = 32'd196;
    data_memory_read[197] = 32'd197;
    data_memory_read[198] = 32'd198;
    data_memory_read[199] = 32'd199;
    data_memory_read[200] = 32'd200;
    data_memory_read[201] = 32'd201;
    data_memory_read[202] = 32'd202;
    data_memory_read[203] = 32'd203;
    data_memory_read[204] = 32'd204;
    data_memory_read[205] = 32'd205;
    data_memory_read[206] = 32'd206;
    data_memory_read[207] = 32'd207;
    data_memory_read[208] = 32'd208;
    data_memory_read[209] = 32'd209;
    data_memory_read[210] = 32'd210;
    data_memory_read[211] = 32'd211;
    data_memory_read[212] = 32'd212;
    data_memory_read[213] = 32'd213;
    data_memory_read[214] = 32'd214;
    data_memory_read[215] = 32'd215;
    data_memory_read[216] = 32'd216;
    data_memory_read[217] = 32'd217;
    data_memory_read[218] = 32'd218;
    data_memory_read[219] = 32'd219;
    data_memory_read[220] = 32'd220;
    data_memory_read[221] = 32'd221;
    data_memory_read[222] = 32'd222;
    data_memory_read[223] = 32'd223;
    data_memory_read[224] = 32'd224;
    data_memory_read[225] = 32'd225;
    data_memory_read[226] = 32'd226;
    data_memory_read[227] = 32'd227;
    data_memory_read[228] = 32'd228;
    data_memory_read[229] = 32'd229;
    data_memory_read[230] = 32'd230;
    data_memory_read[231] = 32'd231;
    data_memory_read[232] = 32'd232;
    data_memory_read[233] = 32'd233;
    data_memory_read[234] = 32'd234;
    data_memory_read[235] = 32'd235;
    data_memory_read[236] = 32'd236;
    data_memory_read[237] = 32'd237;
    data_memory_read[238] = 32'd238;
    data_memory_read[239] = 32'd239;
    data_memory_read[240] = 32'd240;
    data_memory_read[241] = 32'd241;
    data_memory_read[242] = 32'd242;
    data_memory_read[243] = 32'd243;
    data_memory_read[244] = 32'd244;
    data_memory_read[245] = 32'd245;
    data_memory_read[246] = 32'd246;
    data_memory_read[247] = 32'd247;
    data_memory_read[248] = 32'd248;
    data_memory_read[249] = 32'd249;
    data_memory_read[250] = 32'd250;
    data_memory_read[251] = 32'd251;
    data_memory_read[252] = 32'd252;
    data_memory_read[253] = 32'd253;
    data_memory_read[254] = 32'd254;
    data_memory_read[255] = 32'd255;
    data_memory_read[256] = 32'd256;
    data_memory_read[257] = 32'd257;
    data_memory_read[258] = 32'd258;
    data_memory_read[259] = 32'd259;
    data_memory_read[260] = 32'd260;
    data_memory_read[261] = 32'd261;
    data_memory_read[262] = 32'd262;
    data_memory_read[263] = 32'd263;
    data_memory_read[264] = 32'd264;
    data_memory_read[265] = 32'd265;
    data_memory_read[266] = 32'd266;
    data_memory_read[267] = 32'd267;
    data_memory_read[268] = 32'd268;
    data_memory_read[269] = 32'd269;
    data_memory_read[270] = 32'd270;
    data_memory_read[271] = 32'd271;
    data_memory_read[272] = 32'd272;
    data_memory_read[273] = 32'd273;
    data_memory_read[274] = 32'd274;
    data_memory_read[275] = 32'd275;
    data_memory_read[276] = 32'd276;
    data_memory_read[277] = 32'd277;
    data_memory_read[278] = 32'd278;
    data_memory_read[279] = 32'd279;
    data_memory_read[280] = 32'd280;
    data_memory_read[281] = 32'd281;
    data_memory_read[282] = 32'd282;
    data_memory_read[283] = 32'd283;
    data_memory_read[284] = 32'd284;
    data_memory_read[285] = 32'd285;
    data_memory_read[286] = 32'd286;
    data_memory_read[287] = 32'd287;
    data_memory_read[288] = 32'd288;
    data_memory_read[289] = 32'd289;
    data_memory_read[290] = 32'd290;
    data_memory_read[291] = 32'd291;
    data_memory_read[292] = 32'd292;
    data_memory_read[293] = 32'd293;
    data_memory_read[294] = 32'd294;
    data_memory_read[295] = 32'd295;
    data_memory_read[296] = 32'd296;
    data_memory_read[297] = 32'd297;
    data_memory_read[298] = 32'd298;
    data_memory_read[299] = 32'd299;
    data_memory_read[300] = 32'd300;
    data_memory_read[301] = 32'd301;
    data_memory_read[302] = 32'd302;
    data_memory_read[303] = 32'd303;
    data_memory_read[304] = 32'd304;
    data_memory_read[305] = 32'd305;
    data_memory_read[306] = 32'd306;
    data_memory_read[307] = 32'd307;
    data_memory_read[308] = 32'd308;
    data_memory_read[309] = 32'd309;
    data_memory_read[310] = 32'd310;
    data_memory_read[311] = 32'd311;
    data_memory_read[312] = 32'd312;
    data_memory_read[313] = 32'd313;
    data_memory_read[314] = 32'd314;
    data_memory_read[315] = 32'd315;
    data_memory_read[316] = 32'd316;
    data_memory_read[317] = 32'd317;
    data_memory_read[318] = 32'd318;
    data_memory_read[319] = 32'd319;
    data_memory_read[320] = 32'd320;
    data_memory_read[321] = 32'd321;
    data_memory_read[322] = 32'd322;
    data_memory_read[323] = 32'd323;
    data_memory_read[324] = 32'd324;
    data_memory_read[325] = 32'd325;
    data_memory_read[326] = 32'd326;
    data_memory_read[327] = 32'd327;
    data_memory_read[328] = 32'd328;
    data_memory_read[329] = 32'd329;
    data_memory_read[330] = 32'd330;
    data_memory_read[331] = 32'd331;
    data_memory_read[332] = 32'd332;
    data_memory_read[333] = 32'd333;
    data_memory_read[334] = 32'd334;
    data_memory_read[335] = 32'd335;
    data_memory_read[336] = 32'd336;
    data_memory_read[337] = 32'd337;
    data_memory_read[338] = 32'd338;
    data_memory_read[339] = 32'd339;
    data_memory_read[340] = 32'd340;
    data_memory_read[341] = 32'd341;
    data_memory_read[342] = 32'd342;
    data_memory_read[343] = 32'd343;
    data_memory_read[344] = 32'd344;
    data_memory_read[345] = 32'd345;
    data_memory_read[346] = 32'd346;
    data_memory_read[347] = 32'd347;
    data_memory_read[348] = 32'd348;
    data_memory_read[349] = 32'd349;
    data_memory_read[350] = 32'd350;
    data_memory_read[351] = 32'd351;
    data_memory_read[352] = 32'd352;
    data_memory_read[353] = 32'd353;
    data_memory_read[354] = 32'd354;
    data_memory_read[355] = 32'd355;
    data_memory_read[356] = 32'd356;
    data_memory_read[357] = 32'd357;
    data_memory_read[358] = 32'd358;
    data_memory_read[359] = 32'd359;
    data_memory_read[360] = 32'd360;
    data_memory_read[361] = 32'd361;
    data_memory_read[362] = 32'd362;
    data_memory_read[363] = 32'd363;
    data_memory_read[364] = 32'd364;
    data_memory_read[365] = 32'd365;
    data_memory_read[366] = 32'd366;
    data_memory_read[367] = 32'd367;
    data_memory_read[368] = 32'd368;
    data_memory_read[369] = 32'd369;
    data_memory_read[370] = 32'd370;
    data_memory_read[371] = 32'd371;
    data_memory_read[372] = 32'd372;
    data_memory_read[373] = 32'd373;
    data_memory_read[374] = 32'd374;
    data_memory_read[375] = 32'd375;
    data_memory_read[376] = 32'd376;
    data_memory_read[377] = 32'd377;
    data_memory_read[378] = 32'd378;
    data_memory_read[379] = 32'd379;
    data_memory_read[380] = 32'd380;
    data_memory_read[381] = 32'd381;
    data_memory_read[382] = 32'd382;
    data_memory_read[383] = 32'd383;
    data_memory_read[384] = 32'd384;
    data_memory_read[385] = 32'd385;
    data_memory_read[386] = 32'd386;
    data_memory_read[387] = 32'd387;
    data_memory_read[388] = 32'd388;
    data_memory_read[389] = 32'd389;
    data_memory_read[390] = 32'd390;
    data_memory_read[391] = 32'd391;
    data_memory_read[392] = 32'd392;
    data_memory_read[393] = 32'd393;
    data_memory_read[394] = 32'd394;
    data_memory_read[395] = 32'd395;
    data_memory_read[396] = 32'd396;
    data_memory_read[397] = 32'd397;
    data_memory_read[398] = 32'd398;
    data_memory_read[399] = 32'd399;
    data_memory_read[400] = 32'd400;
    data_memory_read[401] = 32'd401;
    data_memory_read[402] = 32'd402;
    data_memory_read[403] = 32'd403;
    data_memory_read[404] = 32'd404;
    data_memory_read[405] = 32'd405;
    data_memory_read[406] = 32'd406;
    data_memory_read[407] = 32'd407;
    data_memory_read[408] = 32'd408;
    data_memory_read[409] = 32'd409;
    data_memory_read[410] = 32'd410;
    data_memory_read[411] = 32'd411;
    data_memory_read[412] = 32'd412;
    data_memory_read[413] = 32'd413;
    data_memory_read[414] = 32'd414;
    data_memory_read[415] = 32'd415;
    data_memory_read[416] = 32'd416;
    data_memory_read[417] = 32'd417;
    data_memory_read[418] = 32'd418;
    data_memory_read[419] = 32'd419;
    data_memory_read[420] = 32'd420;
    data_memory_read[421] = 32'd421;
    data_memory_read[422] = 32'd422;
    data_memory_read[423] = 32'd423;
    data_memory_read[424] = 32'd424;
    data_memory_read[425] = 32'd425;
    data_memory_read[426] = 32'd426;
    data_memory_read[427] = 32'd427;
    data_memory_read[428] = 32'd428;
    data_memory_read[429] = 32'd429;
    data_memory_read[430] = 32'd430;
    data_memory_read[431] = 32'd431;
    data_memory_read[432] = 32'd432;
    data_memory_read[433] = 32'd433;
    data_memory_read[434] = 32'd434;
    data_memory_read[435] = 32'd435;
    data_memory_read[436] = 32'd436;
    data_memory_read[437] = 32'd437;
    data_memory_read[438] = 32'd438;
    data_memory_read[439] = 32'd439;
    data_memory_read[440] = 32'd440;
    data_memory_read[441] = 32'd441;
    data_memory_read[442] = 32'd442;
    data_memory_read[443] = 32'd443;
    data_memory_read[444] = 32'd444;
    data_memory_read[445] = 32'd445;
    data_memory_read[446] = 32'd446;
    data_memory_read[447] = 32'd447;
    data_memory_read[448] = 32'd448;
    data_memory_read[449] = 32'd449;
    data_memory_read[450] = 32'd450;
    data_memory_read[451] = 32'd451;
    data_memory_read[452] = 32'd452;
    data_memory_read[453] = 32'd453;
    data_memory_read[454] = 32'd454;
    data_memory_read[455] = 32'd455;
    data_memory_read[456] = 32'd456;
    data_memory_read[457] = 32'd457;
    data_memory_read[458] = 32'd458;
    data_memory_read[459] = 32'd459;
    data_memory_read[460] = 32'd460;
    data_memory_read[461] = 32'd461;
    data_memory_read[462] = 32'd462;
    data_memory_read[463] = 32'd463;
    data_memory_read[464] = 32'd464;
    data_memory_read[465] = 32'd465;
    data_memory_read[466] = 32'd466;
    data_memory_read[467] = 32'd467;
    data_memory_read[468] = 32'd468;
    data_memory_read[469] = 32'd469;
    data_memory_read[470] = 32'd470;
    data_memory_read[471] = 32'd471;
    data_memory_read[472] = 32'd472;
    data_memory_read[473] = 32'd473;
    data_memory_read[474] = 32'd474;
    data_memory_read[475] = 32'd475;
    data_memory_read[476] = 32'd476;
    data_memory_read[477] = 32'd477;
    data_memory_read[478] = 32'd478;
    data_memory_read[479] = 32'd479;
    data_memory_read[480] = 32'd480;
    data_memory_read[481] = 32'd481;
    data_memory_read[482] = 32'd482;
    data_memory_read[483] = 32'd483;
    data_memory_read[484] = 32'd484;
    data_memory_read[485] = 32'd485;
    data_memory_read[486] = 32'd486;
    data_memory_read[487] = 32'd487;
    data_memory_read[488] = 32'd488;
    data_memory_read[489] = 32'd489;
    data_memory_read[490] = 32'd490;
    data_memory_read[491] = 32'd491;
    data_memory_read[492] = 32'd492;
    data_memory_read[493] = 32'd493;
    data_memory_read[494] = 32'd494;
    data_memory_read[495] = 32'd495;
    data_memory_read[496] = 32'd496;
    data_memory_read[497] = 32'd497;
    data_memory_read[498] = 32'd498;
    data_memory_read[499] = 32'd499;
    data_memory_read[500] = 32'd500;
    data_memory_read[501] = 32'd501;
    data_memory_read[502] = 32'd502;
    data_memory_read[503] = 32'd503;
    data_memory_read[504] = 32'd504;
    data_memory_read[505] = 32'd505;
    data_memory_read[506] = 32'd506;
    data_memory_read[507] = 32'd507;
    data_memory_read[508] = 32'd508;
    data_memory_read[509] = 32'd509;
    data_memory_read[510] = 32'd510;
    data_memory_read[511] = 32'd511;
    data_memory_read[512] = 32'd512;
    data_memory_read[513] = 32'd513;
    data_memory_read[514] = 32'd514;
    data_memory_read[515] = 32'd515;
    data_memory_read[516] = 32'd516;
    data_memory_read[517] = 32'd517;
    data_memory_read[518] = 32'd518;
    data_memory_read[519] = 32'd519;
    data_memory_read[520] = 32'd520;
    data_memory_read[521] = 32'd521;
    data_memory_read[522] = 32'd522;
    data_memory_read[523] = 32'd523;
    data_memory_read[524] = 32'd524;
    data_memory_read[525] = 32'd525;
    data_memory_read[526] = 32'd526;
    data_memory_read[527] = 32'd527;
    data_memory_read[528] = 32'd528;
    data_memory_read[529] = 32'd529;
    data_memory_read[530] = 32'd530;
    data_memory_read[531] = 32'd531;
    data_memory_read[532] = 32'd532;
    data_memory_read[533] = 32'd533;
    data_memory_read[534] = 32'd534;
    data_memory_read[535] = 32'd535;
    data_memory_read[536] = 32'd536;
    data_memory_read[537] = 32'd537;
    data_memory_read[538] = 32'd538;
    data_memory_read[539] = 32'd539;
    data_memory_read[540] = 32'd540;
    data_memory_read[541] = 32'd541;
    data_memory_read[542] = 32'd542;
    data_memory_read[543] = 32'd543;
    data_memory_read[544] = 32'd544;
    data_memory_read[545] = 32'd545;
    data_memory_read[546] = 32'd546;
    data_memory_read[547] = 32'd547;
    data_memory_read[548] = 32'd548;
    data_memory_read[549] = 32'd549;
    data_memory_read[550] = 32'd550;
    data_memory_read[551] = 32'd551;
    data_memory_read[552] = 32'd552;
    data_memory_read[553] = 32'd553;
    data_memory_read[554] = 32'd554;
    data_memory_read[555] = 32'd555;
    data_memory_read[556] = 32'd556;
    data_memory_read[557] = 32'd557;
    data_memory_read[558] = 32'd558;
    data_memory_read[559] = 32'd559;
    data_memory_read[560] = 32'd560;
    data_memory_read[561] = 32'd561;
    data_memory_read[562] = 32'd562;
    data_memory_read[563] = 32'd563;
    data_memory_read[564] = 32'd564;
    data_memory_read[565] = 32'd565;
    data_memory_read[566] = 32'd566;
    data_memory_read[567] = 32'd567;
    data_memory_read[568] = 32'd568;
    data_memory_read[569] = 32'd569;
    data_memory_read[570] = 32'd570;
    data_memory_read[571] = 32'd571;
    data_memory_read[572] = 32'd572;
    data_memory_read[573] = 32'd573;
    data_memory_read[574] = 32'd574;
    data_memory_read[575] = 32'd575;
    data_memory_read[576] = 32'd576;
    data_memory_read[577] = 32'd577;
    data_memory_read[578] = 32'd578;
    data_memory_read[579] = 32'd579;
    data_memory_read[580] = 32'd580;
    data_memory_read[581] = 32'd581;
    data_memory_read[582] = 32'd582;
    data_memory_read[583] = 32'd583;
    data_memory_read[584] = 32'd584;
    data_memory_read[585] = 32'd585;
    data_memory_read[586] = 32'd586;
    data_memory_read[587] = 32'd587;
    data_memory_read[588] = 32'd588;
    data_memory_read[589] = 32'd589;
    data_memory_read[590] = 32'd590;
    data_memory_read[591] = 32'd591;
    data_memory_read[592] = 32'd592;
    data_memory_read[593] = 32'd593;
    data_memory_read[594] = 32'd594;
    data_memory_read[595] = 32'd595;
    data_memory_read[596] = 32'd596;
    data_memory_read[597] = 32'd597;
    data_memory_read[598] = 32'd598;
    data_memory_read[599] = 32'd599;
    data_memory_read[600] = 32'd600;
    data_memory_read[601] = 32'd601;
    data_memory_read[602] = 32'd602;
    data_memory_read[603] = 32'd603;
    data_memory_read[604] = 32'd604;
    data_memory_read[605] = 32'd605;
    data_memory_read[606] = 32'd606;
    data_memory_read[607] = 32'd607;
    data_memory_read[608] = 32'd608;
    data_memory_read[609] = 32'd609;
    data_memory_read[610] = 32'd610;
    data_memory_read[611] = 32'd611;
    data_memory_read[612] = 32'd612;
    data_memory_read[613] = 32'd613;
    data_memory_read[614] = 32'd614;
    data_memory_read[615] = 32'd615;
    data_memory_read[616] = 32'd616;
    data_memory_read[617] = 32'd617;
    data_memory_read[618] = 32'd618;
    data_memory_read[619] = 32'd619;
    data_memory_read[620] = 32'd620;
    data_memory_read[621] = 32'd621;
    data_memory_read[622] = 32'd622;
    data_memory_read[623] = 32'd623;
    data_memory_read[624] = 32'd624;
    data_memory_read[625] = 32'd625;
    data_memory_read[626] = 32'd626;
    data_memory_read[627] = 32'd627;
    data_memory_read[628] = 32'd628;
    data_memory_read[629] = 32'd629;
    data_memory_read[630] = 32'd630;
    data_memory_read[631] = 32'd631;
    data_memory_read[632] = 32'd632;
    data_memory_read[633] = 32'd633;
    data_memory_read[634] = 32'd634;
    data_memory_read[635] = 32'd635;
    data_memory_read[636] = 32'd636;
    data_memory_read[637] = 32'd637;
    data_memory_read[638] = 32'd638;
    data_memory_read[639] = 32'd639;
    data_memory_read[640] = 32'd640;
    data_memory_read[641] = 32'd641;
    data_memory_read[642] = 32'd642;
    data_memory_read[643] = 32'd643;
    data_memory_read[644] = 32'd644;
    data_memory_read[645] = 32'd645;
    data_memory_read[646] = 32'd646;
    data_memory_read[647] = 32'd647;
    data_memory_read[648] = 32'd648;
    data_memory_read[649] = 32'd649;
    data_memory_read[650] = 32'd650;
    data_memory_read[651] = 32'd651;
    data_memory_read[652] = 32'd652;
    data_memory_read[653] = 32'd653;
    data_memory_read[654] = 32'd654;
    data_memory_read[655] = 32'd655;
    data_memory_read[656] = 32'd656;
    data_memory_read[657] = 32'd657;
    data_memory_read[658] = 32'd658;
    data_memory_read[659] = 32'd659;
    data_memory_read[660] = 32'd660;
    data_memory_read[661] = 32'd661;
    data_memory_read[662] = 32'd662;
    data_memory_read[663] = 32'd663;
    data_memory_read[664] = 32'd664;
    data_memory_read[665] = 32'd665;
    data_memory_read[666] = 32'd666;
    data_memory_read[667] = 32'd667;
    data_memory_read[668] = 32'd668;
    data_memory_read[669] = 32'd669;
    data_memory_read[670] = 32'd670;
    data_memory_read[671] = 32'd671;
    data_memory_read[672] = 32'd672;
    data_memory_read[673] = 32'd673;
    data_memory_read[674] = 32'd674;
    data_memory_read[675] = 32'd675;
    data_memory_read[676] = 32'd676;
    data_memory_read[677] = 32'd677;
    data_memory_read[678] = 32'd678;
    data_memory_read[679] = 32'd679;
    data_memory_read[680] = 32'd680;
    data_memory_read[681] = 32'd681;
    data_memory_read[682] = 32'd682;
    data_memory_read[683] = 32'd683;
    data_memory_read[684] = 32'd684;
    data_memory_read[685] = 32'd685;
    data_memory_read[686] = 32'd686;
    data_memory_read[687] = 32'd687;
    data_memory_read[688] = 32'd688;
    data_memory_read[689] = 32'd689;
    data_memory_read[690] = 32'd690;
    data_memory_read[691] = 32'd691;
    data_memory_read[692] = 32'd692;
    data_memory_read[693] = 32'd693;
    data_memory_read[694] = 32'd694;
    data_memory_read[695] = 32'd695;
    data_memory_read[696] = 32'd696;
    data_memory_read[697] = 32'd697;
    data_memory_read[698] = 32'd698;
    data_memory_read[699] = 32'd699;
    data_memory_read[700] = 32'd700;
    data_memory_read[701] = 32'd701;
    data_memory_read[702] = 32'd702;
    data_memory_read[703] = 32'd703;
    data_memory_read[704] = 32'd704;
    data_memory_read[705] = 32'd705;
    data_memory_read[706] = 32'd706;
    data_memory_read[707] = 32'd707;
    data_memory_read[708] = 32'd708;
    data_memory_read[709] = 32'd709;
    data_memory_read[710] = 32'd710;
    data_memory_read[711] = 32'd711;
    data_memory_read[712] = 32'd712;
    data_memory_read[713] = 32'd713;
    data_memory_read[714] = 32'd714;
    data_memory_read[715] = 32'd715;
    data_memory_read[716] = 32'd716;
    data_memory_read[717] = 32'd717;
    data_memory_read[718] = 32'd718;
    data_memory_read[719] = 32'd719;
    data_memory_read[720] = 32'd720;
    data_memory_read[721] = 32'd721;
    data_memory_read[722] = 32'd722;
    data_memory_read[723] = 32'd723;
    data_memory_read[724] = 32'd724;
    data_memory_read[725] = 32'd725;
    data_memory_read[726] = 32'd726;
    data_memory_read[727] = 32'd727;
    data_memory_read[728] = 32'd728;
    data_memory_read[729] = 32'd729;
    data_memory_read[730] = 32'd730;
    data_memory_read[731] = 32'd731;
    data_memory_read[732] = 32'd732;
    data_memory_read[733] = 32'd733;
    data_memory_read[734] = 32'd734;
    data_memory_read[735] = 32'd735;
    data_memory_read[736] = 32'd736;
    data_memory_read[737] = 32'd737;
    data_memory_read[738] = 32'd738;
    data_memory_read[739] = 32'd739;
    data_memory_read[740] = 32'd740;
    data_memory_read[741] = 32'd741;
    data_memory_read[742] = 32'd742;
    data_memory_read[743] = 32'd743;
    data_memory_read[744] = 32'd744;
    data_memory_read[745] = 32'd745;
    data_memory_read[746] = 32'd746;
    data_memory_read[747] = 32'd747;
    data_memory_read[748] = 32'd748;
    data_memory_read[749] = 32'd749;
    data_memory_read[750] = 32'd750;
    data_memory_read[751] = 32'd751;
    data_memory_read[752] = 32'd752;
    data_memory_read[753] = 32'd753;
    data_memory_read[754] = 32'd754;
    data_memory_read[755] = 32'd755;
    data_memory_read[756] = 32'd756;
    data_memory_read[757] = 32'd757;
    data_memory_read[758] = 32'd758;
    data_memory_read[759] = 32'd759;
    data_memory_read[760] = 32'd760;
    data_memory_read[761] = 32'd761;
    data_memory_read[762] = 32'd762;
    data_memory_read[763] = 32'd763;
    data_memory_read[764] = 32'd764;
    data_memory_read[765] = 32'd765;
    data_memory_read[766] = 32'd766;
    data_memory_read[767] = 32'd767;
    data_memory_read[768] = 32'd768;
    data_memory_read[769] = 32'd769;
    data_memory_read[770] = 32'd770;
    data_memory_read[771] = 32'd771;
    data_memory_read[772] = 32'd772;
    data_memory_read[773] = 32'd773;
    data_memory_read[774] = 32'd774;
    data_memory_read[775] = 32'd775;
    data_memory_read[776] = 32'd776;
    data_memory_read[777] = 32'd777;
    data_memory_read[778] = 32'd778;
    data_memory_read[779] = 32'd779;
    data_memory_read[780] = 32'd780;
    data_memory_read[781] = 32'd781;
    data_memory_read[782] = 32'd782;
    data_memory_read[783] = 32'd783;
    data_memory_read[784] = 32'd784;
    data_memory_read[785] = 32'd785;
    data_memory_read[786] = 32'd786;
    data_memory_read[787] = 32'd787;
    data_memory_read[788] = 32'd788;
    data_memory_read[789] = 32'd789;
    data_memory_read[790] = 32'd790;
    data_memory_read[791] = 32'd791;
    data_memory_read[792] = 32'd792;
    data_memory_read[793] = 32'd793;
    data_memory_read[794] = 32'd794;
    data_memory_read[795] = 32'd795;
    data_memory_read[796] = 32'd796;
    data_memory_read[797] = 32'd797;
    data_memory_read[798] = 32'd798;
    data_memory_read[799] = 32'd799;
    data_memory_read[800] = 32'd800;
    data_memory_read[801] = 32'd801;
    data_memory_read[802] = 32'd802;
    data_memory_read[803] = 32'd803;
    data_memory_read[804] = 32'd804;
    data_memory_read[805] = 32'd805;
    data_memory_read[806] = 32'd806;
    data_memory_read[807] = 32'd807;
    data_memory_read[808] = 32'd808;
    data_memory_read[809] = 32'd809;
    data_memory_read[810] = 32'd810;
    data_memory_read[811] = 32'd811;
    data_memory_read[812] = 32'd812;
    data_memory_read[813] = 32'd813;
    data_memory_read[814] = 32'd814;
    data_memory_read[815] = 32'd815;
    data_memory_read[816] = 32'd816;
    data_memory_read[817] = 32'd817;
    data_memory_read[818] = 32'd818;
    data_memory_read[819] = 32'd819;
    data_memory_read[820] = 32'd820;
    data_memory_read[821] = 32'd821;
    data_memory_read[822] = 32'd822;
    data_memory_read[823] = 32'd823;
    data_memory_read[824] = 32'd824;
    data_memory_read[825] = 32'd825;
    data_memory_read[826] = 32'd826;
    data_memory_read[827] = 32'd827;
    data_memory_read[828] = 32'd828;
    data_memory_read[829] = 32'd829;
    data_memory_read[830] = 32'd830;
    data_memory_read[831] = 32'd831;
    data_memory_read[832] = 32'd832;
    data_memory_read[833] = 32'd833;
    data_memory_read[834] = 32'd834;
    data_memory_read[835] = 32'd835;
    data_memory_read[836] = 32'd836;
    data_memory_read[837] = 32'd837;
    data_memory_read[838] = 32'd838;
    data_memory_read[839] = 32'd839;
    data_memory_read[840] = 32'd840;
    data_memory_read[841] = 32'd841;
    data_memory_read[842] = 32'd842;
    data_memory_read[843] = 32'd843;
    data_memory_read[844] = 32'd844;
    data_memory_read[845] = 32'd845;
    data_memory_read[846] = 32'd846;
    data_memory_read[847] = 32'd847;
    data_memory_read[848] = 32'd848;
    data_memory_read[849] = 32'd849;
    data_memory_read[850] = 32'd850;
    data_memory_read[851] = 32'd851;
    data_memory_read[852] = 32'd852;
    data_memory_read[853] = 32'd853;
    data_memory_read[854] = 32'd854;
    data_memory_read[855] = 32'd855;
    data_memory_read[856] = 32'd856;
    data_memory_read[857] = 32'd857;
    data_memory_read[858] = 32'd858;
    data_memory_read[859] = 32'd859;
    data_memory_read[860] = 32'd860;
    data_memory_read[861] = 32'd861;
    data_memory_read[862] = 32'd862;
    data_memory_read[863] = 32'd863;
    data_memory_read[864] = 32'd864;
    data_memory_read[865] = 32'd865;
    data_memory_read[866] = 32'd866;
    data_memory_read[867] = 32'd867;
    data_memory_read[868] = 32'd868;
    data_memory_read[869] = 32'd869;
    data_memory_read[870] = 32'd870;
    data_memory_read[871] = 32'd871;
    data_memory_read[872] = 32'd872;
    data_memory_read[873] = 32'd873;
    data_memory_read[874] = 32'd874;
    data_memory_read[875] = 32'd875;
    data_memory_read[876] = 32'd876;
    data_memory_read[877] = 32'd877;
    data_memory_read[878] = 32'd878;
    data_memory_read[879] = 32'd879;
    data_memory_read[880] = 32'd880;
    data_memory_read[881] = 32'd881;
    data_memory_read[882] = 32'd882;
    data_memory_read[883] = 32'd883;
    data_memory_read[884] = 32'd884;
    data_memory_read[885] = 32'd885;
    data_memory_read[886] = 32'd886;
    data_memory_read[887] = 32'd887;
    data_memory_read[888] = 32'd888;
    data_memory_read[889] = 32'd889;
    data_memory_read[890] = 32'd890;
    data_memory_read[891] = 32'd891;
    data_memory_read[892] = 32'd892;
    data_memory_read[893] = 32'd893;
    data_memory_read[894] = 32'd894;
    data_memory_read[895] = 32'd895;
    data_memory_read[896] = 32'd896;
    data_memory_read[897] = 32'd897;
    data_memory_read[898] = 32'd898;
    data_memory_read[899] = 32'd899;
    data_memory_read[900] = 32'd900;
    data_memory_read[901] = 32'd901;
    data_memory_read[902] = 32'd902;
    data_memory_read[903] = 32'd903;
    data_memory_read[904] = 32'd904;
    data_memory_read[905] = 32'd905;
    data_memory_read[906] = 32'd906;
    data_memory_read[907] = 32'd907;
    data_memory_read[908] = 32'd908;
    data_memory_read[909] = 32'd909;
    data_memory_read[910] = 32'd910;
    data_memory_read[911] = 32'd911;
    data_memory_read[912] = 32'd912;
    data_memory_read[913] = 32'd913;
    data_memory_read[914] = 32'd914;
    data_memory_read[915] = 32'd915;
    data_memory_read[916] = 32'd916;
    data_memory_read[917] = 32'd917;
    data_memory_read[918] = 32'd918;
    data_memory_read[919] = 32'd919;
    data_memory_read[920] = 32'd920;
    data_memory_read[921] = 32'd921;
    data_memory_read[922] = 32'd922;
    data_memory_read[923] = 32'd923;
    data_memory_read[924] = 32'd924;
    data_memory_read[925] = 32'd925;
    data_memory_read[926] = 32'd926;
    data_memory_read[927] = 32'd927;
    data_memory_read[928] = 32'd928;
    data_memory_read[929] = 32'd929;
    data_memory_read[930] = 32'd930;
    data_memory_read[931] = 32'd931;
    data_memory_read[932] = 32'd932;
    data_memory_read[933] = 32'd933;
    data_memory_read[934] = 32'd934;
    data_memory_read[935] = 32'd935;
    data_memory_read[936] = 32'd936;
    data_memory_read[937] = 32'd937;
    data_memory_read[938] = 32'd938;
    data_memory_read[939] = 32'd939;
    data_memory_read[940] = 32'd940;
    data_memory_read[941] = 32'd941;
    data_memory_read[942] = 32'd942;
    data_memory_read[943] = 32'd943;
    data_memory_read[944] = 32'd944;
    data_memory_read[945] = 32'd945;
    data_memory_read[946] = 32'd946;
    data_memory_read[947] = 32'd947;
    data_memory_read[948] = 32'd948;
    data_memory_read[949] = 32'd949;
    data_memory_read[950] = 32'd950;
    data_memory_read[951] = 32'd951;
    data_memory_read[952] = 32'd952;
    data_memory_read[953] = 32'd953;
    data_memory_read[954] = 32'd954;
    data_memory_read[955] = 32'd955;
    data_memory_read[956] = 32'd956;
    data_memory_read[957] = 32'd957;
    data_memory_read[958] = 32'd958;
    data_memory_read[959] = 32'd959;
    data_memory_read[960] = 32'd960;
    data_memory_read[961] = 32'd961;
    data_memory_read[962] = 32'd962;
    data_memory_read[963] = 32'd963;
    data_memory_read[964] = 32'd964;
    data_memory_read[965] = 32'd965;
    data_memory_read[966] = 32'd966;
    data_memory_read[967] = 32'd967;
    data_memory_read[968] = 32'd968;
    data_memory_read[969] = 32'd969;
    data_memory_read[970] = 32'd970;
    data_memory_read[971] = 32'd971;
    data_memory_read[972] = 32'd972;
    data_memory_read[973] = 32'd973;
    data_memory_read[974] = 32'd974;
    data_memory_read[975] = 32'd975;
    data_memory_read[976] = 32'd976;
    data_memory_read[977] = 32'd977;
    data_memory_read[978] = 32'd978;
    data_memory_read[979] = 32'd979;
    data_memory_read[980] = 32'd980;
    data_memory_read[981] = 32'd981;
    data_memory_read[982] = 32'd982;
    data_memory_read[983] = 32'd983;
    data_memory_read[984] = 32'd984;
    data_memory_read[985] = 32'd985;
    data_memory_read[986] = 32'd986;
    data_memory_read[987] = 32'd987;
    data_memory_read[988] = 32'd988;
    data_memory_read[989] = 32'd989;
    data_memory_read[990] = 32'd990;
    data_memory_read[991] = 32'd991;
    data_memory_read[992] = 32'd992;
    data_memory_read[993] = 32'd993;
    data_memory_read[994] = 32'd994;
    data_memory_read[995] = 32'd995;
    data_memory_read[996] = 32'd996;
    data_memory_read[997] = 32'd997;
    data_memory_read[998] = 32'd998;
    data_memory_read[999] = 32'd999;
    data_memory_read[1000] = 32'd1000;
    data_memory_read[1001] = 32'd1001;
    data_memory_read[1002] = 32'd1002;
    data_memory_read[1003] = 32'd1003;
    data_memory_read[1004] = 32'd1004;
    data_memory_read[1005] = 32'd1005;
    data_memory_read[1006] = 32'd1006;
    data_memory_read[1007] = 32'd1007;
    data_memory_read[1008] = 32'd1008;
    data_memory_read[1009] = 32'd1009;
    data_memory_read[1010] = 32'd1010;
    data_memory_read[1011] = 32'd1011;
    data_memory_read[1012] = 32'd1012;
    data_memory_read[1013] = 32'd1013;
    data_memory_read[1014] = 32'd1014;
    data_memory_read[1015] = 32'd1015;
    data_memory_read[1016] = 32'd1016;
    data_memory_read[1017] = 32'd1017;
    data_memory_read[1018] = 32'd1018;
    data_memory_read[1019] = 32'd1019;
    data_memory_read[1020] = 32'd1020;
    data_memory_read[1021] = 32'd1021;
    data_memory_read[1022] = 32'd1022;
    data_memory_read[1023] = 32'd1023;
  end
  always @(posedge clk_100M) begin
    if (data_read_write_port_dma__en)
      data_memory_read[data_read_read_port_dma__addr] <= data_read_write_port_dma__data;
  end
  reg [31:0] _0_;
  reg [31:0] _1_;
  always @(posedge clk_100M) begin
    _0_ <= data_memory_read[data_read_port_axi__addr];
    _1_ <= data_memory_read[data_read_read_port_dma__addr];
  end
  assign data_read_port_axi__data = _0_;
  assign data_read_dma_read_data = _1_;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:279" *)
  reg [31:0] data_memory_write [1023:0];
  initial begin
    data_memory_write[0] = 32'd0;
    data_memory_write[1] = 32'd0;
    data_memory_write[2] = 32'd0;
    data_memory_write[3] = 32'd0;
    data_memory_write[4] = 32'd0;
    data_memory_write[5] = 32'd0;
    data_memory_write[6] = 32'd0;
    data_memory_write[7] = 32'd0;
    data_memory_write[8] = 32'd0;
    data_memory_write[9] = 32'd0;
    data_memory_write[10] = 32'd0;
    data_memory_write[11] = 32'd0;
    data_memory_write[12] = 32'd0;
    data_memory_write[13] = 32'd0;
    data_memory_write[14] = 32'd0;
    data_memory_write[15] = 32'd0;
    data_memory_write[16] = 32'd0;
    data_memory_write[17] = 32'd0;
    data_memory_write[18] = 32'd0;
    data_memory_write[19] = 32'd0;
    data_memory_write[20] = 32'd0;
    data_memory_write[21] = 32'd0;
    data_memory_write[22] = 32'd0;
    data_memory_write[23] = 32'd0;
    data_memory_write[24] = 32'd0;
    data_memory_write[25] = 32'd0;
    data_memory_write[26] = 32'd0;
    data_memory_write[27] = 32'd0;
    data_memory_write[28] = 32'd0;
    data_memory_write[29] = 32'd0;
    data_memory_write[30] = 32'd0;
    data_memory_write[31] = 32'd0;
    data_memory_write[32] = 32'd0;
    data_memory_write[33] = 32'd0;
    data_memory_write[34] = 32'd0;
    data_memory_write[35] = 32'd0;
    data_memory_write[36] = 32'd0;
    data_memory_write[37] = 32'd0;
    data_memory_write[38] = 32'd0;
    data_memory_write[39] = 32'd0;
    data_memory_write[40] = 32'd0;
    data_memory_write[41] = 32'd0;
    data_memory_write[42] = 32'd0;
    data_memory_write[43] = 32'd0;
    data_memory_write[44] = 32'd0;
    data_memory_write[45] = 32'd0;
    data_memory_write[46] = 32'd0;
    data_memory_write[47] = 32'd0;
    data_memory_write[48] = 32'd0;
    data_memory_write[49] = 32'd0;
    data_memory_write[50] = 32'd0;
    data_memory_write[51] = 32'd0;
    data_memory_write[52] = 32'd0;
    data_memory_write[53] = 32'd0;
    data_memory_write[54] = 32'd0;
    data_memory_write[55] = 32'd0;
    data_memory_write[56] = 32'd0;
    data_memory_write[57] = 32'd0;
    data_memory_write[58] = 32'd0;
    data_memory_write[59] = 32'd0;
    data_memory_write[60] = 32'd0;
    data_memory_write[61] = 32'd0;
    data_memory_write[62] = 32'd0;
    data_memory_write[63] = 32'd0;
    data_memory_write[64] = 32'd0;
    data_memory_write[65] = 32'd0;
    data_memory_write[66] = 32'd0;
    data_memory_write[67] = 32'd0;
    data_memory_write[68] = 32'd0;
    data_memory_write[69] = 32'd0;
    data_memory_write[70] = 32'd0;
    data_memory_write[71] = 32'd0;
    data_memory_write[72] = 32'd0;
    data_memory_write[73] = 32'd0;
    data_memory_write[74] = 32'd0;
    data_memory_write[75] = 32'd0;
    data_memory_write[76] = 32'd0;
    data_memory_write[77] = 32'd0;
    data_memory_write[78] = 32'd0;
    data_memory_write[79] = 32'd0;
    data_memory_write[80] = 32'd0;
    data_memory_write[81] = 32'd0;
    data_memory_write[82] = 32'd0;
    data_memory_write[83] = 32'd0;
    data_memory_write[84] = 32'd0;
    data_memory_write[85] = 32'd0;
    data_memory_write[86] = 32'd0;
    data_memory_write[87] = 32'd0;
    data_memory_write[88] = 32'd0;
    data_memory_write[89] = 32'd0;
    data_memory_write[90] = 32'd0;
    data_memory_write[91] = 32'd0;
    data_memory_write[92] = 32'd0;
    data_memory_write[93] = 32'd0;
    data_memory_write[94] = 32'd0;
    data_memory_write[95] = 32'd0;
    data_memory_write[96] = 32'd0;
    data_memory_write[97] = 32'd0;
    data_memory_write[98] = 32'd0;
    data_memory_write[99] = 32'd0;
    data_memory_write[100] = 32'd0;
    data_memory_write[101] = 32'd0;
    data_memory_write[102] = 32'd0;
    data_memory_write[103] = 32'd0;
    data_memory_write[104] = 32'd0;
    data_memory_write[105] = 32'd0;
    data_memory_write[106] = 32'd0;
    data_memory_write[107] = 32'd0;
    data_memory_write[108] = 32'd0;
    data_memory_write[109] = 32'd0;
    data_memory_write[110] = 32'd0;
    data_memory_write[111] = 32'd0;
    data_memory_write[112] = 32'd0;
    data_memory_write[113] = 32'd0;
    data_memory_write[114] = 32'd0;
    data_memory_write[115] = 32'd0;
    data_memory_write[116] = 32'd0;
    data_memory_write[117] = 32'd0;
    data_memory_write[118] = 32'd0;
    data_memory_write[119] = 32'd0;
    data_memory_write[120] = 32'd0;
    data_memory_write[121] = 32'd0;
    data_memory_write[122] = 32'd0;
    data_memory_write[123] = 32'd0;
    data_memory_write[124] = 32'd0;
    data_memory_write[125] = 32'd0;
    data_memory_write[126] = 32'd0;
    data_memory_write[127] = 32'd0;
    data_memory_write[128] = 32'd0;
    data_memory_write[129] = 32'd0;
    data_memory_write[130] = 32'd0;
    data_memory_write[131] = 32'd0;
    data_memory_write[132] = 32'd0;
    data_memory_write[133] = 32'd0;
    data_memory_write[134] = 32'd0;
    data_memory_write[135] = 32'd0;
    data_memory_write[136] = 32'd0;
    data_memory_write[137] = 32'd0;
    data_memory_write[138] = 32'd0;
    data_memory_write[139] = 32'd0;
    data_memory_write[140] = 32'd0;
    data_memory_write[141] = 32'd0;
    data_memory_write[142] = 32'd0;
    data_memory_write[143] = 32'd0;
    data_memory_write[144] = 32'd0;
    data_memory_write[145] = 32'd0;
    data_memory_write[146] = 32'd0;
    data_memory_write[147] = 32'd0;
    data_memory_write[148] = 32'd0;
    data_memory_write[149] = 32'd0;
    data_memory_write[150] = 32'd0;
    data_memory_write[151] = 32'd0;
    data_memory_write[152] = 32'd0;
    data_memory_write[153] = 32'd0;
    data_memory_write[154] = 32'd0;
    data_memory_write[155] = 32'd0;
    data_memory_write[156] = 32'd0;
    data_memory_write[157] = 32'd0;
    data_memory_write[158] = 32'd0;
    data_memory_write[159] = 32'd0;
    data_memory_write[160] = 32'd0;
    data_memory_write[161] = 32'd0;
    data_memory_write[162] = 32'd0;
    data_memory_write[163] = 32'd0;
    data_memory_write[164] = 32'd0;
    data_memory_write[165] = 32'd0;
    data_memory_write[166] = 32'd0;
    data_memory_write[167] = 32'd0;
    data_memory_write[168] = 32'd0;
    data_memory_write[169] = 32'd0;
    data_memory_write[170] = 32'd0;
    data_memory_write[171] = 32'd0;
    data_memory_write[172] = 32'd0;
    data_memory_write[173] = 32'd0;
    data_memory_write[174] = 32'd0;
    data_memory_write[175] = 32'd0;
    data_memory_write[176] = 32'd0;
    data_memory_write[177] = 32'd0;
    data_memory_write[178] = 32'd0;
    data_memory_write[179] = 32'd0;
    data_memory_write[180] = 32'd0;
    data_memory_write[181] = 32'd0;
    data_memory_write[182] = 32'd0;
    data_memory_write[183] = 32'd0;
    data_memory_write[184] = 32'd0;
    data_memory_write[185] = 32'd0;
    data_memory_write[186] = 32'd0;
    data_memory_write[187] = 32'd0;
    data_memory_write[188] = 32'd0;
    data_memory_write[189] = 32'd0;
    data_memory_write[190] = 32'd0;
    data_memory_write[191] = 32'd0;
    data_memory_write[192] = 32'd0;
    data_memory_write[193] = 32'd0;
    data_memory_write[194] = 32'd0;
    data_memory_write[195] = 32'd0;
    data_memory_write[196] = 32'd0;
    data_memory_write[197] = 32'd0;
    data_memory_write[198] = 32'd0;
    data_memory_write[199] = 32'd0;
    data_memory_write[200] = 32'd0;
    data_memory_write[201] = 32'd0;
    data_memory_write[202] = 32'd0;
    data_memory_write[203] = 32'd0;
    data_memory_write[204] = 32'd0;
    data_memory_write[205] = 32'd0;
    data_memory_write[206] = 32'd0;
    data_memory_write[207] = 32'd0;
    data_memory_write[208] = 32'd0;
    data_memory_write[209] = 32'd0;
    data_memory_write[210] = 32'd0;
    data_memory_write[211] = 32'd0;
    data_memory_write[212] = 32'd0;
    data_memory_write[213] = 32'd0;
    data_memory_write[214] = 32'd0;
    data_memory_write[215] = 32'd0;
    data_memory_write[216] = 32'd0;
    data_memory_write[217] = 32'd0;
    data_memory_write[218] = 32'd0;
    data_memory_write[219] = 32'd0;
    data_memory_write[220] = 32'd0;
    data_memory_write[221] = 32'd0;
    data_memory_write[222] = 32'd0;
    data_memory_write[223] = 32'd0;
    data_memory_write[224] = 32'd0;
    data_memory_write[225] = 32'd0;
    data_memory_write[226] = 32'd0;
    data_memory_write[227] = 32'd0;
    data_memory_write[228] = 32'd0;
    data_memory_write[229] = 32'd0;
    data_memory_write[230] = 32'd0;
    data_memory_write[231] = 32'd0;
    data_memory_write[232] = 32'd0;
    data_memory_write[233] = 32'd0;
    data_memory_write[234] = 32'd0;
    data_memory_write[235] = 32'd0;
    data_memory_write[236] = 32'd0;
    data_memory_write[237] = 32'd0;
    data_memory_write[238] = 32'd0;
    data_memory_write[239] = 32'd0;
    data_memory_write[240] = 32'd0;
    data_memory_write[241] = 32'd0;
    data_memory_write[242] = 32'd0;
    data_memory_write[243] = 32'd0;
    data_memory_write[244] = 32'd0;
    data_memory_write[245] = 32'd0;
    data_memory_write[246] = 32'd0;
    data_memory_write[247] = 32'd0;
    data_memory_write[248] = 32'd0;
    data_memory_write[249] = 32'd0;
    data_memory_write[250] = 32'd0;
    data_memory_write[251] = 32'd0;
    data_memory_write[252] = 32'd0;
    data_memory_write[253] = 32'd0;
    data_memory_write[254] = 32'd0;
    data_memory_write[255] = 32'd0;
    data_memory_write[256] = 32'd0;
    data_memory_write[257] = 32'd0;
    data_memory_write[258] = 32'd0;
    data_memory_write[259] = 32'd0;
    data_memory_write[260] = 32'd0;
    data_memory_write[261] = 32'd0;
    data_memory_write[262] = 32'd0;
    data_memory_write[263] = 32'd0;
    data_memory_write[264] = 32'd0;
    data_memory_write[265] = 32'd0;
    data_memory_write[266] = 32'd0;
    data_memory_write[267] = 32'd0;
    data_memory_write[268] = 32'd0;
    data_memory_write[269] = 32'd0;
    data_memory_write[270] = 32'd0;
    data_memory_write[271] = 32'd0;
    data_memory_write[272] = 32'd0;
    data_memory_write[273] = 32'd0;
    data_memory_write[274] = 32'd0;
    data_memory_write[275] = 32'd0;
    data_memory_write[276] = 32'd0;
    data_memory_write[277] = 32'd0;
    data_memory_write[278] = 32'd0;
    data_memory_write[279] = 32'd0;
    data_memory_write[280] = 32'd0;
    data_memory_write[281] = 32'd0;
    data_memory_write[282] = 32'd0;
    data_memory_write[283] = 32'd0;
    data_memory_write[284] = 32'd0;
    data_memory_write[285] = 32'd0;
    data_memory_write[286] = 32'd0;
    data_memory_write[287] = 32'd0;
    data_memory_write[288] = 32'd0;
    data_memory_write[289] = 32'd0;
    data_memory_write[290] = 32'd0;
    data_memory_write[291] = 32'd0;
    data_memory_write[292] = 32'd0;
    data_memory_write[293] = 32'd0;
    data_memory_write[294] = 32'd0;
    data_memory_write[295] = 32'd0;
    data_memory_write[296] = 32'd0;
    data_memory_write[297] = 32'd0;
    data_memory_write[298] = 32'd0;
    data_memory_write[299] = 32'd0;
    data_memory_write[300] = 32'd0;
    data_memory_write[301] = 32'd0;
    data_memory_write[302] = 32'd0;
    data_memory_write[303] = 32'd0;
    data_memory_write[304] = 32'd0;
    data_memory_write[305] = 32'd0;
    data_memory_write[306] = 32'd0;
    data_memory_write[307] = 32'd0;
    data_memory_write[308] = 32'd0;
    data_memory_write[309] = 32'd0;
    data_memory_write[310] = 32'd0;
    data_memory_write[311] = 32'd0;
    data_memory_write[312] = 32'd0;
    data_memory_write[313] = 32'd0;
    data_memory_write[314] = 32'd0;
    data_memory_write[315] = 32'd0;
    data_memory_write[316] = 32'd0;
    data_memory_write[317] = 32'd0;
    data_memory_write[318] = 32'd0;
    data_memory_write[319] = 32'd0;
    data_memory_write[320] = 32'd0;
    data_memory_write[321] = 32'd0;
    data_memory_write[322] = 32'd0;
    data_memory_write[323] = 32'd0;
    data_memory_write[324] = 32'd0;
    data_memory_write[325] = 32'd0;
    data_memory_write[326] = 32'd0;
    data_memory_write[327] = 32'd0;
    data_memory_write[328] = 32'd0;
    data_memory_write[329] = 32'd0;
    data_memory_write[330] = 32'd0;
    data_memory_write[331] = 32'd0;
    data_memory_write[332] = 32'd0;
    data_memory_write[333] = 32'd0;
    data_memory_write[334] = 32'd0;
    data_memory_write[335] = 32'd0;
    data_memory_write[336] = 32'd0;
    data_memory_write[337] = 32'd0;
    data_memory_write[338] = 32'd0;
    data_memory_write[339] = 32'd0;
    data_memory_write[340] = 32'd0;
    data_memory_write[341] = 32'd0;
    data_memory_write[342] = 32'd0;
    data_memory_write[343] = 32'd0;
    data_memory_write[344] = 32'd0;
    data_memory_write[345] = 32'd0;
    data_memory_write[346] = 32'd0;
    data_memory_write[347] = 32'd0;
    data_memory_write[348] = 32'd0;
    data_memory_write[349] = 32'd0;
    data_memory_write[350] = 32'd0;
    data_memory_write[351] = 32'd0;
    data_memory_write[352] = 32'd0;
    data_memory_write[353] = 32'd0;
    data_memory_write[354] = 32'd0;
    data_memory_write[355] = 32'd0;
    data_memory_write[356] = 32'd0;
    data_memory_write[357] = 32'd0;
    data_memory_write[358] = 32'd0;
    data_memory_write[359] = 32'd0;
    data_memory_write[360] = 32'd0;
    data_memory_write[361] = 32'd0;
    data_memory_write[362] = 32'd0;
    data_memory_write[363] = 32'd0;
    data_memory_write[364] = 32'd0;
    data_memory_write[365] = 32'd0;
    data_memory_write[366] = 32'd0;
    data_memory_write[367] = 32'd0;
    data_memory_write[368] = 32'd0;
    data_memory_write[369] = 32'd0;
    data_memory_write[370] = 32'd0;
    data_memory_write[371] = 32'd0;
    data_memory_write[372] = 32'd0;
    data_memory_write[373] = 32'd0;
    data_memory_write[374] = 32'd0;
    data_memory_write[375] = 32'd0;
    data_memory_write[376] = 32'd0;
    data_memory_write[377] = 32'd0;
    data_memory_write[378] = 32'd0;
    data_memory_write[379] = 32'd0;
    data_memory_write[380] = 32'd0;
    data_memory_write[381] = 32'd0;
    data_memory_write[382] = 32'd0;
    data_memory_write[383] = 32'd0;
    data_memory_write[384] = 32'd0;
    data_memory_write[385] = 32'd0;
    data_memory_write[386] = 32'd0;
    data_memory_write[387] = 32'd0;
    data_memory_write[388] = 32'd0;
    data_memory_write[389] = 32'd0;
    data_memory_write[390] = 32'd0;
    data_memory_write[391] = 32'd0;
    data_memory_write[392] = 32'd0;
    data_memory_write[393] = 32'd0;
    data_memory_write[394] = 32'd0;
    data_memory_write[395] = 32'd0;
    data_memory_write[396] = 32'd0;
    data_memory_write[397] = 32'd0;
    data_memory_write[398] = 32'd0;
    data_memory_write[399] = 32'd0;
    data_memory_write[400] = 32'd0;
    data_memory_write[401] = 32'd0;
    data_memory_write[402] = 32'd0;
    data_memory_write[403] = 32'd0;
    data_memory_write[404] = 32'd0;
    data_memory_write[405] = 32'd0;
    data_memory_write[406] = 32'd0;
    data_memory_write[407] = 32'd0;
    data_memory_write[408] = 32'd0;
    data_memory_write[409] = 32'd0;
    data_memory_write[410] = 32'd0;
    data_memory_write[411] = 32'd0;
    data_memory_write[412] = 32'd0;
    data_memory_write[413] = 32'd0;
    data_memory_write[414] = 32'd0;
    data_memory_write[415] = 32'd0;
    data_memory_write[416] = 32'd0;
    data_memory_write[417] = 32'd0;
    data_memory_write[418] = 32'd0;
    data_memory_write[419] = 32'd0;
    data_memory_write[420] = 32'd0;
    data_memory_write[421] = 32'd0;
    data_memory_write[422] = 32'd0;
    data_memory_write[423] = 32'd0;
    data_memory_write[424] = 32'd0;
    data_memory_write[425] = 32'd0;
    data_memory_write[426] = 32'd0;
    data_memory_write[427] = 32'd0;
    data_memory_write[428] = 32'd0;
    data_memory_write[429] = 32'd0;
    data_memory_write[430] = 32'd0;
    data_memory_write[431] = 32'd0;
    data_memory_write[432] = 32'd0;
    data_memory_write[433] = 32'd0;
    data_memory_write[434] = 32'd0;
    data_memory_write[435] = 32'd0;
    data_memory_write[436] = 32'd0;
    data_memory_write[437] = 32'd0;
    data_memory_write[438] = 32'd0;
    data_memory_write[439] = 32'd0;
    data_memory_write[440] = 32'd0;
    data_memory_write[441] = 32'd0;
    data_memory_write[442] = 32'd0;
    data_memory_write[443] = 32'd0;
    data_memory_write[444] = 32'd0;
    data_memory_write[445] = 32'd0;
    data_memory_write[446] = 32'd0;
    data_memory_write[447] = 32'd0;
    data_memory_write[448] = 32'd0;
    data_memory_write[449] = 32'd0;
    data_memory_write[450] = 32'd0;
    data_memory_write[451] = 32'd0;
    data_memory_write[452] = 32'd0;
    data_memory_write[453] = 32'd0;
    data_memory_write[454] = 32'd0;
    data_memory_write[455] = 32'd0;
    data_memory_write[456] = 32'd0;
    data_memory_write[457] = 32'd0;
    data_memory_write[458] = 32'd0;
    data_memory_write[459] = 32'd0;
    data_memory_write[460] = 32'd0;
    data_memory_write[461] = 32'd0;
    data_memory_write[462] = 32'd0;
    data_memory_write[463] = 32'd0;
    data_memory_write[464] = 32'd0;
    data_memory_write[465] = 32'd0;
    data_memory_write[466] = 32'd0;
    data_memory_write[467] = 32'd0;
    data_memory_write[468] = 32'd0;
    data_memory_write[469] = 32'd0;
    data_memory_write[470] = 32'd0;
    data_memory_write[471] = 32'd0;
    data_memory_write[472] = 32'd0;
    data_memory_write[473] = 32'd0;
    data_memory_write[474] = 32'd0;
    data_memory_write[475] = 32'd0;
    data_memory_write[476] = 32'd0;
    data_memory_write[477] = 32'd0;
    data_memory_write[478] = 32'd0;
    data_memory_write[479] = 32'd0;
    data_memory_write[480] = 32'd0;
    data_memory_write[481] = 32'd0;
    data_memory_write[482] = 32'd0;
    data_memory_write[483] = 32'd0;
    data_memory_write[484] = 32'd0;
    data_memory_write[485] = 32'd0;
    data_memory_write[486] = 32'd0;
    data_memory_write[487] = 32'd0;
    data_memory_write[488] = 32'd0;
    data_memory_write[489] = 32'd0;
    data_memory_write[490] = 32'd0;
    data_memory_write[491] = 32'd0;
    data_memory_write[492] = 32'd0;
    data_memory_write[493] = 32'd0;
    data_memory_write[494] = 32'd0;
    data_memory_write[495] = 32'd0;
    data_memory_write[496] = 32'd0;
    data_memory_write[497] = 32'd0;
    data_memory_write[498] = 32'd0;
    data_memory_write[499] = 32'd0;
    data_memory_write[500] = 32'd0;
    data_memory_write[501] = 32'd0;
    data_memory_write[502] = 32'd0;
    data_memory_write[503] = 32'd0;
    data_memory_write[504] = 32'd0;
    data_memory_write[505] = 32'd0;
    data_memory_write[506] = 32'd0;
    data_memory_write[507] = 32'd0;
    data_memory_write[508] = 32'd0;
    data_memory_write[509] = 32'd0;
    data_memory_write[510] = 32'd0;
    data_memory_write[511] = 32'd0;
    data_memory_write[512] = 32'd0;
    data_memory_write[513] = 32'd0;
    data_memory_write[514] = 32'd0;
    data_memory_write[515] = 32'd0;
    data_memory_write[516] = 32'd0;
    data_memory_write[517] = 32'd0;
    data_memory_write[518] = 32'd0;
    data_memory_write[519] = 32'd0;
    data_memory_write[520] = 32'd0;
    data_memory_write[521] = 32'd0;
    data_memory_write[522] = 32'd0;
    data_memory_write[523] = 32'd0;
    data_memory_write[524] = 32'd0;
    data_memory_write[525] = 32'd0;
    data_memory_write[526] = 32'd0;
    data_memory_write[527] = 32'd0;
    data_memory_write[528] = 32'd0;
    data_memory_write[529] = 32'd0;
    data_memory_write[530] = 32'd0;
    data_memory_write[531] = 32'd0;
    data_memory_write[532] = 32'd0;
    data_memory_write[533] = 32'd0;
    data_memory_write[534] = 32'd0;
    data_memory_write[535] = 32'd0;
    data_memory_write[536] = 32'd0;
    data_memory_write[537] = 32'd0;
    data_memory_write[538] = 32'd0;
    data_memory_write[539] = 32'd0;
    data_memory_write[540] = 32'd0;
    data_memory_write[541] = 32'd0;
    data_memory_write[542] = 32'd0;
    data_memory_write[543] = 32'd0;
    data_memory_write[544] = 32'd0;
    data_memory_write[545] = 32'd0;
    data_memory_write[546] = 32'd0;
    data_memory_write[547] = 32'd0;
    data_memory_write[548] = 32'd0;
    data_memory_write[549] = 32'd0;
    data_memory_write[550] = 32'd0;
    data_memory_write[551] = 32'd0;
    data_memory_write[552] = 32'd0;
    data_memory_write[553] = 32'd0;
    data_memory_write[554] = 32'd0;
    data_memory_write[555] = 32'd0;
    data_memory_write[556] = 32'd0;
    data_memory_write[557] = 32'd0;
    data_memory_write[558] = 32'd0;
    data_memory_write[559] = 32'd0;
    data_memory_write[560] = 32'd0;
    data_memory_write[561] = 32'd0;
    data_memory_write[562] = 32'd0;
    data_memory_write[563] = 32'd0;
    data_memory_write[564] = 32'd0;
    data_memory_write[565] = 32'd0;
    data_memory_write[566] = 32'd0;
    data_memory_write[567] = 32'd0;
    data_memory_write[568] = 32'd0;
    data_memory_write[569] = 32'd0;
    data_memory_write[570] = 32'd0;
    data_memory_write[571] = 32'd0;
    data_memory_write[572] = 32'd0;
    data_memory_write[573] = 32'd0;
    data_memory_write[574] = 32'd0;
    data_memory_write[575] = 32'd0;
    data_memory_write[576] = 32'd0;
    data_memory_write[577] = 32'd0;
    data_memory_write[578] = 32'd0;
    data_memory_write[579] = 32'd0;
    data_memory_write[580] = 32'd0;
    data_memory_write[581] = 32'd0;
    data_memory_write[582] = 32'd0;
    data_memory_write[583] = 32'd0;
    data_memory_write[584] = 32'd0;
    data_memory_write[585] = 32'd0;
    data_memory_write[586] = 32'd0;
    data_memory_write[587] = 32'd0;
    data_memory_write[588] = 32'd0;
    data_memory_write[589] = 32'd0;
    data_memory_write[590] = 32'd0;
    data_memory_write[591] = 32'd0;
    data_memory_write[592] = 32'd0;
    data_memory_write[593] = 32'd0;
    data_memory_write[594] = 32'd0;
    data_memory_write[595] = 32'd0;
    data_memory_write[596] = 32'd0;
    data_memory_write[597] = 32'd0;
    data_memory_write[598] = 32'd0;
    data_memory_write[599] = 32'd0;
    data_memory_write[600] = 32'd0;
    data_memory_write[601] = 32'd0;
    data_memory_write[602] = 32'd0;
    data_memory_write[603] = 32'd0;
    data_memory_write[604] = 32'd0;
    data_memory_write[605] = 32'd0;
    data_memory_write[606] = 32'd0;
    data_memory_write[607] = 32'd0;
    data_memory_write[608] = 32'd0;
    data_memory_write[609] = 32'd0;
    data_memory_write[610] = 32'd0;
    data_memory_write[611] = 32'd0;
    data_memory_write[612] = 32'd0;
    data_memory_write[613] = 32'd0;
    data_memory_write[614] = 32'd0;
    data_memory_write[615] = 32'd0;
    data_memory_write[616] = 32'd0;
    data_memory_write[617] = 32'd0;
    data_memory_write[618] = 32'd0;
    data_memory_write[619] = 32'd0;
    data_memory_write[620] = 32'd0;
    data_memory_write[621] = 32'd0;
    data_memory_write[622] = 32'd0;
    data_memory_write[623] = 32'd0;
    data_memory_write[624] = 32'd0;
    data_memory_write[625] = 32'd0;
    data_memory_write[626] = 32'd0;
    data_memory_write[627] = 32'd0;
    data_memory_write[628] = 32'd0;
    data_memory_write[629] = 32'd0;
    data_memory_write[630] = 32'd0;
    data_memory_write[631] = 32'd0;
    data_memory_write[632] = 32'd0;
    data_memory_write[633] = 32'd0;
    data_memory_write[634] = 32'd0;
    data_memory_write[635] = 32'd0;
    data_memory_write[636] = 32'd0;
    data_memory_write[637] = 32'd0;
    data_memory_write[638] = 32'd0;
    data_memory_write[639] = 32'd0;
    data_memory_write[640] = 32'd0;
    data_memory_write[641] = 32'd0;
    data_memory_write[642] = 32'd0;
    data_memory_write[643] = 32'd0;
    data_memory_write[644] = 32'd0;
    data_memory_write[645] = 32'd0;
    data_memory_write[646] = 32'd0;
    data_memory_write[647] = 32'd0;
    data_memory_write[648] = 32'd0;
    data_memory_write[649] = 32'd0;
    data_memory_write[650] = 32'd0;
    data_memory_write[651] = 32'd0;
    data_memory_write[652] = 32'd0;
    data_memory_write[653] = 32'd0;
    data_memory_write[654] = 32'd0;
    data_memory_write[655] = 32'd0;
    data_memory_write[656] = 32'd0;
    data_memory_write[657] = 32'd0;
    data_memory_write[658] = 32'd0;
    data_memory_write[659] = 32'd0;
    data_memory_write[660] = 32'd0;
    data_memory_write[661] = 32'd0;
    data_memory_write[662] = 32'd0;
    data_memory_write[663] = 32'd0;
    data_memory_write[664] = 32'd0;
    data_memory_write[665] = 32'd0;
    data_memory_write[666] = 32'd0;
    data_memory_write[667] = 32'd0;
    data_memory_write[668] = 32'd0;
    data_memory_write[669] = 32'd0;
    data_memory_write[670] = 32'd0;
    data_memory_write[671] = 32'd0;
    data_memory_write[672] = 32'd0;
    data_memory_write[673] = 32'd0;
    data_memory_write[674] = 32'd0;
    data_memory_write[675] = 32'd0;
    data_memory_write[676] = 32'd0;
    data_memory_write[677] = 32'd0;
    data_memory_write[678] = 32'd0;
    data_memory_write[679] = 32'd0;
    data_memory_write[680] = 32'd0;
    data_memory_write[681] = 32'd0;
    data_memory_write[682] = 32'd0;
    data_memory_write[683] = 32'd0;
    data_memory_write[684] = 32'd0;
    data_memory_write[685] = 32'd0;
    data_memory_write[686] = 32'd0;
    data_memory_write[687] = 32'd0;
    data_memory_write[688] = 32'd0;
    data_memory_write[689] = 32'd0;
    data_memory_write[690] = 32'd0;
    data_memory_write[691] = 32'd0;
    data_memory_write[692] = 32'd0;
    data_memory_write[693] = 32'd0;
    data_memory_write[694] = 32'd0;
    data_memory_write[695] = 32'd0;
    data_memory_write[696] = 32'd0;
    data_memory_write[697] = 32'd0;
    data_memory_write[698] = 32'd0;
    data_memory_write[699] = 32'd0;
    data_memory_write[700] = 32'd0;
    data_memory_write[701] = 32'd0;
    data_memory_write[702] = 32'd0;
    data_memory_write[703] = 32'd0;
    data_memory_write[704] = 32'd0;
    data_memory_write[705] = 32'd0;
    data_memory_write[706] = 32'd0;
    data_memory_write[707] = 32'd0;
    data_memory_write[708] = 32'd0;
    data_memory_write[709] = 32'd0;
    data_memory_write[710] = 32'd0;
    data_memory_write[711] = 32'd0;
    data_memory_write[712] = 32'd0;
    data_memory_write[713] = 32'd0;
    data_memory_write[714] = 32'd0;
    data_memory_write[715] = 32'd0;
    data_memory_write[716] = 32'd0;
    data_memory_write[717] = 32'd0;
    data_memory_write[718] = 32'd0;
    data_memory_write[719] = 32'd0;
    data_memory_write[720] = 32'd0;
    data_memory_write[721] = 32'd0;
    data_memory_write[722] = 32'd0;
    data_memory_write[723] = 32'd0;
    data_memory_write[724] = 32'd0;
    data_memory_write[725] = 32'd0;
    data_memory_write[726] = 32'd0;
    data_memory_write[727] = 32'd0;
    data_memory_write[728] = 32'd0;
    data_memory_write[729] = 32'd0;
    data_memory_write[730] = 32'd0;
    data_memory_write[731] = 32'd0;
    data_memory_write[732] = 32'd0;
    data_memory_write[733] = 32'd0;
    data_memory_write[734] = 32'd0;
    data_memory_write[735] = 32'd0;
    data_memory_write[736] = 32'd0;
    data_memory_write[737] = 32'd0;
    data_memory_write[738] = 32'd0;
    data_memory_write[739] = 32'd0;
    data_memory_write[740] = 32'd0;
    data_memory_write[741] = 32'd0;
    data_memory_write[742] = 32'd0;
    data_memory_write[743] = 32'd0;
    data_memory_write[744] = 32'd0;
    data_memory_write[745] = 32'd0;
    data_memory_write[746] = 32'd0;
    data_memory_write[747] = 32'd0;
    data_memory_write[748] = 32'd0;
    data_memory_write[749] = 32'd0;
    data_memory_write[750] = 32'd0;
    data_memory_write[751] = 32'd0;
    data_memory_write[752] = 32'd0;
    data_memory_write[753] = 32'd0;
    data_memory_write[754] = 32'd0;
    data_memory_write[755] = 32'd0;
    data_memory_write[756] = 32'd0;
    data_memory_write[757] = 32'd0;
    data_memory_write[758] = 32'd0;
    data_memory_write[759] = 32'd0;
    data_memory_write[760] = 32'd0;
    data_memory_write[761] = 32'd0;
    data_memory_write[762] = 32'd0;
    data_memory_write[763] = 32'd0;
    data_memory_write[764] = 32'd0;
    data_memory_write[765] = 32'd0;
    data_memory_write[766] = 32'd0;
    data_memory_write[767] = 32'd0;
    data_memory_write[768] = 32'd0;
    data_memory_write[769] = 32'd0;
    data_memory_write[770] = 32'd0;
    data_memory_write[771] = 32'd0;
    data_memory_write[772] = 32'd0;
    data_memory_write[773] = 32'd0;
    data_memory_write[774] = 32'd0;
    data_memory_write[775] = 32'd0;
    data_memory_write[776] = 32'd0;
    data_memory_write[777] = 32'd0;
    data_memory_write[778] = 32'd0;
    data_memory_write[779] = 32'd0;
    data_memory_write[780] = 32'd0;
    data_memory_write[781] = 32'd0;
    data_memory_write[782] = 32'd0;
    data_memory_write[783] = 32'd0;
    data_memory_write[784] = 32'd0;
    data_memory_write[785] = 32'd0;
    data_memory_write[786] = 32'd0;
    data_memory_write[787] = 32'd0;
    data_memory_write[788] = 32'd0;
    data_memory_write[789] = 32'd0;
    data_memory_write[790] = 32'd0;
    data_memory_write[791] = 32'd0;
    data_memory_write[792] = 32'd0;
    data_memory_write[793] = 32'd0;
    data_memory_write[794] = 32'd0;
    data_memory_write[795] = 32'd0;
    data_memory_write[796] = 32'd0;
    data_memory_write[797] = 32'd0;
    data_memory_write[798] = 32'd0;
    data_memory_write[799] = 32'd0;
    data_memory_write[800] = 32'd0;
    data_memory_write[801] = 32'd0;
    data_memory_write[802] = 32'd0;
    data_memory_write[803] = 32'd0;
    data_memory_write[804] = 32'd0;
    data_memory_write[805] = 32'd0;
    data_memory_write[806] = 32'd0;
    data_memory_write[807] = 32'd0;
    data_memory_write[808] = 32'd0;
    data_memory_write[809] = 32'd0;
    data_memory_write[810] = 32'd0;
    data_memory_write[811] = 32'd0;
    data_memory_write[812] = 32'd0;
    data_memory_write[813] = 32'd0;
    data_memory_write[814] = 32'd0;
    data_memory_write[815] = 32'd0;
    data_memory_write[816] = 32'd0;
    data_memory_write[817] = 32'd0;
    data_memory_write[818] = 32'd0;
    data_memory_write[819] = 32'd0;
    data_memory_write[820] = 32'd0;
    data_memory_write[821] = 32'd0;
    data_memory_write[822] = 32'd0;
    data_memory_write[823] = 32'd0;
    data_memory_write[824] = 32'd0;
    data_memory_write[825] = 32'd0;
    data_memory_write[826] = 32'd0;
    data_memory_write[827] = 32'd0;
    data_memory_write[828] = 32'd0;
    data_memory_write[829] = 32'd0;
    data_memory_write[830] = 32'd0;
    data_memory_write[831] = 32'd0;
    data_memory_write[832] = 32'd0;
    data_memory_write[833] = 32'd0;
    data_memory_write[834] = 32'd0;
    data_memory_write[835] = 32'd0;
    data_memory_write[836] = 32'd0;
    data_memory_write[837] = 32'd0;
    data_memory_write[838] = 32'd0;
    data_memory_write[839] = 32'd0;
    data_memory_write[840] = 32'd0;
    data_memory_write[841] = 32'd0;
    data_memory_write[842] = 32'd0;
    data_memory_write[843] = 32'd0;
    data_memory_write[844] = 32'd0;
    data_memory_write[845] = 32'd0;
    data_memory_write[846] = 32'd0;
    data_memory_write[847] = 32'd0;
    data_memory_write[848] = 32'd0;
    data_memory_write[849] = 32'd0;
    data_memory_write[850] = 32'd0;
    data_memory_write[851] = 32'd0;
    data_memory_write[852] = 32'd0;
    data_memory_write[853] = 32'd0;
    data_memory_write[854] = 32'd0;
    data_memory_write[855] = 32'd0;
    data_memory_write[856] = 32'd0;
    data_memory_write[857] = 32'd0;
    data_memory_write[858] = 32'd0;
    data_memory_write[859] = 32'd0;
    data_memory_write[860] = 32'd0;
    data_memory_write[861] = 32'd0;
    data_memory_write[862] = 32'd0;
    data_memory_write[863] = 32'd0;
    data_memory_write[864] = 32'd0;
    data_memory_write[865] = 32'd0;
    data_memory_write[866] = 32'd0;
    data_memory_write[867] = 32'd0;
    data_memory_write[868] = 32'd0;
    data_memory_write[869] = 32'd0;
    data_memory_write[870] = 32'd0;
    data_memory_write[871] = 32'd0;
    data_memory_write[872] = 32'd0;
    data_memory_write[873] = 32'd0;
    data_memory_write[874] = 32'd0;
    data_memory_write[875] = 32'd0;
    data_memory_write[876] = 32'd0;
    data_memory_write[877] = 32'd0;
    data_memory_write[878] = 32'd0;
    data_memory_write[879] = 32'd0;
    data_memory_write[880] = 32'd0;
    data_memory_write[881] = 32'd0;
    data_memory_write[882] = 32'd0;
    data_memory_write[883] = 32'd0;
    data_memory_write[884] = 32'd0;
    data_memory_write[885] = 32'd0;
    data_memory_write[886] = 32'd0;
    data_memory_write[887] = 32'd0;
    data_memory_write[888] = 32'd0;
    data_memory_write[889] = 32'd0;
    data_memory_write[890] = 32'd0;
    data_memory_write[891] = 32'd0;
    data_memory_write[892] = 32'd0;
    data_memory_write[893] = 32'd0;
    data_memory_write[894] = 32'd0;
    data_memory_write[895] = 32'd0;
    data_memory_write[896] = 32'd0;
    data_memory_write[897] = 32'd0;
    data_memory_write[898] = 32'd0;
    data_memory_write[899] = 32'd0;
    data_memory_write[900] = 32'd0;
    data_memory_write[901] = 32'd0;
    data_memory_write[902] = 32'd0;
    data_memory_write[903] = 32'd0;
    data_memory_write[904] = 32'd0;
    data_memory_write[905] = 32'd0;
    data_memory_write[906] = 32'd0;
    data_memory_write[907] = 32'd0;
    data_memory_write[908] = 32'd0;
    data_memory_write[909] = 32'd0;
    data_memory_write[910] = 32'd0;
    data_memory_write[911] = 32'd0;
    data_memory_write[912] = 32'd0;
    data_memory_write[913] = 32'd0;
    data_memory_write[914] = 32'd0;
    data_memory_write[915] = 32'd0;
    data_memory_write[916] = 32'd0;
    data_memory_write[917] = 32'd0;
    data_memory_write[918] = 32'd0;
    data_memory_write[919] = 32'd0;
    data_memory_write[920] = 32'd0;
    data_memory_write[921] = 32'd0;
    data_memory_write[922] = 32'd0;
    data_memory_write[923] = 32'd0;
    data_memory_write[924] = 32'd0;
    data_memory_write[925] = 32'd0;
    data_memory_write[926] = 32'd0;
    data_memory_write[927] = 32'd0;
    data_memory_write[928] = 32'd0;
    data_memory_write[929] = 32'd0;
    data_memory_write[930] = 32'd0;
    data_memory_write[931] = 32'd0;
    data_memory_write[932] = 32'd0;
    data_memory_write[933] = 32'd0;
    data_memory_write[934] = 32'd0;
    data_memory_write[935] = 32'd0;
    data_memory_write[936] = 32'd0;
    data_memory_write[937] = 32'd0;
    data_memory_write[938] = 32'd0;
    data_memory_write[939] = 32'd0;
    data_memory_write[940] = 32'd0;
    data_memory_write[941] = 32'd0;
    data_memory_write[942] = 32'd0;
    data_memory_write[943] = 32'd0;
    data_memory_write[944] = 32'd0;
    data_memory_write[945] = 32'd0;
    data_memory_write[946] = 32'd0;
    data_memory_write[947] = 32'd0;
    data_memory_write[948] = 32'd0;
    data_memory_write[949] = 32'd0;
    data_memory_write[950] = 32'd0;
    data_memory_write[951] = 32'd0;
    data_memory_write[952] = 32'd0;
    data_memory_write[953] = 32'd0;
    data_memory_write[954] = 32'd0;
    data_memory_write[955] = 32'd0;
    data_memory_write[956] = 32'd0;
    data_memory_write[957] = 32'd0;
    data_memory_write[958] = 32'd0;
    data_memory_write[959] = 32'd0;
    data_memory_write[960] = 32'd0;
    data_memory_write[961] = 32'd0;
    data_memory_write[962] = 32'd0;
    data_memory_write[963] = 32'd0;
    data_memory_write[964] = 32'd0;
    data_memory_write[965] = 32'd0;
    data_memory_write[966] = 32'd0;
    data_memory_write[967] = 32'd0;
    data_memory_write[968] = 32'd0;
    data_memory_write[969] = 32'd0;
    data_memory_write[970] = 32'd0;
    data_memory_write[971] = 32'd0;
    data_memory_write[972] = 32'd0;
    data_memory_write[973] = 32'd0;
    data_memory_write[974] = 32'd0;
    data_memory_write[975] = 32'd0;
    data_memory_write[976] = 32'd0;
    data_memory_write[977] = 32'd0;
    data_memory_write[978] = 32'd0;
    data_memory_write[979] = 32'd0;
    data_memory_write[980] = 32'd0;
    data_memory_write[981] = 32'd0;
    data_memory_write[982] = 32'd0;
    data_memory_write[983] = 32'd0;
    data_memory_write[984] = 32'd0;
    data_memory_write[985] = 32'd0;
    data_memory_write[986] = 32'd0;
    data_memory_write[987] = 32'd0;
    data_memory_write[988] = 32'd0;
    data_memory_write[989] = 32'd0;
    data_memory_write[990] = 32'd0;
    data_memory_write[991] = 32'd0;
    data_memory_write[992] = 32'd0;
    data_memory_write[993] = 32'd0;
    data_memory_write[994] = 32'd0;
    data_memory_write[995] = 32'd0;
    data_memory_write[996] = 32'd0;
    data_memory_write[997] = 32'd0;
    data_memory_write[998] = 32'd0;
    data_memory_write[999] = 32'd0;
    data_memory_write[1000] = 32'd0;
    data_memory_write[1001] = 32'd0;
    data_memory_write[1002] = 32'd0;
    data_memory_write[1003] = 32'd0;
    data_memory_write[1004] = 32'd0;
    data_memory_write[1005] = 32'd0;
    data_memory_write[1006] = 32'd0;
    data_memory_write[1007] = 32'd0;
    data_memory_write[1008] = 32'd0;
    data_memory_write[1009] = 32'd0;
    data_memory_write[1010] = 32'd0;
    data_memory_write[1011] = 32'd0;
    data_memory_write[1012] = 32'd0;
    data_memory_write[1013] = 32'd0;
    data_memory_write[1014] = 32'd0;
    data_memory_write[1015] = 32'd0;
    data_memory_write[1016] = 32'd0;
    data_memory_write[1017] = 32'd0;
    data_memory_write[1018] = 32'd0;
    data_memory_write[1019] = 32'd0;
    data_memory_write[1020] = 32'd0;
    data_memory_write[1021] = 32'd0;
    data_memory_write[1022] = 32'd0;
    data_memory_write[1023] = 32'd0;
  end
  always @(posedge clk_100M) begin
    if (data_write_write_port_dma__en)
      data_memory_write[data_write_read_port_dma__addr] <= data_write_write_port_dma__data;
  end
  always @(posedge clk_100M) begin
    if (data_write_port_axi__en)
      data_memory_write[data_write_port_axi__addr] <= data_write_port_axi__data;
  end
  reg [31:0] _2_;
  always @(posedge clk_100M) begin
    _2_ <= data_memory_write[data_write_read_port_dma__addr];
  end
  assign data_write_dma_read_data = _2_;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:277" *)
  reg [63:0] instruction_memory [255:0];
  initial begin
    instruction_memory[0] = 64'h0000000000000000;
    instruction_memory[1] = 64'h0000000000000000;
    instruction_memory[2] = 64'h0000000000000000;
    instruction_memory[3] = 64'h0000000000000000;
    instruction_memory[4] = 64'h0000000000000000;
    instruction_memory[5] = 64'h0000000000000000;
    instruction_memory[6] = 64'h0000000000000000;
    instruction_memory[7] = 64'h0000000000000000;
    instruction_memory[8] = 64'h0000000000000000;
    instruction_memory[9] = 64'h0000000000000000;
    instruction_memory[10] = 64'h0000000000000000;
    instruction_memory[11] = 64'h0000000000000000;
    instruction_memory[12] = 64'h0000000000000000;
    instruction_memory[13] = 64'h0000000000000000;
    instruction_memory[14] = 64'h0000000000000000;
    instruction_memory[15] = 64'h0000000000000000;
    instruction_memory[16] = 64'h0000000000000000;
    instruction_memory[17] = 64'h0000000000000000;
    instruction_memory[18] = 64'h0000000000000000;
    instruction_memory[19] = 64'h0000000000000000;
    instruction_memory[20] = 64'h0000000000000000;
    instruction_memory[21] = 64'h0000000000000000;
    instruction_memory[22] = 64'h0000000000000000;
    instruction_memory[23] = 64'h0000000000000000;
    instruction_memory[24] = 64'h0000000000000000;
    instruction_memory[25] = 64'h0000000000000000;
    instruction_memory[26] = 64'h0000000000000000;
    instruction_memory[27] = 64'h0000000000000000;
    instruction_memory[28] = 64'h0000000000000000;
    instruction_memory[29] = 64'h0000000000000000;
    instruction_memory[30] = 64'h0000000000000000;
    instruction_memory[31] = 64'h0000000000000000;
    instruction_memory[32] = 64'h0000000000000000;
    instruction_memory[33] = 64'h0000000000000000;
    instruction_memory[34] = 64'h0000000000000000;
    instruction_memory[35] = 64'h0000000000000000;
    instruction_memory[36] = 64'h0000000000000000;
    instruction_memory[37] = 64'h0000000000000000;
    instruction_memory[38] = 64'h0000000000000000;
    instruction_memory[39] = 64'h0000000000000000;
    instruction_memory[40] = 64'h0000000000000000;
    instruction_memory[41] = 64'h0000000000000000;
    instruction_memory[42] = 64'h0000000000000000;
    instruction_memory[43] = 64'h0000000000000000;
    instruction_memory[44] = 64'h0000000000000000;
    instruction_memory[45] = 64'h0000000000000000;
    instruction_memory[46] = 64'h0000000000000000;
    instruction_memory[47] = 64'h0000000000000000;
    instruction_memory[48] = 64'h0000000000000000;
    instruction_memory[49] = 64'h0000000000000000;
    instruction_memory[50] = 64'h0000000000000000;
    instruction_memory[51] = 64'h0000000000000000;
    instruction_memory[52] = 64'h0000000000000000;
    instruction_memory[53] = 64'h0000000000000000;
    instruction_memory[54] = 64'h0000000000000000;
    instruction_memory[55] = 64'h0000000000000000;
    instruction_memory[56] = 64'h0000000000000000;
    instruction_memory[57] = 64'h0000000000000000;
    instruction_memory[58] = 64'h0000000000000000;
    instruction_memory[59] = 64'h0000000000000000;
    instruction_memory[60] = 64'h0000000000000000;
    instruction_memory[61] = 64'h0000000000000000;
    instruction_memory[62] = 64'h0000000000000000;
    instruction_memory[63] = 64'h0000000000000000;
    instruction_memory[64] = 64'h0000000000000000;
    instruction_memory[65] = 64'h0000000000000000;
    instruction_memory[66] = 64'h0000000000000000;
    instruction_memory[67] = 64'h0000000000000000;
    instruction_memory[68] = 64'h0000000000000000;
    instruction_memory[69] = 64'h0000000000000000;
    instruction_memory[70] = 64'h0000000000000000;
    instruction_memory[71] = 64'h0000000000000000;
    instruction_memory[72] = 64'h0000000000000000;
    instruction_memory[73] = 64'h0000000000000000;
    instruction_memory[74] = 64'h0000000000000000;
    instruction_memory[75] = 64'h0000000000000000;
    instruction_memory[76] = 64'h0000000000000000;
    instruction_memory[77] = 64'h0000000000000000;
    instruction_memory[78] = 64'h0000000000000000;
    instruction_memory[79] = 64'h0000000000000000;
    instruction_memory[80] = 64'h0000000000000000;
    instruction_memory[81] = 64'h0000000000000000;
    instruction_memory[82] = 64'h0000000000000000;
    instruction_memory[83] = 64'h0000000000000000;
    instruction_memory[84] = 64'h0000000000000000;
    instruction_memory[85] = 64'h0000000000000000;
    instruction_memory[86] = 64'h0000000000000000;
    instruction_memory[87] = 64'h0000000000000000;
    instruction_memory[88] = 64'h0000000000000000;
    instruction_memory[89] = 64'h0000000000000000;
    instruction_memory[90] = 64'h0000000000000000;
    instruction_memory[91] = 64'h0000000000000000;
    instruction_memory[92] = 64'h0000000000000000;
    instruction_memory[93] = 64'h0000000000000000;
    instruction_memory[94] = 64'h0000000000000000;
    instruction_memory[95] = 64'h0000000000000000;
    instruction_memory[96] = 64'h0000000000000000;
    instruction_memory[97] = 64'h0000000000000000;
    instruction_memory[98] = 64'h0000000000000000;
    instruction_memory[99] = 64'h0000000000000000;
    instruction_memory[100] = 64'h0000000000000000;
    instruction_memory[101] = 64'h0000000000000000;
    instruction_memory[102] = 64'h0000000000000000;
    instruction_memory[103] = 64'h0000000000000000;
    instruction_memory[104] = 64'h0000000000000000;
    instruction_memory[105] = 64'h0000000000000000;
    instruction_memory[106] = 64'h0000000000000000;
    instruction_memory[107] = 64'h0000000000000000;
    instruction_memory[108] = 64'h0000000000000000;
    instruction_memory[109] = 64'h0000000000000000;
    instruction_memory[110] = 64'h0000000000000000;
    instruction_memory[111] = 64'h0000000000000000;
    instruction_memory[112] = 64'h0000000000000000;
    instruction_memory[113] = 64'h0000000000000000;
    instruction_memory[114] = 64'h0000000000000000;
    instruction_memory[115] = 64'h0000000000000000;
    instruction_memory[116] = 64'h0000000000000000;
    instruction_memory[117] = 64'h0000000000000000;
    instruction_memory[118] = 64'h0000000000000000;
    instruction_memory[119] = 64'h0000000000000000;
    instruction_memory[120] = 64'h0000000000000000;
    instruction_memory[121] = 64'h0000000000000000;
    instruction_memory[122] = 64'h0000000000000000;
    instruction_memory[123] = 64'h0000000000000000;
    instruction_memory[124] = 64'h0000000000000000;
    instruction_memory[125] = 64'h0000000000000000;
    instruction_memory[126] = 64'h0000000000000000;
    instruction_memory[127] = 64'h0000000000000000;
    instruction_memory[128] = 64'h0000000000000000;
    instruction_memory[129] = 64'h0000000000000000;
    instruction_memory[130] = 64'h0000000000000000;
    instruction_memory[131] = 64'h0000000000000000;
    instruction_memory[132] = 64'h0000000000000000;
    instruction_memory[133] = 64'h0000000000000000;
    instruction_memory[134] = 64'h0000000000000000;
    instruction_memory[135] = 64'h0000000000000000;
    instruction_memory[136] = 64'h0000000000000000;
    instruction_memory[137] = 64'h0000000000000000;
    instruction_memory[138] = 64'h0000000000000000;
    instruction_memory[139] = 64'h0000000000000000;
    instruction_memory[140] = 64'h0000000000000000;
    instruction_memory[141] = 64'h0000000000000000;
    instruction_memory[142] = 64'h0000000000000000;
    instruction_memory[143] = 64'h0000000000000000;
    instruction_memory[144] = 64'h0000000000000000;
    instruction_memory[145] = 64'h0000000000000000;
    instruction_memory[146] = 64'h0000000000000000;
    instruction_memory[147] = 64'h0000000000000000;
    instruction_memory[148] = 64'h0000000000000000;
    instruction_memory[149] = 64'h0000000000000000;
    instruction_memory[150] = 64'h0000000000000000;
    instruction_memory[151] = 64'h0000000000000000;
    instruction_memory[152] = 64'h0000000000000000;
    instruction_memory[153] = 64'h0000000000000000;
    instruction_memory[154] = 64'h0000000000000000;
    instruction_memory[155] = 64'h0000000000000000;
    instruction_memory[156] = 64'h0000000000000000;
    instruction_memory[157] = 64'h0000000000000000;
    instruction_memory[158] = 64'h0000000000000000;
    instruction_memory[159] = 64'h0000000000000000;
    instruction_memory[160] = 64'h0000000000000000;
    instruction_memory[161] = 64'h0000000000000000;
    instruction_memory[162] = 64'h0000000000000000;
    instruction_memory[163] = 64'h0000000000000000;
    instruction_memory[164] = 64'h0000000000000000;
    instruction_memory[165] = 64'h0000000000000000;
    instruction_memory[166] = 64'h0000000000000000;
    instruction_memory[167] = 64'h0000000000000000;
    instruction_memory[168] = 64'h0000000000000000;
    instruction_memory[169] = 64'h0000000000000000;
    instruction_memory[170] = 64'h0000000000000000;
    instruction_memory[171] = 64'h0000000000000000;
    instruction_memory[172] = 64'h0000000000000000;
    instruction_memory[173] = 64'h0000000000000000;
    instruction_memory[174] = 64'h0000000000000000;
    instruction_memory[175] = 64'h0000000000000000;
    instruction_memory[176] = 64'h0000000000000000;
    instruction_memory[177] = 64'h0000000000000000;
    instruction_memory[178] = 64'h0000000000000000;
    instruction_memory[179] = 64'h0000000000000000;
    instruction_memory[180] = 64'h0000000000000000;
    instruction_memory[181] = 64'h0000000000000000;
    instruction_memory[182] = 64'h0000000000000000;
    instruction_memory[183] = 64'h0000000000000000;
    instruction_memory[184] = 64'h0000000000000000;
    instruction_memory[185] = 64'h0000000000000000;
    instruction_memory[186] = 64'h0000000000000000;
    instruction_memory[187] = 64'h0000000000000000;
    instruction_memory[188] = 64'h0000000000000000;
    instruction_memory[189] = 64'h0000000000000000;
    instruction_memory[190] = 64'h0000000000000000;
    instruction_memory[191] = 64'h0000000000000000;
    instruction_memory[192] = 64'h0000000000000000;
    instruction_memory[193] = 64'h0000000000000000;
    instruction_memory[194] = 64'h0000000000000000;
    instruction_memory[195] = 64'h0000000000000000;
    instruction_memory[196] = 64'h0000000000000000;
    instruction_memory[197] = 64'h0000000000000000;
    instruction_memory[198] = 64'h0000000000000000;
    instruction_memory[199] = 64'h0000000000000000;
    instruction_memory[200] = 64'h0000000000000000;
    instruction_memory[201] = 64'h0000000000000000;
    instruction_memory[202] = 64'h0000000000000000;
    instruction_memory[203] = 64'h0000000000000000;
    instruction_memory[204] = 64'h0000000000000000;
    instruction_memory[205] = 64'h0000000000000000;
    instruction_memory[206] = 64'h0000000000000000;
    instruction_memory[207] = 64'h0000000000000000;
    instruction_memory[208] = 64'h0000000000000000;
    instruction_memory[209] = 64'h0000000000000000;
    instruction_memory[210] = 64'h0000000000000000;
    instruction_memory[211] = 64'h0000000000000000;
    instruction_memory[212] = 64'h0000000000000000;
    instruction_memory[213] = 64'h0000000000000000;
    instruction_memory[214] = 64'h0000000000000000;
    instruction_memory[215] = 64'h0000000000000000;
    instruction_memory[216] = 64'h0000000000000000;
    instruction_memory[217] = 64'h0000000000000000;
    instruction_memory[218] = 64'h0000000000000000;
    instruction_memory[219] = 64'h0000000000000000;
    instruction_memory[220] = 64'h0000000000000000;
    instruction_memory[221] = 64'h0000000000000000;
    instruction_memory[222] = 64'h0000000000000000;
    instruction_memory[223] = 64'h0000000000000000;
    instruction_memory[224] = 64'h0000000000000000;
    instruction_memory[225] = 64'h0000000000000000;
    instruction_memory[226] = 64'h0000000000000000;
    instruction_memory[227] = 64'h0000000000000000;
    instruction_memory[228] = 64'h0000000000000000;
    instruction_memory[229] = 64'h0000000000000000;
    instruction_memory[230] = 64'h0000000000000000;
    instruction_memory[231] = 64'h0000000000000000;
    instruction_memory[232] = 64'h0000000000000000;
    instruction_memory[233] = 64'h0000000000000000;
    instruction_memory[234] = 64'h0000000000000000;
    instruction_memory[235] = 64'h0000000000000000;
    instruction_memory[236] = 64'h0000000000000000;
    instruction_memory[237] = 64'h0000000000000000;
    instruction_memory[238] = 64'h0000000000000000;
    instruction_memory[239] = 64'h0000000000000000;
    instruction_memory[240] = 64'h0000000000000000;
    instruction_memory[241] = 64'h0000000000000000;
    instruction_memory[242] = 64'h0000000000000000;
    instruction_memory[243] = 64'h0000000000000000;
    instruction_memory[244] = 64'h0000000000000000;
    instruction_memory[245] = 64'h0000000000000000;
    instruction_memory[246] = 64'h0000000000000000;
    instruction_memory[247] = 64'h0000000000000000;
    instruction_memory[248] = 64'h0000000000000000;
    instruction_memory[249] = 64'h0000000000000000;
    instruction_memory[250] = 64'h0000000000000000;
    instruction_memory[251] = 64'h0000000000000000;
    instruction_memory[252] = 64'h0000000000000000;
    instruction_memory[253] = 64'h0000000000000000;
    instruction_memory[254] = 64'h0000000000000000;
    instruction_memory[255] = 64'h0000000000000000;
  end
  always @(posedge clk_100M) begin
    if (instruction_write_port__en)
      instruction_memory[instruction_write_port__addr] <= instruction_write_port__data;
  end
  reg [63:0] _3_;
  always @(posedge clk_100M) begin
    _3_ <= instruction_memory[instruction_memory_address[7:0]];
  end
  assign instruction_read_data = _3_;
  assign \$1  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:380" *) axi_transfer_busy;
  assign \$2  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:388" *) dma_memory_half;
  assign \$7  = { 63'h0000000000000000, data_read_port_axi__data } | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:411" *) \$6 ;
  assign sync_200_rst = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:430" *) reset;
  assign sync_100_rst = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:431" *) reset;
  assign sync_50_rst = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:432" *) reset;
  assign sync_25_rst = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:433" *) reset;
  assign write_addr_complete = AWVALID & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:483" *) AWREADY;
  assign write_data_complete = WVALID & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:484" *) WREADY;
  assign read_addr_complete = ARVALID & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:487" *) ARREADY;
  assign \$11  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) AWVALID;
  assign \$12  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) WVALID;
  assign \$13  = \$11  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) \$12 ;
  assign \$14  = write_addr_complete & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) write_data_complete;
  assign \$15  = \$13  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) \$14 ;
  assign \$16  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) AWVALID;
  assign \$17  = \$16  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) write_data_complete;
  assign \$18  = \$15  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) \$17 ;
  assign \$20  = { 9'h000, internal_axi_write_address } | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:652" *) \$19 ;
  assign \$21  = RVALID & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:693" *) internal_axi_write_ready;
  assign \$22  = RVALID & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:701" *) RREADY;
  assign trigger = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:888" *) cycle_timer;
  assign \$23  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) fsm_state;
  assign \$24  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 1'h1;
  assign \$25  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h2;
  assign \$26  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h3;
  assign \$27  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 3'h4;
  assign \$28  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 3'h5;
  assign \$29  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) \fsm_state$119 ;
  assign \$30  = \fsm_state$119  == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 1'h1;
  assign \$31  = \fsm_state$119  == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h2;
  assign \$32  = \fsm_state$119  == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h3;
  assign \$33  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) \fsm_state$157 ;
  assign \$34  = \fsm_state$157  == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 1'h1;
  assign \$35  = \fsm_state$157  == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h2;
  assign \$36  = \fsm_state$157  == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h3;
  assign \$37  = \fsm_state$157  == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 3'h4;
  assign \$38  = axi_write_busy | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:461" *) axi_read_busy;
  assign \$39  = write_bursts_remaining >= (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:547" *) 5'h10;
  assign \$40  = write_bursts_remaining - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:549" *) 5'h10;
  assign \$41  = write_bursts_remaining - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:551" *) 1'h1;
  assign \$42  = write_current_burst == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:563" *) AWLEN;
  assign \$43  = internal_axi_read_address + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:573" *) 1'h1;
  assign \$44  = write_current_burst + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:575" *) 1'h1;
  assign \$45  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:585" *) WLAST;
  assign \$46  = internal_axi_read_address + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:586" *) 1'h1;
  assign \$47  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) AWVALID;
  assign \$48  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) WVALID;
  assign \$49  = \$47  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) \$48 ;
  assign \$50  = write_addr_complete & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) write_data_complete;
  assign \$51  = \$49  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) \$50 ;
  assign \$52  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) AWVALID;
  assign \$53  = \$52  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) write_data_complete;
  assign \$54  = \$51  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:588" *) \$53 ;
  assign \$55  = write_current_burst == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:595" *) AWLEN;
  assign \$56  = internal_axi_read_address + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:604" *) 1'h1;
  assign \$57  = write_current_burst + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:606" *) 1'h1;
  assign \$58  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:618" *) write_bursts_remaining;
  assign \$59  = write_stage != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:621" *) 1'h1;
  assign \$60  = AWADDR + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:619" *) 8'h80;
  assign \$61  = write_stage + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:622" *) 1'h1;
  assign \$62  = read_bursts_remaining >= (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:680" *) 5'h10;
  assign \$63  = read_bursts_remaining - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:682" *) 5'h10;
  assign \$64  = read_bursts_remaining - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:684" *) 1'h1;
  assign \$65  = RVALID & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:693" *) internal_axi_write_ready;
  assign \$66  = RVALID & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:701" *) RREADY;
  assign \$67  = internal_axi_write_address + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:702" *) 1'h1;
  assign \$68  = read_current_burst + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:703" *) 1'h1;
  assign \$69  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:709" *) read_bursts_remaining;
  assign \$70  = read_stage != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:712" *) 2'h2;
  assign \$71  = ARADDR + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:710" *) 8'h80;
  assign \$72  = read_stage + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:713" *) 1'h1;
  assign \$73  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:747" *) busy;
  assign \$74  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:759" *) axi_transfer_busy;
  assign \$75  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:722" *) cycle_timer;
  assign \$76  = cycle_timer - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:725" *) 1'h1;
  assign \$77  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:731" *) cycle_timer;
  assign \$78  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:732" *) cycle_timer_config;
  assign \$79  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:747" *) busy;
  assign \$80  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:759" *) axi_transfer_busy;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:377" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) dma_memory_half <= 1'h0;
    else dma_memory_half <= data_memory_address[10];
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:328" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) axi_transfer_busy <= 1'h0;
    else axi_transfer_busy <= \$38 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:495" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) axi_read_data_incremented <= 1'h0;
    else axi_read_data_incremented <= \$81 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:494" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) last_axi_read_data <= 64'h0000000000000000;
    else last_axi_read_data <= \$82 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:493" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) internal_axi_read_valid <= 1'h0;
    else internal_axi_read_valid <= \$83 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:88" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) BREADY <= 1'h0;
    else BREADY <= \$84 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:71" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) AWVALID <= 1'h0;
    else AWVALID <= \$85 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:80" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) WVALID <= 1'h0;
    else WVALID <= \$86 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:78" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) WLAST <= 1'h0;
    else WLAST <= \$87 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:459" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) axi_write_busy <= 1'h0;
    else axi_write_busy <= \$88 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:467" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) write_stage <= 2'h0;
    else write_stage <= \$89 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) fsm_state <= 3'h0;
    else fsm_state <= \$90 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:61" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) AWADDR <= 32'd0;
    else AWADDR <= \$91 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:476" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) write_bursts_remaining <= 10'h000;
    else write_bursts_remaining <= \$92 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:491" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) internal_axi_read_address <= 10'h000;
    else internal_axi_read_address <= \$93 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:62" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) AWLEN <= 4'h0;
    else AWLEN <= \$94 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:478" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) write_current_burst <= 4'h0;
    else write_current_burst <= \$95 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:447" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) cycle_timer_config <= 16'hffff;
    else cycle_timer_config <= \$96 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:452" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) dma_instruction_block_select <= 4'h0;
    else dma_instruction_block_select <= \$97 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:631" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) internal_axi_write_ready <= 1'h0;
    else internal_axi_write_ready <= \$98 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:112" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) RREADY <= 1'h0;
    else RREADY <= \$99 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:102" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) ARVALID <= 1'h0;
    else ARVALID <= \$100 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:460" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) axi_read_busy <= 1'h0;
    else axi_read_busy <= \$101 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:474" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) read_stage <= 3'h0;
    else read_stage <= \$102 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \fsm_state$119  <= 2'h0;
    else \fsm_state$119  <= \$103 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:92" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) ARADDR <= 32'd0;
    else ARADDR <= \$104 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:477" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) read_bursts_remaining <= 10'h000;
    else read_bursts_remaining <= \$105 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:629" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) internal_axi_write_address <= 10'h000;
    else internal_axi_write_address <= \$106 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:93" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) ARLEN <= 4'h0;
    else ARLEN <= \$107 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:479" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) read_current_burst <= 4'h0;
    else read_current_burst <= \$108 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:132" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) pl_ps_interrupts <= 16'h0000;
    else pl_ps_interrupts <= \$109 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:166" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) start <= 1'h0;
    else start <= \$110 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:327" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) axi_transfer_start <= 1'h0;
    else axi_transfer_start <= \$111 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) read_bram_address_input <= 16'h0000;
    else read_bram_address_input <= read_bram_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) write_bram_address_input <= 16'h0000;
    else write_bram_address_input <= write_bram_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) read_node_address_input <= 8'h00;
    else read_node_address_input <= read_node_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) write_node_address_input <= 8'h00;
    else write_node_address_input <= write_node_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) data_input <= 32'd0;
    else data_input <= data_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) read_complete_input <= 1'h0;
    else read_complete_input <= read_complete_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) write_complete_input <= 1'h0;
    else write_complete_input <= write_complete_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_bram_address_input$182  <= 16'h0000;
    else \read_bram_address_input$182  <= \read_bram_address_output$183 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_bram_address_input$184  <= 16'h0000;
    else \write_bram_address_input$184  <= \write_bram_address_output$185 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_node_address_input$186  <= 8'h00;
    else \read_node_address_input$186  <= \read_node_address_output$187 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_node_address_input$188  <= 8'h00;
    else \write_node_address_input$188  <= \write_node_address_output$189 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \data_input$190  <= 32'd0;
    else \data_input$190  <= \data_output$191 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_complete_input$192  <= 1'h0;
    else \read_complete_input$192  <= \read_complete_output$193 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_complete_input$194  <= 1'h0;
    else \write_complete_input$194  <= \write_complete_output$195 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_bram_address_input$196  <= 16'h0000;
    else \read_bram_address_input$196  <= \read_bram_address_output$197 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_bram_address_input$198  <= 16'h0000;
    else \write_bram_address_input$198  <= \write_bram_address_output$199 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_node_address_input$200  <= 8'h00;
    else \read_node_address_input$200  <= \read_node_address_output$201 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_node_address_input$202  <= 8'h00;
    else \write_node_address_input$202  <= \write_node_address_output$203 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \data_input$204  <= 32'd0;
    else \data_input$204  <= \data_output$205 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_complete_input$206  <= 1'h0;
    else \read_complete_input$206  <= \read_complete_output$207 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_complete_input$208  <= 1'h0;
    else \write_complete_input$208  <= \write_complete_output$209 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:151" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_node_address_input$210  <= 8'h00;
    else \read_node_address_input$210  <= \read_node_address_output$211 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:153" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_node_address_input$212  <= 8'h00;
    else \write_node_address_input$212  <= \write_node_address_output$213 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:155" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_bram_address_input$214  <= 16'h0000;
    else \read_bram_address_input$214  <= \read_bram_address_output$215 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:157" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_bram_address_input$216  <= 16'h0000;
    else \write_bram_address_input$216  <= \write_bram_address_output$217 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:159" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \data_input$218  <= 32'd0;
    else \data_input$218  <= \data_output$219 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:161" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \read_complete_input$220  <= 1'h0;
    else \read_complete_input$220  <= \read_complete_output$221 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:163" *)
  always @(posedge clk_100M, negedge reset)
    if (!reset) \write_complete_input$222  <= 1'h0;
    else \write_complete_input$222  <= \write_complete_output$223 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:451" *)
  always @(posedge clk_25M, negedge reset)
    if (!reset) cycle_timer <= 16'h0000;
    else cycle_timer <= \$112 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  always @(posedge clk_25M, negedge reset)
    if (!reset) \fsm_state$157  <= 3'h0;
    else \fsm_state$157  <= \$113 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:798" *)
  \Controller.fanuc_encoders  fanuc_encoders (
    .bram_address(\bram_address$129 ),
    .bram_read_data(\bram_read_data$135 ),
    .req(\$114 ),
    .\rx$21 (rx),
    .sync_100_clk(clk_100M),
    .sync_100_rst(sync_100_rst),
    .\trigger$20 (timer_pulse[0])
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:826" *)
  \Controller.fanuc_encoders_shift_dma_2  fanuc_encoders_shift_dma_2 (
    .bram_address(\bram_address$129 ),
    .bram_read_data(\bram_read_data$135 ),
    .bram_write_data(\bram_write_data$131 ),
    .bram_write_enable(\bram_write_enable$133 ),
    .data_input(\data_input$190 ),
    .data_output(\data_output$205 ),
    .read_bram_address_input(\read_bram_address_input$182 ),
    .read_bram_address_output(\read_bram_address_output$197 ),
    .read_complete_input(\read_complete_input$192 ),
    .read_complete_output(\read_complete_output$207 ),
    .read_node_address_input(\read_node_address_input$186 ),
    .read_node_address_output(\read_node_address_output$201 ),
    .sync_100_clk(clk_100M),
    .sync_100_rst(sync_100_rst),
    .write_bram_address_input(\write_bram_address_input$184 ),
    .write_bram_address_output(\write_bram_address_output$199 ),
    .write_complete_input(\write_complete_input$194 ),
    .write_complete_output(\write_complete_output$209 ),
    .write_node_address_input(\write_node_address_input$188 ),
    .write_node_address_output(\write_node_address_output$203 )
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:798" *)
  \Controller.global_timers  global_timers (
    .sync_25_clk(clk_25M),
    .sync_25_rst(sync_25_rst),
    .timer_pulse(timer_pulse),
    .trigger(trigger)
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:826" *)
  \Controller.global_timers_shift_dma_3  global_timers_shift_dma_3 (
    .bram_address(\bram_address$137 ),
    .bram_write_data(\bram_write_data$139 ),
    .bram_write_enable(\bram_write_enable$141 ),
    .data_input(\data_input$204 ),
    .data_output(\data_output$219 ),
    .read_bram_address_input(\read_bram_address_input$196 ),
    .read_bram_address_output(\read_bram_address_output$215 ),
    .read_complete_input(\read_complete_input$206 ),
    .read_complete_output(\read_complete_output$221 ),
    .read_node_address_input(\read_node_address_input$200 ),
    .read_node_address_output(\read_node_address_output$211 ),
    .sync_100_clk(clk_100M),
    .sync_100_rst(sync_100_rst),
    .write_bram_address_input(\write_bram_address_input$198 ),
    .write_bram_address_output(\write_bram_address_output$217 ),
    .write_complete_input(\write_complete_input$208 ),
    .write_complete_output(\write_complete_output$223 ),
    .write_node_address_input(\write_node_address_input$202 ),
    .write_node_address_output(\write_node_address_output$213 )
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:798" *)
  \Controller.serial_card  serial_card (
    .bram_address(bram_address),
    .bram_read_data(bram_read_data),
    .bram_write_data(bram_write_data),
    .bram_write_enable(bram_write_enable),
    .rs422_rx(rs422_rx),
    .rs422_tx(rs422_tx),
    .slotIn(slot_B_in),
    .slotOut(slot_B_out),
    .slotOutEnable(slot_B_out_enable),
    .sync_100_clk(clk_100M),
    .sync_100_rst(sync_100_rst),
    .sync_25_clk(clk_25M),
    .sync_25_rst(sync_25_rst)
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:826" *)
  \Controller.serial_card_shift_dma_1  serial_card_shift_dma_1 (
    .bram_address(bram_address),
    .bram_read_data(bram_read_data),
    .bram_write_data(bram_write_data),
    .bram_write_enable(bram_write_enable),
    .data_input(data_input),
    .data_output(\data_output$191 ),
    .read_bram_address_input(read_bram_address_input),
    .read_bram_address_output(\read_bram_address_output$183 ),
    .read_complete_input(read_complete_input),
    .read_complete_output(\read_complete_output$193 ),
    .read_node_address_input(read_node_address_input),
    .read_node_address_output(\read_node_address_output$187 ),
    .sync_100_clk(clk_100M),
    .sync_100_rst(sync_100_rst),
    .write_bram_address_input(write_bram_address_input),
    .write_bram_address_output(\write_bram_address_output$185 ),
    .write_complete_input(write_complete_input),
    .write_complete_output(\write_complete_output$195 ),
    .write_node_address_input(write_node_address_input),
    .write_node_address_output(\write_node_address_output$189 )
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:281" *)
  \Controller.shift_dma  shift_dma (
    .bram_read_data(data_memory_read_data),
    .busy(busy),
    .\data_input$42 (\data_input$218 ),
    .data_memory_address(data_memory_address),
    .data_memory_write_data(data_memory_write_data),
    .data_memory_write_enable(data_memory_write_enable),
    .data_output(data_output),
    .instruction_memory_address(instruction_memory_address),
    .instruction_memory_read_data(instruction_read_data),
    .\read_bram_address_input$38 (\read_bram_address_input$214 ),
    .read_bram_address_output(read_bram_address_output),
    .read_complete_input(\read_complete_input$220 ),
    .read_complete_output(read_complete_output),
    .\read_node_address_input$34 (\read_node_address_input$210 ),
    .read_node_address_output(read_node_address_output),
    .start(start),
    .sync_100_clk(clk_100M),
    .sync_100_rst(sync_100_rst),
    .\write_bram_address_input$40 (\write_bram_address_input$216 ),
    .write_bram_address_output(write_bram_address_output),
    .write_complete_input(\write_complete_input$222 ),
    .write_complete_output(write_complete_output),
    .\write_node_address_input$36 (\write_node_address_input$212 ),
    .write_node_address_output(write_node_address_output)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      data_read_read_port_dma__addr = data_memory_address[9:0];
    end else begin
      data_read_read_port_dma__addr = \$5 [9:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      data_write_read_port_dma__addr = data_memory_address[9:0];
    end else begin
      data_write_read_port_dma__addr = \$10 [9:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_read_write_port_dma__data = 32'd0;
    if (\$1 ) begin
      data_read_write_port_dma__data = data_memory_write_data;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      data_write_write_port_dma__data = data_memory_write_data;
    end else begin
      data_write_write_port_dma__data = data_write_axi_data[63:32];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_memory_read_data = 32'd0;
    if (\$1 ) begin
      (* full_case = 32'd1 *)
      if (\$2 ) begin
        data_memory_read_data = data_read_dma_read_data;
      end else begin
        data_memory_read_data = data_write_dma_read_data;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_read_write_port_dma__en = 1'h0;
    if (\$1 ) begin
      (* full_case = 32'd1 *)
      if (\$2 ) begin
        data_read_write_port_dma__en = data_memory_write_enable;
      end else begin
        data_read_write_port_dma__en = 1'h0;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      (* full_case = 32'd1 *)
      if (\$2 ) begin
        data_write_write_port_dma__en = 1'h0;
      end else begin
        data_write_write_port_dma__en = data_memory_write_enable;
      end
    end else begin
      data_write_write_port_dma__en = data_write_axi_enable;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_read_port_axi__addr = 10'h000;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
    end else begin
      data_read_port_axi__addr = \$3 [9:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_read_axi_data = 64'h0000000000000000;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
    end else begin
      data_read_axi_data = \$7 [63:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_write_port_axi__addr = 10'h000;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
    end else begin
      data_write_port_axi__addr = \$8 [9:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_write_port_axi__data = 32'd0;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
    end else begin
      data_write_port_axi__data = data_write_axi_data[31:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_write_port_axi__en = 1'h0;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
    end else begin
      data_write_port_axi__en = data_write_axi_enable;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (axi_read_data_incremented) begin
      timed_axi_read_data = internal_axi_read_data;
    end else begin
      timed_axi_read_data = last_axi_read_data;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    internal_axi_read_data = 64'h0000000000000000;
    casez (write_stage)
      2'h0:
          (* full_case = 32'd1 *)
          casez (internal_axi_read_address)
            10'h000:
                internal_axi_read_data = 64'h0000000000000000;
            default:
                internal_axi_read_data = 64'h0000000000000000;
          endcase
      2'h1:
          internal_axi_read_data = data_read_axi_data;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_read_axi_address = 10'h000;
    casez (write_stage)
      2'h0:
          /* empty */;
      2'h1:
          data_read_axi_address = internal_axi_read_address;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    WDATA = 64'h0000000000000000;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          if (internal_axi_read_valid) begin
            WDATA = timed_axi_read_data;
          end
      3'h4:
          (* full_case = 32'd1 *)
          if (\$18 ) begin
            (* full_case = 32'd1 *)
            if (WLAST) begin
              WDATA = timed_axi_read_data;
            end else begin
              if (internal_axi_read_valid) begin
                WDATA = timed_axi_read_data;
              end
            end
          end else begin
            WDATA = timed_axi_read_data;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_write_axi_address = 10'h000;
    casez (read_stage)
      3'h0:
          /* empty */;
      3'h1:
          data_write_axi_address = internal_axi_write_address;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_write_axi_data = 64'h0000000000000000;
    casez (read_stage)
      3'h0:
          /* empty */;
      3'h1:
          data_write_axi_data = internal_axi_write_data;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_write_axi_enable = 1'h0;
    casez (read_stage)
      3'h0:
          /* empty */;
      3'h1:
          data_write_axi_enable = internal_axi_write_enable;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    instruction_write_port__addr = 8'h00;
    casez (read_stage)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          instruction_write_port__addr = \$20 [7:0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    instruction_write_port__data = 64'h0000000000000000;
    casez (read_stage)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          instruction_write_port__data = internal_axi_write_data;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    instruction_write_port__en = 1'h0;
    casez (read_stage)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          instruction_write_port__en = internal_axi_write_enable;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    internal_axi_write_data = 64'h0000000000000000;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          if (\$21 ) begin
            internal_axi_write_data = RDATA;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    internal_axi_write_enable = 1'h0;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          (* full_case = 32'd1 *)
          if (\$22 ) begin
            internal_axi_write_enable = 1'h1;
          end else begin
            internal_axi_write_enable = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$81  = axi_read_data_incremented;
    if (axi_read_data_incremented) begin
      \$81  = 1'h0;
    end
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          if (internal_axi_read_valid) begin
            \$81  = 1'h1;
          end
      3'h4:
          if (write_data_complete) begin
            if (\$45 ) begin
              \$81  = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$82  = last_axi_read_data;
    if (axi_read_data_incremented) begin
      \$82  = internal_axi_read_data;
    end
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          if (\$54 ) begin
            (* full_case = 32'd1 *)
            if (WLAST) begin
            end else begin
              if (internal_axi_read_valid) begin
                \$82  = internal_axi_read_data;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$83  = internal_axi_read_valid;
    casez (write_stage)
      2'h0:
          \$83  = 1'h1;
      2'h1:
          \$83  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$84  = BREADY;
    casez (fsm_state)
      3'h0:
          \$84  = 1'h0;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          if (\$54 ) begin
            if (WLAST) begin
              \$84  = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$85  = AWVALID;
    casez (fsm_state)
      3'h0:
          \$85  = 1'h0;
      3'h1:
          /* empty */;
      3'h2:
          \$85  = 1'h1;
      3'h3:
          if (write_addr_complete) begin
            \$85  = 1'h0;
          end
      3'h4:
          if (write_addr_complete) begin
            \$85  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$86  = WVALID;
    casez (fsm_state)
      3'h0:
          \$86  = 1'h0;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          if (internal_axi_read_valid) begin
            \$86  = 1'h1;
          end
      3'h4:
        begin
          if (write_data_complete) begin
            \$86  = 1'h0;
          end
          if (\$54 ) begin
            (* full_case = 32'd1 *)
            if (WLAST) begin
            end else begin
              if (internal_axi_read_valid) begin
                \$86  = 1'h1;
              end
            end
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$87  = WLAST;
    casez (fsm_state)
      3'h0:
          \$87  = 1'h0;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (\$42 ) begin
            \$87  = 1'h1;
          end else begin
            \$87  = 1'h0;
          end
      3'h4:
          if (\$54 ) begin
            (* full_case = 32'd1 *)
            if (WLAST) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$55 ) begin
                \$87  = 1'h1;
              end else begin
                \$87  = 1'h0;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$88  = axi_write_busy;
    casez (fsm_state)
      3'h0:
        begin
          \$88  = 1'h0;
          if (axi_transfer_start) begin
            \$88  = 1'h1;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$89  = write_stage;
    casez (fsm_state)
      3'h0:
          \$89  = 2'h0;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (BVALID) begin
            if (\$58 ) begin
            end else if (\$59 ) begin
              \$89  = \$61 [1:0];
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$90  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (axi_transfer_start) begin
            \$90  = 3'h1;
          end
      3'h1:
          \$90  = 3'h2;
      3'h2:
          \$90  = 3'h3;
      3'h3:
          if (internal_axi_read_valid) begin
            \$90  = 3'h4;
          end
      3'h4:
          if (\$54 ) begin
            if (WLAST) begin
              \$90  = 3'h5;
            end
          end
      3'h5:
          if (BVALID) begin
            (* full_case = 32'd1 *)
            if (\$58 ) begin
              \$90  = 3'h2;
            end else if (\$59 ) begin
              \$90  = 3'h1;
            end else begin
              \$90  = 3'h0;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$91  = AWADDR;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          casez (write_stage)
            2'h0:
                \$91  = 32'd985088;
            2'h1:
                \$91  = 32'd991232;
          endcase
      3'h2:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          if (BVALID) begin
            if (\$58 ) begin
              \$91  = \$60 [31:0];
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$92  = write_bursts_remaining;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          casez (write_stage)
            2'h0:
                \$92  = 10'h008;
            2'h1:
                \$92  = 10'h200;
          endcase
      3'h2:
          (* full_case = 32'd1 *)
          if (\$39 ) begin
            \$92  = \$40 [9:0];
          end else begin
            \$92  = 10'h000;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$93  = internal_axi_read_address;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          \$93  = 10'h000;
      3'h2:
          /* empty */;
      3'h3:
          if (internal_axi_read_valid) begin
            \$93  = \$43 [9:0];
          end
      3'h4:
        begin
          if (write_data_complete) begin
            if (\$45 ) begin
              \$93  = \$46 [9:0];
            end
          end
          if (\$54 ) begin
            (* full_case = 32'd1 *)
            if (WLAST) begin
            end else begin
              if (internal_axi_read_valid) begin
                \$93  = \$56 [9:0];
              end
            end
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$94  = AWLEN;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$39 ) begin
            \$94  = 4'hf;
          end else begin
            \$94  = \$41 [3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$95  = write_current_burst;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          \$95  = 4'h0;
      3'h3:
          if (internal_axi_read_valid) begin
            \$95  = \$44 [3:0];
          end
      3'h4:
          if (\$54 ) begin
            (* full_case = 32'd1 *)
            if (WLAST) begin
            end else begin
              if (internal_axi_read_valid) begin
                \$95  = \$57 [3:0];
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$96  = cycle_timer_config;
    casez (read_stage)
      3'h0:
          casez (internal_axi_write_address)
            10'h000:
                if (internal_axi_write_enable) begin
                  \$96  = internal_axi_write_data[15:0];
                end
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$97  = dma_instruction_block_select;
    casez (read_stage)
      3'h0:
          casez (internal_axi_write_address)
            10'h000:
                if (internal_axi_write_enable) begin
                  \$97  = internal_axi_write_data[19:16];
                end
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$98  = internal_axi_write_ready;
    casez (read_stage)
      3'h0:
          \$98  = 1'h1;
      3'h1:
          \$98  = 1'h1;
      3'h2:
          \$98  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$99  = RREADY;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          \$99  = 1'h0;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          (* full_case = 32'd1 *)
          if (\$65 ) begin
            \$99  = 1'h1;
          end else begin
            \$99  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$100  = ARVALID;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          \$100  = 1'h0;
      2'h1:
          /* empty */;
      2'h2:
          \$100  = 1'h1;
      2'h3:
          if (read_addr_complete) begin
            \$100  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$101  = axi_read_busy;
    casez (\fsm_state$119 )
      2'h0:
        begin
          \$101  = 1'h0;
          if (axi_transfer_start) begin
            \$101  = 1'h1;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$102  = read_stage;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          \$102  = 3'h0;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          if (\$66 ) begin
            if (RLAST) begin
              if (\$69 ) begin
              end else if (\$70 ) begin
                \$102  = \$72 [2:0];
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$103  = \fsm_state$119 ;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          if (axi_transfer_start) begin
            \$103  = 2'h1;
          end
      2'h1:
          \$103  = 2'h2;
      2'h2:
          \$103  = 2'h3;
      2'h3:
          if (\$66 ) begin
            if (RLAST) begin
              (* full_case = 32'd1 *)
              if (\$69 ) begin
                \$103  = 2'h2;
              end else if (\$70 ) begin
                \$103  = 2'h1;
              end else begin
                \$103  = 2'h0;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$104  = ARADDR;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          /* empty */;
      2'h1:
          casez (read_stage)
            3'h0:
                \$104  = 32'd983040;
            3'h1:
                \$104  = 32'd987136;
            3'h2:
                \$104  = 32'd995328;
          endcase
      2'h2:
          /* empty */;
      2'h3:
          if (\$66 ) begin
            if (RLAST) begin
              if (\$69 ) begin
                \$104  = \$71 [31:0];
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$105  = read_bursts_remaining;
    casez (\fsm_state$119 )
      2'h0:
          /* empty */;
      2'h1:
          casez (read_stage)
            3'h0:
                \$105  = 10'h008;
            3'h1:
                \$105  = 10'h200;
            3'h2:
                \$105  = 10'h100;
          endcase
      2'h2:
          (* full_case = 32'd1 *)
          if (\$62 ) begin
            \$105  = \$63 [9:0];
          end else begin
            \$105  = 10'h000;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$106  = internal_axi_write_address;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          /* empty */;
      2'h1:
          \$106  = 10'h000;
      2'h2:
          /* empty */;
      2'h3:
          if (\$66 ) begin
            \$106  = \$67 [9:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$107  = ARLEN;
    casez (\fsm_state$119 )
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          (* full_case = 32'd1 *)
          if (\$62 ) begin
            \$107  = 4'hf;
          end else begin
            \$107  = \$64 [3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$108  = read_current_burst;
    (* full_case = 32'd1 *)
    casez (\fsm_state$119 )
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          \$108  = 4'h0;
      2'h3:
          if (\$66 ) begin
            \$108  = \$68 [3:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$109 [3:0] = pl_ps_interrupts[3:0];
    casez (\fsm_state$157 )
      3'h0:
          \$109 [0] = 1'h0;
      3'h1:
        begin
          \$109 [0] = 1'h0;
          \$109 [1] = 1'h0;
          \$109 [3] = 1'h0;
          \$109 [2] = 1'h1;
        end
      3'h2:
          if (\$73 ) begin
            \$109 [3] = 1'h1;
            \$109 [2] = 1'h0;
          end
      3'h3:
          \$109 [0] = 1'h1;
      3'h4:
          if (\$74 ) begin
            \$109 [1] = 1'h1;
            \$109 [0] = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$110  = start;
    casez (\fsm_state$157 )
      3'h0:
          /* empty */;
      3'h1:
          \$110  = 1'h1;
      3'h2:
          \$110  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$111  = axi_transfer_start;
    casez (\fsm_state$157 )
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          \$111  = 1'h1;
      3'h4:
          \$111  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$75 ) begin
      \$112  = cycle_timer_config;
    end else begin
      \$112  = \$76 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$113  = \fsm_state$157 ;
    casez (\fsm_state$157 )
      3'h0:
          if (\$77 ) begin
            if (\$78 ) begin
              \$113  = 3'h1;
            end
          end
      3'h1:
          \$113  = 3'h2;
      3'h2:
          if (\$79 ) begin
            \$113  = 3'h3;
          end
      3'h3:
          \$113  = 3'h4;
      3'h4:
          if (\$80 ) begin
            \$113  = 3'h0;
          end
    endcase
  end
  assign debug_pins = \bram_address$129 [7:0];
  assign data_read_dma_address = data_read_read_port_dma__addr;
  assign data_read_write_port_dma__addr = data_read_read_port_dma__addr;
  assign data_read_read_port_dma__data = data_read_dma_read_data;
  assign data_read_dma_write_data = data_read_write_port_dma__data;
  assign data_read_dma_write_en = data_read_write_port_dma__en;
  assign data_write_dma_address = data_write_read_port_dma__addr;
  assign data_write_write_port_dma__addr = data_write_read_port_dma__addr;
  assign data_write_read_port_dma__data = data_write_dma_read_data;
  assign data_write_dma_write_data = data_write_write_port_dma__data;
  assign data_write_dma_write_en = data_write_write_port_dma__en;
  assign instruction_read_port__addr = instruction_memory_address[7:0];
  assign instruction_read_address = instruction_memory_address[7:0];
  assign instruction_read_port__data = instruction_read_data;
  assign instruction_write_address = instruction_write_port__addr;
  assign instruction_write_data = instruction_write_port__data;
  assign instruction_write_en = instruction_write_port__en;
  assign instruction_memory_read_data = instruction_read_data;
  assign sync_200_clk = clk_200M;
  assign sync_100_clk = clk_100M;
  assign sync_50_clk = clk_50M;
  assign sync_25_clk = clk_25M;
  assign status = 32'd0;
  assign \bram_address$122  = bram_address;
  assign \bram_write_data$124  = bram_write_data;
  assign \bram_write_enable$126  = bram_write_enable;
  assign \bram_read_data$128  = bram_read_data;
  assign \bram_address$130  = \bram_address$129 ;
  assign \bram_write_data$132  = \bram_write_data$131 ;
  assign \bram_write_enable$134  = \bram_write_enable$133 ;
  assign \bram_read_data$136  = \bram_read_data$135 ;
  assign \bram_address$138  = \bram_address$137 ;
  assign \bram_write_data$140  = \bram_write_data$139 ;
  assign \bram_write_enable$142  = \bram_write_enable$141 ;
  assign \bram_read_data$143  = 32'd0;
  assign \bram_read_data$144  = 32'd0;
  assign slotIn = slot_B_in;
  assign slotOut = slot_B_out;
  assign slotOutEnable = slot_B_out_enable;
  assign tx = { \$114 , \$114 , \$114 , \$114 , \$114 , \$114  };
  assign \trigger$154  = timer_pulse[0];
  assign debug = \bram_address$129 [7:0];
  assign AWSIZE = 3'h3;
  assign AWBURST = 2'h1;
  assign AWPROT = 3'h0;
  assign WSTRB = 8'hff;
  assign ARSIZE = 3'h3;
  assign ARBURST = 2'h1;
  assign ARPROT = 3'h0;
  assign buzzer = 1'h0;
  assign slot_C_out = 22'h000000;
  assign slot_C_out_enable = 22'h000000;
  assign slot_D_out = 22'h000000;
  assign slot_D_out_enable = 22'h000000;
  always @*
    \$109 [15:4] = pl_ps_interrupts[15:4];
  assign rs422_tx[0] = \$114 ;
  assign rs422_tx[9:1] = 9'h000;
  assign rx[0] = rs422_rx[0];
  assign rx[5:1] = 5'h00;
  assign slot_A_out_enable[7:0] = 8'hff;
  assign slot_A_out_enable[21:8] = 14'h0000;
  assign slot_A_out[7:0] = \bram_address$129 [7:0];
  assign slot_A_out[21:8] = 14'h0000;
  assign \$3  = { data_read_axi_address, 1'h0 };
  assign \$4  = { data_read_axi_address, 1'h0 };
  assign \$5 [10:1] = \$4 [10:1];
  assign \$5 [0] = 1'h1;
  assign \$6  = { 31'h00000000, data_read_dma_read_data, 32'h00000000 };
  assign \$8  = { data_write_axi_address, 1'h0 };
  assign \$9  = { data_write_axi_address, 1'h0 };
  assign \$10 [10:1] = \$9 [10:1];
  assign \$10 [0] = 1'h1;
  assign \$19  = { 3'h0, dma_instruction_block_select, 12'h000 };
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:60" *)
(* generator = "Amaranth" *)
module \Controller.fanuc_encoders (sync_100_rst, \rx$21 , bram_read_data, req, bram_address, \trigger$20 , sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire [46:0] \$1 ;
  wire [7:0] \$10 ;
  reg [31:0] \$11 ;
  wire [16:0] \$2 ;
  wire [1:0] \$3 ;
  wire [1:0] \$4 ;
  wire [3:0] \$5 ;
  wire [3:0] \$6 ;
  wire [3:0] \$7 ;
  wire [3:0] \$8 ;
  wire [7:0] \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:208" *)
  wire battery_fail;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:30" *)
  input [15:0] bram_address;
  wire [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:32" *)
  output [31:0] bram_read_data;
  reg [31:0] bram_read_data = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:207" *)
  wire [9:0] commutation_count;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:212" *)
  wire crc_fail;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:35" *)
  wire [7:0] debug;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:213" *)
  wire done;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:205" *)
  wire [15:0] multiturn_count;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:211" *)
  wire no_response;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:131" *)
  output req;
  wire req;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:201" *)
  wire rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:26" *)
  input [5:0] \rx$21 ;
  wire [5:0] \rx$21 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:206" *)
  wire [15:0] singleturn_count;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:61" *)
  wire [5:0] synced_rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:203" *)
  wire trigger;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:28" *)
  input \trigger$20 ;
  wire \trigger$20 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:130" *)
  wire \trigger$6 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:24" *)
  wire [5:0] tx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:25" *)
  wire [5:0] tx_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:209" *)
  wire unindexed;
  assign \$4  = { 1'h0, battery_fail } | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:88" *) \$3 ;
  assign \$6  = { 2'h0, \$4  } | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:88" *) \$5 ;
  assign \$8  = \$6  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:88" *) \$7 ;
  assign \$10  = { 4'h0, \$8  } | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:88" *) \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:32" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) bram_read_data <= 32'd0;
    else bram_read_data <= \$11 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:65" *)
  \Controller.fanuc_encoders.U$1  \U$1  (
    .stage1(trigger),
    .sync_100_clk(sync_100_clk),
    .sync_100_rst(sync_100_rst),
    .trigger(\trigger$20 )
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:66" *)
  \Controller.fanuc_encoders.U$2  \U$2  (
    .rx(\rx$21 ),
    .stage3(synced_rx),
    .sync_100_clk(sync_100_clk),
    .sync_100_rst(sync_100_rst)
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:72" *)
  \Controller.fanuc_encoders.U$3  \U$3  (
    .battery_fail(battery_fail),
    .commutation_count(commutation_count),
    .crc_fail(crc_fail),
    .done(done),
    .multiturn_count(multiturn_count),
    .no_response(no_response),
    .rx(synced_rx[0]),
    .singleturn_count(singleturn_count),
    .sync_100_clk(sync_100_clk),
    .sync_100_rst(sync_100_rst),
    .trigger(trigger),
    .unindexed(unindexed)
  );
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:63" *)
  \Controller.fanuc_encoders.request_pulse  request_pulse (
    .req(req),
    .sync_100_clk(sync_100_clk),
    .sync_100_rst(sync_100_rst),
    .trigger(trigger)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    casez (bram_address[3:0])
      4'h0:
          \$11  = { 16'h0000, multiturn_count };
      4'h1:
          \$11  = \$1 [31:0];
      4'h2:
          \$11  = { 15'h0000, \$2  };
      4'h3:
          \$11  = { 24'h000000, \$10  };
      default:
          \$11  = 32'd0;
    endcase
  end
  assign tx_enable = 6'h3f;
  assign tx = { req, req, req, req, req, req };
  assign rx = synced_rx[0];
  assign \trigger$6  = trigger;
  assign debug = bram_address[7:0];
  assign \$1  = { 15'h0000, singleturn_count, 16'h0000 };
  assign \$2  = { 1'h0, commutation_count, 6'h00 };
  assign \$3  = { unindexed, 1'h0 };
  assign \$5  = { 1'h0, no_response, 2'h0 };
  assign \$7  = { crc_fail, 3'h0 };
  assign \$9  = { 3'h0, done, 4'h0 };
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:101" *)
(* generator = "Amaranth" *)
module \Controller.fanuc_encoders.U$1 (sync_100_rst, stage1, trigger, sync_100_clk);
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  reg stage0 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:130" *)
  output stage1;
  reg stage1 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:28" *)
  input trigger;
  wire trigger;
  (* init = 1'h0 *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:130" *)
  wire \trigger$5 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  always @(posedge sync_100_clk)
    stage0 <= trigger;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  always @(posedge sync_100_clk)
    stage1 <= stage0;
  assign \trigger$5  = stage1;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:101" *)
(* generator = "Amaranth" *)
module \Controller.fanuc_encoders.U$2 (sync_100_rst, rx, stage3, sync_100_clk);
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:26" *)
  input [5:0] rx;
  wire [5:0] rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  reg [5:0] stage0 = 6'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  reg [5:0] stage1 = 6'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  reg [5:0] stage2 = 6'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:61" *)
  output [5:0] stage3;
  reg [5:0] stage3 = 6'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* init = 6'h00 *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:61" *)
  wire [5:0] synced_rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  always @(posedge sync_100_clk)
    stage0 <= rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  always @(posedge sync_100_clk)
    stage1 <= stage0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  always @(posedge sync_100_clk)
    stage2 <= stage1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\lib\\cdc.py:102" *)
  always @(posedge sync_100_clk)
    stage3 <= stage2;
  assign synced_rx = stage3;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:219" *)
(* generator = "Amaranth" *)
module \Controller.fanuc_encoders.U$3 (sync_100_rst, trigger, rx, no_response, done, crc_fail, multiturn_count, singleturn_count, commutation_count, battery_fail, unindexed, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  wire \$1 ;
  wire \$10 ;
  reg \$100 ;
  reg \$101 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  reg \$15 ;
  reg \$16 ;
  reg [7:0] \$17 ;
  reg [6:0] \$18 ;
  reg [1:0] \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg [15:0] \$21 ;
  reg [15:0] \$22 ;
  reg [9:0] \$23 ;
  reg \$24 ;
  reg \$25 ;
  reg \$26 ;
  reg \$27 ;
  reg \$28 ;
  reg \$29 ;
  wire \$3 ;
  reg \$30 ;
  reg \$31 ;
  reg \$32 ;
  reg \$33 ;
  reg \$34 ;
  reg \$35 ;
  reg \$36 ;
  reg \$37 ;
  reg \$38 ;
  reg \$39 ;
  wire \$4 ;
  reg \$40 ;
  reg \$41 ;
  reg \$42 ;
  reg \$43 ;
  reg \$44 ;
  reg \$45 ;
  reg \$46 ;
  reg \$47 ;
  reg \$48 ;
  reg \$49 ;
  wire [7:0] \$5 ;
  reg \$50 ;
  reg \$51 ;
  reg \$52 ;
  reg \$53 ;
  reg \$54 ;
  reg \$55 ;
  reg \$56 ;
  reg \$57 ;
  reg \$58 ;
  reg \$59 ;
  wire [8:0] \$6 ;
  reg \$60 ;
  reg \$61 ;
  reg \$62 ;
  reg \$63 ;
  reg \$64 ;
  reg \$65 ;
  reg \$66 ;
  reg \$67 ;
  reg \$68 ;
  reg \$69 ;
  wire \$7 ;
  reg \$70 ;
  reg \$71 ;
  reg \$72 ;
  reg \$73 ;
  reg \$74 ;
  reg \$75 ;
  reg \$76 ;
  reg \$77 ;
  reg \$78 ;
  reg \$79 ;
  wire \$8 ;
  reg \$80 ;
  reg \$81 ;
  reg \$82 ;
  reg \$83 ;
  reg \$84 ;
  reg \$85 ;
  reg \$86 ;
  reg \$87 ;
  reg \$88 ;
  reg \$89 ;
  wire \$9 ;
  reg \$90 ;
  reg \$91 ;
  reg \$92 ;
  reg \$93 ;
  reg \$94 ;
  reg \$95 ;
  reg \$96 ;
  reg \$97 ;
  reg \$98 ;
  reg \$99 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:208" *)
  output battery_fail;
  reg battery_fail = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_0 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_1 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_10 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_11 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_12 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_13 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_14 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_15 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_16 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_17 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_18 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_19 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_2 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_20 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_21 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_22 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_23 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_24 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_25 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_26 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_27 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_28 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_29 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_3 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_30 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_31 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_32 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_33 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_34 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_35 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_36 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_37 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_38 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_39 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_4 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_40 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_41 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_42 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_43 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_44 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_45 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_46 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_47 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_48 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_49 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_5 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_50 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_51 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_52 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_53 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_54 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_55 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_56 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_57 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_58 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_59 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_6 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_60 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_61 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_62 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_63 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_64 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_65 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_66 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_67 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_68 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_69 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_7 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_70 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_71 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_72 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_73 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_74 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_75 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_8 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  reg buf_9 = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:192" *)
  reg capture;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:193" *)
  reg [7:0] cnt = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:207" *)
  output [9:0] commutation_count;
  reg [9:0] commutation_count = 10'h000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:212" *)
  output crc_fail;
  reg crc_fail = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:164" *)
  wire crc_ok;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:165" *)
  output done;
  reg done = 1'h0;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:194" *)
  reg [6:0] idx = 7'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:162" *)
  wire \input ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:198" *)
  reg input_prev = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:205" *)
  output [15:0] multiturn_count;
  reg [15:0] multiturn_count = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:211" *)
  output no_response;
  reg no_response = 1'h0;
  (* init = 1'h0 *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:165" *)
  wire reset;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:162" *)
  input rx;
  wire rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:206" *)
  output [15:0] singleturn_count;
  reg [15:0] singleturn_count = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:195" *)
  reg [2:0] state;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:163" *)
  wire strobe;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:203" *)
  input trigger;
  wire trigger;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:209" *)
  output unindexed;
  reg unindexed = 1'h0;
  assign \$1  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:235" *) rx;
  assign \$2  = input_prev & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:235" *) \$1 ;
  assign \$3  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:248" *) cnt;
  assign \$4  = rx != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:253" *) input_prev;
  assign \$5  = idx + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:251" *) 1'h1;
  assign \$6  = cnt - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:257" *) 1'h1;
  assign \$7  = idx == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:259" *) 7'h4c;
  assign \$8  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:268" *) crc_ok;
  assign \$9  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:294" *) trigger;
  assign \$10  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:248" *) cnt;
  assign \$11  = rx != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:253" *) input_prev;
  assign \$12  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) fsm_state;
  assign \$13  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 1'h1;
  assign \$14  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h2;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:198" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) input_prev <= 1'h0;
    else input_prev <= rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:211" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) no_response <= 1'h0;
    else no_response <= \$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:213" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) done <= 1'h0;
    else done <= \$16 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:193" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) cnt <= 8'h00;
    else cnt <= \$17 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:194" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) idx <= 7'h00;
    else idx <= \$18 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) fsm_state <= 2'h0;
    else fsm_state <= \$19 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:212" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) crc_fail <= 1'h0;
    else crc_fail <= \$20 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:205" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) multiturn_count <= 16'h0000;
    else multiturn_count <= \$21 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:206" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) singleturn_count <= 16'h0000;
    else singleturn_count <= \$22 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:207" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) commutation_count <= 10'h000;
    else commutation_count <= \$23 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:208" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) battery_fail <= 1'h0;
    else battery_fail <= \$24 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:209" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) unindexed <= 1'h0;
    else unindexed <= \$25 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_0 <= 1'h0;
    else buf_0 <= \$26 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_1 <= 1'h0;
    else buf_1 <= \$27 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_2 <= 1'h0;
    else buf_2 <= \$28 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_3 <= 1'h0;
    else buf_3 <= \$29 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_4 <= 1'h0;
    else buf_4 <= \$30 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_5 <= 1'h0;
    else buf_5 <= \$31 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_6 <= 1'h0;
    else buf_6 <= \$32 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_7 <= 1'h0;
    else buf_7 <= \$33 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_8 <= 1'h0;
    else buf_8 <= \$34 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_9 <= 1'h0;
    else buf_9 <= \$35 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_10 <= 1'h0;
    else buf_10 <= \$36 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_11 <= 1'h0;
    else buf_11 <= \$37 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_12 <= 1'h0;
    else buf_12 <= \$38 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_13 <= 1'h0;
    else buf_13 <= \$39 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_14 <= 1'h0;
    else buf_14 <= \$40 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_15 <= 1'h0;
    else buf_15 <= \$41 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_16 <= 1'h0;
    else buf_16 <= \$42 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_17 <= 1'h0;
    else buf_17 <= \$43 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_18 <= 1'h0;
    else buf_18 <= \$44 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_19 <= 1'h0;
    else buf_19 <= \$45 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_20 <= 1'h0;
    else buf_20 <= \$46 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_21 <= 1'h0;
    else buf_21 <= \$47 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_22 <= 1'h0;
    else buf_22 <= \$48 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_23 <= 1'h0;
    else buf_23 <= \$49 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_24 <= 1'h0;
    else buf_24 <= \$50 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_25 <= 1'h0;
    else buf_25 <= \$51 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_26 <= 1'h0;
    else buf_26 <= \$52 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_27 <= 1'h0;
    else buf_27 <= \$53 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_28 <= 1'h0;
    else buf_28 <= \$54 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_29 <= 1'h0;
    else buf_29 <= \$55 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_30 <= 1'h0;
    else buf_30 <= \$56 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_31 <= 1'h0;
    else buf_31 <= \$57 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_32 <= 1'h0;
    else buf_32 <= \$58 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_33 <= 1'h0;
    else buf_33 <= \$59 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_34 <= 1'h0;
    else buf_34 <= \$60 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_35 <= 1'h0;
    else buf_35 <= \$61 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_36 <= 1'h0;
    else buf_36 <= \$62 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_37 <= 1'h0;
    else buf_37 <= \$63 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_38 <= 1'h0;
    else buf_38 <= \$64 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_39 <= 1'h0;
    else buf_39 <= \$65 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_40 <= 1'h0;
    else buf_40 <= \$66 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_41 <= 1'h0;
    else buf_41 <= \$67 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_42 <= 1'h0;
    else buf_42 <= \$68 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_43 <= 1'h0;
    else buf_43 <= \$69 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_44 <= 1'h0;
    else buf_44 <= \$70 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_45 <= 1'h0;
    else buf_45 <= \$71 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_46 <= 1'h0;
    else buf_46 <= \$72 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_47 <= 1'h0;
    else buf_47 <= \$73 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_48 <= 1'h0;
    else buf_48 <= \$74 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_49 <= 1'h0;
    else buf_49 <= \$75 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_50 <= 1'h0;
    else buf_50 <= \$76 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_51 <= 1'h0;
    else buf_51 <= \$77 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_52 <= 1'h0;
    else buf_52 <= \$78 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_53 <= 1'h0;
    else buf_53 <= \$79 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_54 <= 1'h0;
    else buf_54 <= \$80 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_55 <= 1'h0;
    else buf_55 <= \$81 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_56 <= 1'h0;
    else buf_56 <= \$82 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_57 <= 1'h0;
    else buf_57 <= \$83 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_58 <= 1'h0;
    else buf_58 <= \$84 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_59 <= 1'h0;
    else buf_59 <= \$85 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_60 <= 1'h0;
    else buf_60 <= \$86 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_61 <= 1'h0;
    else buf_61 <= \$87 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_62 <= 1'h0;
    else buf_62 <= \$88 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_63 <= 1'h0;
    else buf_63 <= \$89 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_64 <= 1'h0;
    else buf_64 <= \$90 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_65 <= 1'h0;
    else buf_65 <= \$91 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_66 <= 1'h0;
    else buf_66 <= \$92 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_67 <= 1'h0;
    else buf_67 <= \$93 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_68 <= 1'h0;
    else buf_68 <= \$94 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_69 <= 1'h0;
    else buf_69 <= \$95 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_70 <= 1'h0;
    else buf_70 <= \$96 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_71 <= 1'h0;
    else buf_71 <= \$97 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_72 <= 1'h0;
    else buf_72 <= \$98 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_73 <= 1'h0;
    else buf_73 <= \$99 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_74 <= 1'h0;
    else buf_74 <= \$100 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:227" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_75 <= 1'h0;
    else buf_75 <= \$101 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:221" *)
  \Controller.fanuc_encoders.U$3.crc  crc (
    .crc_ok(crc_ok),
    .\input (rx),
    .reset(done),
    .strobe(capture),
    .sync_100_clk(sync_100_clk),
    .sync_100_rst(sync_100_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$15  = no_response;
    if (trigger) begin
      \$15  = 1'h1;
    end
    casez (fsm_state)
      2'h0:
          if (\$2 ) begin
            \$15  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$16  = done;
    casez (fsm_state)
      2'h0:
          if (\$2 ) begin
            \$16  = 1'h0;
          end
      2'h1:
          /* empty */;
      2'h2:
          \$16  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$17  = cnt;
    casez (fsm_state)
      2'h0:
          if (\$2 ) begin
            \$17  = 8'h90;
          end
      2'h1:
          (* full_case = 32'd1 *)
          if (\$3 ) begin
            \$17  = 8'h60;
          end else if (\$4 ) begin
            \$17  = 8'h2f;
          end else begin
            \$17  = \$6 [7:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$18  = idx;
    casez (fsm_state)
      2'h0:
          if (\$2 ) begin
            \$18  = 7'h00;
          end
      2'h1:
          if (\$3 ) begin
            \$18  = \$5 [6:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$19  = fsm_state;
    casez (fsm_state)
      2'h0:
          if (\$2 ) begin
            \$19  = 2'h1;
          end
      2'h1:
        begin
          if (trigger) begin
            \$19  = 2'h0;
          end
          if (\$7 ) begin
            \$19  = 2'h2;
          end
        end
      2'h2:
          if (\$9 ) begin
            \$19  = 2'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$20  = crc_fail;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          (* full_case = 32'd1 *)
          if (no_response) begin
          end else if (\$8 ) begin
            \$20  = 1'h1;
          end else begin
            \$20  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$21  = multiturn_count;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          (* full_case = 32'd1 *)
          if (no_response) begin
          end else if (\$8 ) begin
          end else begin
            \$21  = { buf_51, buf_50, buf_49, buf_48, buf_47, buf_46, buf_45, buf_44, buf_43, buf_42, buf_41, buf_40, buf_39, buf_38, buf_37, buf_36 };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$22  = singleturn_count;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          (* full_case = 32'd1 *)
          if (no_response) begin
          end else if (\$8 ) begin
          end else begin
            \$22  = { buf_33, buf_32, buf_31, buf_30, buf_29, buf_28, buf_27, buf_26, buf_25, buf_24, buf_23, buf_22, buf_21, buf_20, buf_19, buf_18 };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$23  = commutation_count;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          (* full_case = 32'd1 *)
          if (no_response) begin
          end else if (\$8 ) begin
          end else begin
            \$23  = { buf_63, buf_62, buf_61, buf_60, buf_59, buf_58, buf_57, buf_56, buf_55, buf_54 };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$24  = battery_fail;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          (* full_case = 32'd1 *)
          if (no_response) begin
          end else if (\$8 ) begin
          end else begin
            \$24  = buf_5;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$25  = unindexed;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          (* full_case = 32'd1 *)
          if (no_response) begin
          end else if (\$8 ) begin
          end else begin
            \$25  = buf_8;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$26  = buf_0;
    if (capture) begin
      casez (idx)
        7'h00:
            \$26  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$27  = buf_1;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            \$27  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$28  = buf_2;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            \$28  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$29  = buf_3;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            \$29  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$30  = buf_4;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            \$30  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$31  = buf_5;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            \$31  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$32  = buf_6;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            \$32  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$33  = buf_7;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            \$33  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$34  = buf_8;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            \$34  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$35  = buf_9;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            \$35  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$36  = buf_10;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            \$36  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$37  = buf_11;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            \$37  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$38  = buf_12;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            \$38  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$39  = buf_13;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            \$39  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$40  = buf_14;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            \$40  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$41  = buf_15;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            \$41  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$42  = buf_16;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            \$42  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$43  = buf_17;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            \$43  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$44  = buf_18;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            \$44  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$45  = buf_19;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            \$45  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$46  = buf_20;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            \$46  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$47  = buf_21;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            \$47  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$48  = buf_22;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            \$48  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$49  = buf_23;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            \$49  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$50  = buf_24;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            \$50  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$51  = buf_25;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            \$51  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$52  = buf_26;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            \$52  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$53  = buf_27;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            \$53  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$54  = buf_28;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            \$54  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$55  = buf_29;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            \$55  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$56  = buf_30;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            \$56  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$57  = buf_31;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            \$57  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$58  = buf_32;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            \$58  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$59  = buf_33;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            \$59  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$60  = buf_34;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            \$60  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$61  = buf_35;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            \$61  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$62  = buf_36;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            \$62  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$63  = buf_37;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            \$63  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$64  = buf_38;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            \$64  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$65  = buf_39;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            \$65  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$66  = buf_40;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            \$66  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$67  = buf_41;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            \$67  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$68  = buf_42;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            \$68  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$69  = buf_43;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            \$69  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$70  = buf_44;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            \$70  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$71  = buf_45;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            \$71  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$72  = buf_46;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            \$72  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$73  = buf_47;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            \$73  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$74  = buf_48;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            \$74  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$75  = buf_49;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            \$75  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$76  = buf_50;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            \$76  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$77  = buf_51;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            \$77  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$78  = buf_52;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            \$78  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$79  = buf_53;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            \$79  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$80  = buf_54;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            \$80  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$81  = buf_55;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            \$81  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$82  = buf_56;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            \$82  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$83  = buf_57;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            \$83  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$84  = buf_58;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            \$84  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$85  = buf_59;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            \$85  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$86  = buf_60;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            \$86  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$87  = buf_61;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            \$87  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$88  = buf_62;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            \$88  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$89  = buf_63;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            \$89  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$90  = buf_64;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            \$90  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$91  = buf_65;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            \$91  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$92  = buf_66;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            \$92  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$93  = buf_67;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            \$93  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$94  = buf_68;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            \$94  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$95  = buf_69;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            /* empty */;
        7'h45:
            \$95  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$96  = buf_70;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            /* empty */;
        7'h45:
            /* empty */;
        7'h46:
            \$96  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$97  = buf_71;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            /* empty */;
        7'h45:
            /* empty */;
        7'h46:
            /* empty */;
        7'h47:
            \$97  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$98  = buf_72;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            /* empty */;
        7'h45:
            /* empty */;
        7'h46:
            /* empty */;
        7'h47:
            /* empty */;
        7'h48:
            \$98  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$99  = buf_73;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            /* empty */;
        7'h45:
            /* empty */;
        7'h46:
            /* empty */;
        7'h47:
            /* empty */;
        7'h48:
            /* empty */;
        7'h49:
            \$99  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$100  = buf_74;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            /* empty */;
        7'h45:
            /* empty */;
        7'h46:
            /* empty */;
        7'h47:
            /* empty */;
        7'h48:
            /* empty */;
        7'h49:
            /* empty */;
        7'h4a:
            \$100  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$101  = buf_75;
    if (capture) begin
      casez (idx)
        7'h00:
            /* empty */;
        7'h01:
            /* empty */;
        7'h02:
            /* empty */;
        7'h03:
            /* empty */;
        7'h04:
            /* empty */;
        7'h05:
            /* empty */;
        7'h06:
            /* empty */;
        7'h07:
            /* empty */;
        7'h08:
            /* empty */;
        7'h09:
            /* empty */;
        7'h0a:
            /* empty */;
        7'h0b:
            /* empty */;
        7'h0c:
            /* empty */;
        7'h0d:
            /* empty */;
        7'h0e:
            /* empty */;
        7'h0f:
            /* empty */;
        7'h10:
            /* empty */;
        7'h11:
            /* empty */;
        7'h12:
            /* empty */;
        7'h13:
            /* empty */;
        7'h14:
            /* empty */;
        7'h15:
            /* empty */;
        7'h16:
            /* empty */;
        7'h17:
            /* empty */;
        7'h18:
            /* empty */;
        7'h19:
            /* empty */;
        7'h1a:
            /* empty */;
        7'h1b:
            /* empty */;
        7'h1c:
            /* empty */;
        7'h1d:
            /* empty */;
        7'h1e:
            /* empty */;
        7'h1f:
            /* empty */;
        7'h20:
            /* empty */;
        7'h21:
            /* empty */;
        7'h22:
            /* empty */;
        7'h23:
            /* empty */;
        7'h24:
            /* empty */;
        7'h25:
            /* empty */;
        7'h26:
            /* empty */;
        7'h27:
            /* empty */;
        7'h28:
            /* empty */;
        7'h29:
            /* empty */;
        7'h2a:
            /* empty */;
        7'h2b:
            /* empty */;
        7'h2c:
            /* empty */;
        7'h2d:
            /* empty */;
        7'h2e:
            /* empty */;
        7'h2f:
            /* empty */;
        7'h30:
            /* empty */;
        7'h31:
            /* empty */;
        7'h32:
            /* empty */;
        7'h33:
            /* empty */;
        7'h34:
            /* empty */;
        7'h35:
            /* empty */;
        7'h36:
            /* empty */;
        7'h37:
            /* empty */;
        7'h38:
            /* empty */;
        7'h39:
            /* empty */;
        7'h3a:
            /* empty */;
        7'h3b:
            /* empty */;
        7'h3c:
            /* empty */;
        7'h3d:
            /* empty */;
        7'h3e:
            /* empty */;
        7'h3f:
            /* empty */;
        7'h40:
            /* empty */;
        7'h41:
            /* empty */;
        7'h42:
            /* empty */;
        7'h43:
            /* empty */;
        7'h44:
            /* empty */;
        7'h45:
            /* empty */;
        7'h46:
            /* empty */;
        7'h47:
            /* empty */;
        7'h48:
            /* empty */;
        7'h49:
            /* empty */;
        7'h4a:
            /* empty */;
        7'h4b:
            \$101  = rx;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    state = 3'h0;
    casez (fsm_state)
      2'h0:
          state = 3'h1;
      2'h1:
          state = 3'h2;
      2'h2:
          state = 3'h3;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    capture = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$10 ) begin
            capture = 1'h1;
          end
    endcase
  end
  assign \input  = rx;
  assign strobe = capture;
  assign reset = done;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:169" *)
(* generator = "Amaranth" *)
module \Controller.fanuc_encoders.U$3.crc (sync_100_rst, crc_ok, \input , reset, strobe, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$4  = 0;
  wire [5:0] \$1 ;
  reg [4:0] \$2 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:164" *)
  output crc_ok;
  wire crc_ok;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:162" *)
  input \input ;
  wire \input ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:165" *)
  input reset;
  wire reset;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:171" *)
  reg [4:0] shreg = 5'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:163" *)
  input strobe;
  wire strobe;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:172" *)
  reg [4:0] \xor ;
  assign crc_ok = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:174" *) shreg;
  assign \$1  = { shreg, \input  } ^ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:180" *) { 1'h0, \xor  };
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:171" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) shreg <= 5'h00;
    else shreg <= \$2 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \xor  = 5'h00;
    if (shreg[4]) begin
      \xor  = 5'h0b;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$2  = shreg;
    if (strobe) begin
      \$2  = \$1 [4:0];
    end
    if (reset) begin
      \$2  = 5'h00;
    end
  end
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:135" *)
(* generator = "Amaranth" *)
module \Controller.fanuc_encoders.request_pulse (sync_100_rst, req, trigger, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$5  = 0;
  wire [10:0] \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire [10:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  reg [9:0] \$7 ;
  reg \$8 ;
  reg \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:137" *)
  reg [9:0] cnt = 10'h000;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  reg fsm_state = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:131" *)
  output req;
  reg req = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:130" *)
  input trigger;
  wire trigger;
  assign \$1  = cnt + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:139" *) 1'h1;
  assign \$2  = cnt == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:149" *) 10'h31f;
  assign \$3  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:151" *) trigger;
  assign \$4  = cnt + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:155" *) 1'h1;
  assign \$5  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) fsm_state;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:137" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) cnt <= 10'h000;
    else cnt <= \$7 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\fanuc_encoder.py:131" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) req <= 1'h0;
    else req <= \$8 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) fsm_state <= 1'h0;
    else fsm_state <= \$9 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$7  = \$1 [9:0];
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          if (trigger) begin
            \$7  = 10'h000;
          end
      1'h1:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            \$7  = \$4 [9:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$8  = req;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          if (trigger) begin
            \$8  = 1'h1;
          end
      1'h1:
          if (\$2 ) begin
            \$8  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$9  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          if (trigger) begin
            \$9  = 1'h1;
          end
      1'h1:
          if (\$2 ) begin
            if (\$3 ) begin
              \$9  = 1'h0;
            end
          end
    endcase
  end
  assign \$6  = fsm_state;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:78" *)
(* generator = "Amaranth" *)
module \Controller.fanuc_encoders_shift_dma_2 (sync_100_rst, read_bram_address_input, write_bram_address_input, read_node_address_input, write_node_address_input, data_input, read_complete_input, write_complete_input, bram_read_data, write_bram_address_output, read_bram_address_output, write_node_address_output, read_node_address_output, write_complete_output, data_output, read_complete_output, bram_address, bram_write_data, bram_write_enable, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$6  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  reg \$15 ;
  reg [31:0] \$16 ;
  reg \$17 ;
  reg \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  output [15:0] bram_address;
  reg [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:70" *)
  input [31:0] bram_read_data;
  wire [31:0] bram_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  output [31:0] bram_write_data;
  reg [31:0] bram_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  output bram_write_enable;
  reg bram_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  reg [31:0] buf_data = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  reg [15:0] buf_read_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  reg buf_read_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  reg [7:0] buf_read_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  reg [15:0] buf_write_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  reg buf_write_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  reg [7:0] buf_write_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  input [31:0] data_input;
  wire [31:0] data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  output [31:0] data_output;
  reg [31:0] data_output = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  input [15:0] read_bram_address_input;
  wire [15:0] read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  output [15:0] read_bram_address_output;
  reg [15:0] read_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  input read_complete_input;
  wire read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  output read_complete_output;
  reg read_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  reg read_next = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  input [7:0] read_node_address_input;
  wire [7:0] read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  output [7:0] read_node_address_output;
  reg [7:0] read_node_address_output = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  input [15:0] write_bram_address_input;
  wire [15:0] write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  output [15:0] write_bram_address_output;
  reg [15:0] write_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  input write_complete_input;
  wire write_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  output write_complete_output;
  reg write_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  input [7:0] write_node_address_input;
  wire [7:0] write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  output [7:0] write_node_address_output;
  reg [7:0] write_node_address_output = 8'h00;
  assign \$1  = read_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) 2'h2;
  assign \$2  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$3  = \$1  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$2 ;
  assign \$4  = write_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) 2'h2;
  assign \$5  = \$4  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$6  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$7  = \$5  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$6 ;
  assign \$8  = read_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) 2'h2;
  assign \$9  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$10  = \$8  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$9 ;
  assign \$11  = write_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) 2'h2;
  assign \$12  = \$11  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$13  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$14  = \$12  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$13 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_bram_address <= 16'h0000;
    else buf_write_bram_address <= write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_bram_address <= 16'h0000;
    else buf_read_bram_address <= read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_node_address <= 8'h00;
    else buf_write_node_address <= write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_node_address <= 8'h00;
    else buf_read_node_address <= read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_bram_address_output <= 16'h0000;
    else write_bram_address_output <= buf_write_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_bram_address_output <= 16'h0000;
    else read_bram_address_output <= buf_read_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_node_address_output <= 8'h00;
    else write_node_address_output <= buf_write_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_node_address_output <= 8'h00;
    else read_node_address_output <= buf_read_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_data <= 32'd0;
    else buf_data <= data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_complete <= 1'h0;
    else buf_read_complete <= read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_complete_output <= 1'h0;
    else write_complete_output <= buf_write_complete;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_next <= 1'h0;
    else read_next <= \$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) data_output <= 32'd0;
    else data_output <= \$16 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_complete_output <= 1'h0;
    else read_complete_output <= \$17 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_complete <= 1'h0;
    else buf_write_complete <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$15  = read_next;
    if (\$3 ) begin
      \$15  = 1'h1;
    end else if (read_next) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$16  = bram_read_data;
    end else begin
      \$16  = buf_data;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$17  = 1'h1;
    end else begin
      \$17  = buf_read_complete;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    if (\$7 ) begin
      \$18  = 1'h1;
    end else begin
      \$18  = write_complete_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    bram_address = 16'h0000;
    if (\$10 ) begin
      bram_address = read_bram_address_input;
    end
    if (\$14 ) begin
      bram_address = write_bram_address_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    bram_write_data = 32'd0;
    if (\$14 ) begin
      bram_write_data = data_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    if (\$14 ) begin
      bram_write_enable = 1'h1;
    end else begin
      bram_write_enable = 1'h0;
    end
  end
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:37" *)
(* generator = "Amaranth" *)
module \Controller.global_timers (sync_25_rst, trigger, timer_pulse, sync_25_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$7  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [16:0] \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire [16:0] \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire [16:0] \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire [16:0] \$2 ;
  wire [16:0] \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire [16:0] \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  reg [15:0] \$39 ;
  wire \$4 ;
  reg [15:0] \$40 ;
  reg [15:0] \$41 ;
  reg [15:0] \$42 ;
  reg [15:0] \$43 ;
  reg [15:0] \$44 ;
  reg [15:0] \$45 ;
  reg [15:0] \$46 ;
  wire [16:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [16:0] \$8 ;
  wire \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_0 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_1 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_2 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_3 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_4 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_5 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_6 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  reg [15:0] current_count_7 = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_2;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_3;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_4;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_5;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_6;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:40" *)
  wire [15:0] reset_count_7;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  input sync_25_clk;
  wire sync_25_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  input sync_25_rst;
  wire sync_25_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:17" *)
  output [7:0] timer_pulse;
  reg [7:0] timer_pulse;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:19" *)
  input trigger;
  wire trigger;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_7 <= 16'h0000;
    else current_count_7 <= \$46 ;
  assign \$1  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_0;
  assign \$2  = current_count_0 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$3  = current_count_0 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$4  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_1;
  assign \$5  = current_count_1 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$6  = current_count_1 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$7  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_2;
  assign \$8  = current_count_2 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$9  = current_count_2 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$10  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_3;
  assign \$11  = current_count_3 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$12  = current_count_3 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$13  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_4;
  assign \$14  = current_count_4 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$15  = current_count_4 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$16  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_5;
  assign \$17  = current_count_5 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$18  = current_count_5 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$19  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_6;
  assign \$20  = current_count_6 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$21  = current_count_6 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$22  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_7;
  assign \$23  = current_count_7 - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:54" *) 1'h1;
  assign \$24  = current_count_0 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$25  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_1;
  assign \$26  = current_count_1 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$27  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_2;
  assign \$28  = current_count_2 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$29  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_3;
  assign \$30  = current_count_3 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$31  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_4;
  assign \$32  = current_count_4 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$33  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_5;
  assign \$34  = current_count_5 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$35  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_6;
  assign \$36  = current_count_6 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  assign \$37  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:53" *) current_count_7;
  assign \$38  = current_count_7 == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:56" *) 1'h1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_0 <= 16'h0000;
    else current_count_0 <= \$39 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_1 <= 16'h0000;
    else current_count_1 <= \$40 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_2 <= 16'h0000;
    else current_count_2 <= \$41 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_3 <= 16'h0000;
    else current_count_3 <= \$42 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_4 <= 16'h0000;
    else current_count_4 <= \$43 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_5 <= 16'h0000;
    else current_count_5 <= \$44 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\global_timer.py:39" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) current_count_6 <= 16'h0000;
    else current_count_6 <= \$45 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    timer_pulse = 8'h00;
    if (\$24 ) begin
      timer_pulse[0] = 1'h1;
    end
    if (\$26 ) begin
      timer_pulse[1] = 1'h1;
    end
    if (\$28 ) begin
      timer_pulse[2] = 1'h1;
    end
    if (\$30 ) begin
      timer_pulse[3] = 1'h1;
    end
    if (\$32 ) begin
      timer_pulse[4] = 1'h1;
    end
    if (\$34 ) begin
      timer_pulse[5] = 1'h1;
    end
    if (\$36 ) begin
      timer_pulse[6] = 1'h1;
    end
    if (\$38 ) begin
      timer_pulse[7] = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$39  = current_count_0;
    if (trigger) begin
      \$39  = 16'h000a;
    end else if (\$1 ) begin
      \$39  = \$2 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$40  = current_count_1;
    if (\$3 ) begin
      \$40  = 16'h000a;
    end else if (\$4 ) begin
      \$40  = \$5 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$41  = current_count_2;
    if (\$6 ) begin
      \$41  = 16'h000a;
    end else if (\$7 ) begin
      \$41  = \$8 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$42  = current_count_3;
    if (\$9 ) begin
      \$42  = 16'h000a;
    end else if (\$10 ) begin
      \$42  = \$11 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$43  = current_count_4;
    if (\$12 ) begin
      \$43  = 16'h000a;
    end else if (\$13 ) begin
      \$43  = \$14 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$44  = current_count_5;
    if (\$15 ) begin
      \$44  = 16'h000a;
    end else if (\$16 ) begin
      \$44  = \$17 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$45  = current_count_6;
    if (\$18 ) begin
      \$45  = 16'h000a;
    end else if (\$19 ) begin
      \$45  = \$20 [15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$46  = current_count_7;
    if (\$21 ) begin
      \$46  = 16'h000a;
    end else if (\$22 ) begin
      \$46  = \$23 [15:0];
    end
  end
  assign reset_count_0 = 16'h000a;
  assign reset_count_1 = 16'h000a;
  assign reset_count_2 = 16'h000a;
  assign reset_count_3 = 16'h000a;
  assign reset_count_4 = 16'h000a;
  assign reset_count_5 = 16'h000a;
  assign reset_count_6 = 16'h000a;
  assign reset_count_7 = 16'h000a;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:78" *)
(* generator = "Amaranth" *)
module \Controller.global_timers_shift_dma_3 (sync_100_rst, read_bram_address_input, write_bram_address_input, read_node_address_input, write_node_address_input, data_input, read_complete_input, write_complete_input, write_bram_address_output, read_bram_address_output, write_node_address_output, read_node_address_output, write_complete_output, data_output, read_complete_output, bram_address, bram_write_data, bram_write_enable, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$8  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  reg \$15 ;
  reg [31:0] \$16 ;
  reg \$17 ;
  reg \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  output [15:0] bram_address;
  reg [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:70" *)
  wire [31:0] bram_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  output [31:0] bram_write_data;
  reg [31:0] bram_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  output bram_write_enable;
  reg bram_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  reg [31:0] buf_data = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  reg [15:0] buf_read_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  reg buf_read_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  reg [7:0] buf_read_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  reg [15:0] buf_write_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  reg buf_write_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  reg [7:0] buf_write_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  input [31:0] data_input;
  wire [31:0] data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  output [31:0] data_output;
  reg [31:0] data_output = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  input [15:0] read_bram_address_input;
  wire [15:0] read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  output [15:0] read_bram_address_output;
  reg [15:0] read_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  input read_complete_input;
  wire read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  output read_complete_output;
  reg read_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  reg read_next = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  input [7:0] read_node_address_input;
  wire [7:0] read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  output [7:0] read_node_address_output;
  reg [7:0] read_node_address_output = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  input [15:0] write_bram_address_input;
  wire [15:0] write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  output [15:0] write_bram_address_output;
  reg [15:0] write_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  input write_complete_input;
  wire write_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  output write_complete_output;
  reg write_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  input [7:0] write_node_address_input;
  wire [7:0] write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  output [7:0] write_node_address_output;
  reg [7:0] write_node_address_output = 8'h00;
  assign \$1  = read_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) 2'h3;
  assign \$2  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$3  = \$1  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$2 ;
  assign \$4  = write_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) 2'h3;
  assign \$5  = \$4  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$6  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$7  = \$5  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$6 ;
  assign \$8  = read_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) 2'h3;
  assign \$9  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$10  = \$8  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$9 ;
  assign \$11  = write_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) 2'h3;
  assign \$12  = \$11  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$13  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$14  = \$12  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$13 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_bram_address <= 16'h0000;
    else buf_write_bram_address <= write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_bram_address <= 16'h0000;
    else buf_read_bram_address <= read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_node_address <= 8'h00;
    else buf_write_node_address <= write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_node_address <= 8'h00;
    else buf_read_node_address <= read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_bram_address_output <= 16'h0000;
    else write_bram_address_output <= buf_write_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_bram_address_output <= 16'h0000;
    else read_bram_address_output <= buf_read_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_node_address_output <= 8'h00;
    else write_node_address_output <= buf_write_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_node_address_output <= 8'h00;
    else read_node_address_output <= buf_read_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_data <= 32'd0;
    else buf_data <= data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_complete <= 1'h0;
    else buf_read_complete <= read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_complete_output <= 1'h0;
    else write_complete_output <= buf_write_complete;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_next <= 1'h0;
    else read_next <= \$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) data_output <= 32'd0;
    else data_output <= \$16 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_complete_output <= 1'h0;
    else read_complete_output <= \$17 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_complete <= 1'h0;
    else buf_write_complete <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$15  = read_next;
    if (\$3 ) begin
      \$15  = 1'h1;
    end else if (read_next) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$16  = 32'd0;
    end else begin
      \$16  = buf_data;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$17  = 1'h1;
    end else begin
      \$17  = buf_read_complete;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    if (\$7 ) begin
      \$18  = 1'h1;
    end else begin
      \$18  = write_complete_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    bram_address = 16'h0000;
    if (\$10 ) begin
      bram_address = read_bram_address_input;
    end
    if (\$14 ) begin
      bram_address = write_bram_address_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    bram_write_data = 32'd0;
    if (\$14 ) begin
      bram_write_data = data_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    if (\$14 ) begin
      bram_write_enable = 1'h1;
    end else begin
      bram_write_enable = 1'h0;
    end
  end
  assign bram_read_data = 32'd0;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:168" *)
(* generator = "Amaranth" *)
module \Controller.serial_card (sync_25_clk, slotIn, sync_100_rst, sync_25_rst, rs422_tx, slotOut, slotOutEnable, rs422_rx, bram_read_data, bram_address, bram_write_data, bram_write_enable, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$9  = 0;
  reg [31:0] \$1 ;
  reg [31:0] \$10 ;
  reg [9:0] \$2 ;
  reg [9:0] \$3 ;
  reg [6:0] \$4 ;
  reg \$5 ;
  reg [6:0] \$6 ;
  reg [7:0] \$7 ;
  reg [2:0] \$8 ;
  reg \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:46" *)
  input [15:0] bram_address;
  wire [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:48" *)
  output [31:0] bram_read_data;
  reg [31:0] bram_read_data = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:47" *)
  input [31:0] bram_write_data;
  wire [31:0] bram_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:49" *)
  input bram_write_enable;
  wire bram_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:22" *)
  wire busy;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:30" *)
  reg [2:0] byte_count = 3'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:31" *)
  reg [31:0] data_in = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:32" *)
  wire [31:0] data_out;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:28" *)
  reg [6:0] device_address = 7'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:24" *)
  wire error;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:126" *)
  reg [6:0] quadrature_mode_enable = 7'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:26" *)
  reg read = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:29" *)
  reg [7:0] register_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:125" *)
  reg [9:0] rs422_mode_enable = 10'h000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:39" *)
  output [9:0] rs422_rx;
  reg [9:0] rs422_rx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:40" *)
  input [9:0] rs422_tx;
  wire [9:0] rs422_tx;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:124" *)
  reg [9:0] rs485_mode_enable = 10'h000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:16" *)
  wire scl;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:17" *)
  wire scl_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:18" *)
  wire sda_in;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:19" *)
  wire sda_out;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:20" *)
  wire sda_out_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:18" *)
  input [21:0] slotIn;
  wire [21:0] slotIn;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:16" *)
  output [21:0] slotOut;
  reg [21:0] slotOut;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:17" *)
  output [21:0] slotOutEnable;
  reg [21:0] slotOutEnable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:23" *)
  reg start = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  input sync_25_clk;
  wire sync_25_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  input sync_25_rst;
  wire sync_25_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:48" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) bram_read_data <= 32'd0;
    else bram_read_data <= \$1 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:124" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) rs485_mode_enable <= 10'h000;
    else rs485_mode_enable <= \$2 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:125" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) rs422_mode_enable <= 10'h000;
    else rs422_mode_enable <= \$3 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:126" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) quadrature_mode_enable <= 7'h00;
    else quadrature_mode_enable <= \$4 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:26" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read <= 1'h0;
    else read <= \$5 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:28" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) device_address <= 7'h00;
    else device_address <= \$6 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:29" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) register_address <= 8'h00;
    else register_address <= \$7 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:30" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) byte_count <= 3'h0;
    else byte_count <= \$8 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:23" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) start <= 1'h0;
    else start <= \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:31" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) data_in <= 32'd0;
    else data_in <= \$10 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\interface_cards\\serial_interface.py:171" *)
  \Controller.serial_card.i2c  i2c (
    .busy(busy),
    .byte_count(byte_count),
    .data_in(data_in),
    .data_out(data_out),
    .device_address(device_address),
    .error(error),
    .read(read),
    .register_address(register_address),
    .scl(scl),
    .scl_enable(scl_enable),
    .sda_in(slotIn[21]),
    .sda_out_enable(sda_out_enable),
    .start(start),
    .sync_25_clk(sync_25_clk),
    .sync_25_rst(sync_25_rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    { slotOut[19], slotOut[17], slotOut[15], slotOut[13], slotOut[11], slotOut[9], slotOut[7], slotOut[5], slotOut[3], slotOut[1] } = 10'h000;
    if (rs422_mode_enable[0]) begin
      slotOut[19] = rs422_tx[0];
    end
    if (rs422_mode_enable[1]) begin
      slotOut[9] = rs422_tx[1];
    end
    if (rs422_mode_enable[2]) begin
      slotOut[17] = rs422_tx[2];
    end
    if (rs422_mode_enable[3]) begin
      slotOut[7] = rs422_tx[3];
    end
    if (rs422_mode_enable[4]) begin
      slotOut[15] = rs422_tx[4];
    end
    if (rs422_mode_enable[5]) begin
      slotOut[5] = rs422_tx[5];
    end
    if (rs422_mode_enable[6]) begin
      slotOut[13] = rs422_tx[6];
    end
    if (rs422_mode_enable[7]) begin
      slotOut[3] = rs422_tx[7];
    end
    if (rs422_mode_enable[8]) begin
      slotOut[11] = rs422_tx[8];
    end
    if (rs422_mode_enable[9]) begin
      slotOut[1] = rs422_tx[9];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    { slotOutEnable[19], slotOutEnable[17], slotOutEnable[15], slotOutEnable[13], slotOutEnable[11], slotOutEnable[9], slotOutEnable[7], slotOutEnable[5], slotOutEnable[3], slotOutEnable[1] } = 10'h000;
    if (rs422_mode_enable[0]) begin
      slotOutEnable[19] = 1'h1;
    end
    if (rs422_mode_enable[1]) begin
      slotOutEnable[9] = 1'h1;
    end
    if (rs422_mode_enable[2]) begin
      slotOutEnable[17] = 1'h1;
    end
    if (rs422_mode_enable[3]) begin
      slotOutEnable[7] = 1'h1;
    end
    if (rs422_mode_enable[4]) begin
      slotOutEnable[15] = 1'h1;
    end
    if (rs422_mode_enable[5]) begin
      slotOutEnable[5] = 1'h1;
    end
    if (rs422_mode_enable[6]) begin
      slotOutEnable[13] = 1'h1;
    end
    if (rs422_mode_enable[7]) begin
      slotOutEnable[3] = 1'h1;
    end
    if (rs422_mode_enable[8]) begin
      slotOutEnable[11] = 1'h1;
    end
    if (rs422_mode_enable[9]) begin
      slotOutEnable[1] = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    rs422_rx = 10'h000;
    if (rs422_mode_enable[0]) begin
      rs422_rx[0] = slotIn[18];
    end
    if (rs422_mode_enable[1]) begin
      rs422_rx[1] = slotIn[8];
    end
    if (rs422_mode_enable[2]) begin
      rs422_rx[2] = slotIn[16];
    end
    if (rs422_mode_enable[3]) begin
      rs422_rx[3] = slotIn[6];
    end
    if (rs422_mode_enable[4]) begin
      rs422_rx[4] = slotIn[14];
    end
    if (rs422_mode_enable[5]) begin
      rs422_rx[5] = slotIn[4];
    end
    if (rs422_mode_enable[6]) begin
      rs422_rx[6] = slotIn[12];
    end
    if (rs422_mode_enable[7]) begin
      rs422_rx[7] = slotIn[2];
    end
    if (rs422_mode_enable[8]) begin
      rs422_rx[8] = slotIn[10];
    end
    if (rs422_mode_enable[9]) begin
      rs422_rx[9] = slotIn[0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$1  = bram_read_data;
    casez (bram_address)
      16'h0000:
          \$1  = 32'd0;
      16'h0001:
          \$1  = 32'd0;
      16'h0003:
          \$1  = 32'd0;
      16'h0002:
          \$1  = data_out;
      16'h0004:
          \$1  = { 30'h00000000, error, busy };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$2  = rs485_mode_enable;
    casez (bram_address)
      16'h0000:
          if (bram_write_enable) begin
            \$2  = bram_write_data[9:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$3  = rs422_mode_enable;
    casez (bram_address)
      16'h0000:
          if (bram_write_enable) begin
            \$3  = bram_write_data[19:10];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$4  = quadrature_mode_enable;
    casez (bram_address)
      16'h0000:
          if (bram_write_enable) begin
            \$4  = bram_write_data[26:20];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$5  = read;
    casez (bram_address)
      16'h0000:
          /* empty */;
      16'h0001:
          if (bram_write_enable) begin
            \$5  = bram_write_data[0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$6  = device_address;
    casez (bram_address)
      16'h0000:
          /* empty */;
      16'h0001:
          if (bram_write_enable) begin
            \$6  = bram_write_data[7:1];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$7  = register_address;
    casez (bram_address)
      16'h0000:
          /* empty */;
      16'h0001:
          if (bram_write_enable) begin
            \$7  = bram_write_data[15:8];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$8  = byte_count;
    casez (bram_address)
      16'h0000:
          /* empty */;
      16'h0001:
          if (bram_write_enable) begin
            \$8  = bram_write_data[18:16];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$9  = start;
    casez (bram_address)
      16'h0000:
          /* empty */;
      16'h0001:
          if (bram_write_enable) begin
            \$9  = bram_write_data[19];
          end
    endcase
    if (busy) begin
      \$9  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$10  = data_in;
    casez (bram_address)
      16'h0000:
          /* empty */;
      16'h0001:
          /* empty */;
      16'h0003:
          if (bram_write_enable) begin
            \$10  = bram_write_data;
          end
    endcase
  end
  assign sda_in = slotIn[21];
  assign sda_out = 1'h0;
  always @*
    slotOutEnable[21] = sda_out_enable;
  always @*
    slotOutEnable[20] = scl_enable;
  always @*
    slotOutEnable[0] = 1'h0;
  always @*
    slotOutEnable[2] = 1'h0;
  always @*
    slotOutEnable[4] = 1'h0;
  always @*
    slotOutEnable[6] = 1'h0;
  always @*
    slotOutEnable[8] = 1'h0;
  always @*
    slotOutEnable[10] = 1'h0;
  always @*
    slotOutEnable[12] = 1'h0;
  always @*
    slotOutEnable[14] = 1'h0;
  always @*
    slotOutEnable[16] = 1'h0;
  always @*
    slotOutEnable[18] = 1'h0;
  always @*
    slotOut[21] = 1'h0;
  always @*
    slotOut[20] = scl;
  always @*
    slotOut[0] = 1'h0;
  always @*
    slotOut[2] = 1'h0;
  always @*
    slotOut[4] = 1'h0;
  always @*
    slotOut[6] = 1'h0;
  always @*
    slotOut[8] = 1'h0;
  always @*
    slotOut[10] = 1'h0;
  always @*
    slotOut[12] = 1'h0;
  always @*
    slotOut[14] = 1'h0;
  always @*
    slotOut[16] = 1'h0;
  always @*
    slotOut[18] = 1'h0;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:42" *)
(* generator = "Amaranth" *)
module \Controller.serial_card.i2c (sda_in, sync_25_rst, sda_out_enable, read, device_address, register_address, byte_count, start, data_in, scl, busy, scl_enable, error, data_out, sync_25_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$10  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [5:0] \$11 ;
  wire [5:0] \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire [3:0] \$15 ;
  wire \$16 ;
  wire [3:0] \$17 ;
  wire [3:0] \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire [5:0] \$20 ;
  wire [5:0] \$21 ;
  wire \$22 ;
  wire [3:0] \$23 ;
  wire [3:0] \$24 ;
  wire [3:0] \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire [5:0] \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  reg \$41 ;
  reg [4:0] \$42 ;
  reg [3:0] \$43 ;
  reg \$44 ;
  reg \$45 ;
  reg \$46 ;
  reg \$47 ;
  reg \$48 ;
  reg \$49 ;
  wire \$5 ;
  reg [3:0] \$50 ;
  reg \$51 ;
  reg [2:0] \$52 ;
  reg [2:0] \$53 ;
  reg [2:0] \$54 ;
  reg [31:0] \$55 ;
  reg [47:0] \$56 ;
  reg [31:0] \$57 ;
  wire [4:0] \$6 ;
  wire \$7 ;
  wire [7:0] \$8 ;
  wire [7:0] \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:52" *)
  reg [2:0] bit_counter = 3'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:22" *)
  output busy;
  reg busy = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:30" *)
  input [2:0] byte_count;
  wire [2:0] byte_count;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:53" *)
  reg [2:0] byte_counter = 3'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:82" *)
  reg [2:0] bytes_sent = 3'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:46" *)
  reg [4:0] counter = 5'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:76" *)
  reg d_out = 1'h1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:31" *)
  input [31:0] data_in;
  wire [31:0] data_in;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:32" *)
  output [31:0] data_out;
  reg [31:0] data_out = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:28" *)
  input [6:0] device_address;
  wire [6:0] device_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:24" *)
  output error;
  reg error = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:47" *)
  reg [3:0] half_counter = 4'h0;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  reg [3:0] i2c_fsm_state = 4'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:26" *)
  input read;
  wire read;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:80" *)
  reg [31:0] read_data = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:84" *)
  reg read_next = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:29" *)
  input [7:0] register_address;
  wire [7:0] register_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:16" *)
  output scl;
  reg scl = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:17" *)
  output scl_enable;
  reg scl_enable = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:49" *)
  reg scl_high_sample = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:50" *)
  reg scl_low_sample = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:45" *)
  reg scl_toggle = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:18" *)
  input sda_in;
  wire sda_in;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:20" *)
  output sda_out_enable;
  wire sda_out_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:79" *)
  reg [47:0] send_data = 48'h000000000000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:23" *)
  input start;
  wire start;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  input sync_25_clk;
  wire sync_25_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:274" *)
  input sync_25_rst;
  wire sync_25_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:45" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) scl_toggle <= 1'h0;
    else scl_toggle <= \$41 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:46" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) counter <= 5'h00;
    else counter <= \$42 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:47" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) half_counter <= 4'h0;
    else half_counter <= \$43 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:49" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) scl_high_sample <= 1'h0;
    else scl_high_sample <= \$44 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:50" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) scl_low_sample <= 1'h0;
    else scl_low_sample <= \$45 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:16" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) scl <= 1'h0;
    else scl <= \$7 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:22" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) busy <= 1'h0;
    else busy <= \$46 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:76" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) d_out <= 1'h1;
    else d_out <= \$47 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:17" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) scl_enable <= 1'h0;
    else scl_enable <= \$48 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:84" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) read_next <= 1'h0;
    else read_next <= \$49 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) i2c_fsm_state <= 4'h0;
    else i2c_fsm_state <= \$50 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:24" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) error <= 1'h0;
    else error <= \$51 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:53" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) byte_counter <= 3'h0;
    else byte_counter <= \$52 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:82" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) bytes_sent <= 3'h0;
    else bytes_sent <= \$53 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:52" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) bit_counter <= 3'h0;
    else bit_counter <= \$54 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:80" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) read_data <= 32'd0;
    else read_data <= \$55 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:79" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) send_data <= 48'h000000000000;
    else send_data <= \$56 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:32" *)
  always @(posedge sync_25_clk, posedge sync_25_rst)
    if (sync_25_rst) data_out <= 32'd0;
    else data_out <= \$57 ;
  assign \$1  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:56" *) counter;
  assign \$2  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:57" *) scl_toggle;
  assign \$3  = counter - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:62" *) 1'h1;
  assign \$4  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:63" *) half_counter;
  assign \$5  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:65" *) scl;
  assign \$6  = half_counter - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:68" *) 1'h1;
  assign \$7  = scl_enable & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:72" *) scl_toggle;
  assign \$9  = \$8  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:105" *) { 7'h00, read_next };
  assign \$10  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:113" *) counter;
  assign \$12  = { 3'h0, bit_counter } | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:122" *) \$11 ;
  assign \$13  = send_data >> \$12 ;
  assign \$14  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:124" *) bit_counter;
  assign \$15  = byte_counter - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:125" *) 1'h1;
  assign \$16  = byte_counter < (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:126" *) 3'h4;
  assign \$17  = bytes_sent + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:127" *) 1'h1;
  assign \$18  = bit_counter - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:132" *) 1'h1;
  assign \$21  = { 3'h0, bit_counter } | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:142" *) \$20 ;
  assign \$22  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:144" *) bit_counter;
  assign \$23  = byte_counter - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:145" *) 1'h1;
  assign \$24  = bytes_sent + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:146" *) 1'h1;
  assign \$25  = bit_counter - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:151" *) 1'h1;
  assign \$26  = bytes_sent >= (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:155" *) byte_count;
  assign \$27  = bytes_sent >= (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:175" *) byte_count;
  assign \$28  = byte_counter == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:177" *) 2'h3;
  assign \$29  = read & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:177" *) \$28 ;
  assign sda_out_enable = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\i2c.py:77" *) d_out;
  assign \$30  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) i2c_fsm_state;
  assign \$31  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 1'h1;
  assign \$32  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h2;
  assign \$33  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h3;
  assign \$34  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 3'h4;
  assign \$35  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 3'h5;
  assign \$36  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 3'h6;
  assign \$37  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 3'h7;
  assign \$38  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 4'h8;
  assign \$39  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 4'h9;
  assign \$40  = i2c_fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 4'ha;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      \$42  = 5'h1e;
    end else begin
      \$42  = \$3 [4:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      \$43  = 4'he;
    end else begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
        \$43  = 4'hf;
      end else begin
        \$43  = \$6 [3:0];
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$44  = scl_high_sample;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
    end else begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
        \$44  = scl;
      end else begin
        \$44  = 1'h0;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$45  = scl_low_sample;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
    end else begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
        \$45  = \$5 ;
      end else begin
        \$45  = 1'h0;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$46  = busy;
    casez (i2c_fsm_state)
      4'h0:
          \$46  = 1'h0;
      4'h1:
          \$46  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$47  = d_out;
    casez (i2c_fsm_state)
      4'h0:
          \$47  = 1'h1;
      4'h1:
          if (scl_high_sample) begin
            \$47  = 1'h0;
          end
      4'h2:
          if (scl_low_sample) begin
            \$47  = \$13 ;
          end
      4'h4:
          if (scl_high_sample) begin
            \$47  = 1'h0;
          end
      4'h5:
          /* empty */;
      4'h6:
          if (scl_low_sample) begin
            \$47  = \$26 ;
          end
      4'h7:
          /* empty */;
      4'h3:
          if (scl_low_sample) begin
            \$47  = 1'h1;
          end
      4'h9:
          /* empty */;
      4'h8:
        begin
          if (scl_low_sample) begin
            \$47  = 1'h0;
          end
          if (scl_high_sample) begin
            \$47  = 1'h1;
          end
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$48  = scl_enable;
    casez (i2c_fsm_state)
      4'h0:
          \$48  = 1'h0;
      4'h1:
          if (\$10 ) begin
            \$48  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$49  = read_next;
    casez (i2c_fsm_state)
      4'h0:
          \$49  = 1'h0;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h3:
          /* empty */;
      4'h9:
          if (scl_high_sample) begin
            (* full_case = 32'd1 *)
            if (sda_in) begin
            end else begin
              if (\$27 ) begin
              end else if (\$29 ) begin
                \$49  = 1'h1;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$50  = i2c_fsm_state;
    casez (i2c_fsm_state)
      4'h0:
          if (start) begin
            \$50  = 4'h1;
          end
      4'h1:
          if (scl_high_sample) begin
            \$50  = 4'h2;
          end
      4'h2:
          if (scl_low_sample) begin
            if (\$14 ) begin
              \$50  = 4'h3;
            end
          end
      4'h4:
          if (scl_high_sample) begin
            \$50  = 4'h5;
          end
      4'h5:
          if (scl_high_sample) begin
            if (\$22 ) begin
              \$50  = 4'h6;
            end
          end
      4'h6:
          if (scl_low_sample) begin
            \$50  = 4'h7;
          end
      4'h7:
          if (scl_low_sample) begin
            (* full_case = 32'd1 *)
            if (d_out) begin
              \$50  = 4'h8;
            end else begin
              \$50  = 4'h5;
            end
          end
      4'h3:
          if (scl_low_sample) begin
            \$50  = 4'h9;
          end
      4'h9:
          if (scl_high_sample) begin
            (* full_case = 32'd1 *)
            if (sda_in) begin
              \$50  = 4'ha;
            end else begin
              (* full_case = 32'd1 *)
              if (\$27 ) begin
                \$50  = 4'h8;
              end else if (\$29 ) begin
                \$50  = 4'h1;
              end else if (read_next) begin
                \$50  = 4'h5;
              end else begin
                \$50  = 4'h2;
              end
            end
          end
      4'h8:
          if (scl_high_sample) begin
            \$50  = 4'h0;
          end
      4'ha:
          \$50  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$51  = error;
    casez (i2c_fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          \$51  = 1'h0;
      4'h2:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h3:
          /* empty */;
      4'h9:
          /* empty */;
      4'h8:
          /* empty */;
      4'ha:
          \$51  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$52  = byte_counter;
    casez (i2c_fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          \$52  = 3'h5;
      4'h2:
          if (scl_low_sample) begin
            if (\$14 ) begin
              \$52  = \$15 [2:0];
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (scl_high_sample) begin
            if (\$22 ) begin
              \$52  = \$23 [2:0];
            end
          end
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h3:
          /* empty */;
      4'h9:
          if (scl_high_sample) begin
            (* full_case = 32'd1 *)
            if (sda_in) begin
            end else begin
              if (\$27 ) begin
              end else if (\$29 ) begin
                \$52  = 3'h5;
              end else if (read_next) begin
                \$52  = 3'h3;
              end
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$53  = bytes_sent;
    casez (i2c_fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          \$53  = 3'h0;
      4'h2:
          if (scl_low_sample) begin
            if (\$14 ) begin
              if (\$16 ) begin
                \$53  = \$17 [2:0];
              end
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (scl_high_sample) begin
            if (\$22 ) begin
              \$53  = \$24 [2:0];
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$54  = bit_counter;
    casez (i2c_fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          \$54  = 3'h7;
      4'h2:
          if (scl_low_sample) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              \$54  = 3'h7;
            end else begin
              \$54  = \$18 [2:0];
            end
          end
      4'h4:
          /* empty */;
      4'h5:
          if (scl_high_sample) begin
            (* full_case = 32'd1 *)
            if (\$22 ) begin
              \$54  = 3'h7;
            end else begin
              \$54  = \$25 [2:0];
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$55  = read_data;
    casez (i2c_fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          \$55  = 32'd0;
      4'h2:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          if (scl_high_sample) begin
            casez (\$21 )
              6'h00:
                  \$55 [0] = \$19 ;
              6'h01:
                  \$55 [1] = \$19 ;
              6'h02:
                  \$55 [2] = \$19 ;
              6'h03:
                  \$55 [3] = \$19 ;
              6'h04:
                  \$55 [4] = \$19 ;
              6'h05:
                  \$55 [5] = \$19 ;
              6'h06:
                  \$55 [6] = \$19 ;
              6'h07:
                  \$55 [7] = \$19 ;
              6'h08:
                  \$55 [8] = \$19 ;
              6'h09:
                  \$55 [9] = \$19 ;
              6'h0a:
                  \$55 [10] = \$19 ;
              6'h0b:
                  \$55 [11] = \$19 ;
              6'h0c:
                  \$55 [12] = \$19 ;
              6'h0d:
                  \$55 [13] = \$19 ;
              6'h0e:
                  \$55 [14] = \$19 ;
              6'h0f:
                  \$55 [15] = \$19 ;
              6'h10:
                  \$55 [16] = \$19 ;
              6'h11:
                  \$55 [17] = \$19 ;
              6'h12:
                  \$55 [18] = \$19 ;
              6'h13:
                  \$55 [19] = \$19 ;
              6'h14:
                  \$55 [20] = \$19 ;
              6'h15:
                  \$55 [21] = \$19 ;
              6'h16:
                  \$55 [22] = \$19 ;
              6'h17:
                  \$55 [23] = \$19 ;
              6'h18:
                  \$55 [24] = \$19 ;
              6'h19:
                  \$55 [25] = \$19 ;
              6'h1a:
                  \$55 [26] = \$19 ;
              6'h1b:
                  \$55 [27] = \$19 ;
              6'h1c:
                  \$55 [28] = \$19 ;
              6'h1d:
                  \$55 [29] = \$19 ;
              6'h1e:
                  \$55 [30] = \$19 ;
              6'h1f:
                  \$55 [31] = \$19 ;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$56  = send_data;
    casez (i2c_fsm_state)
      4'h0:
          /* empty */;
      4'h1:
        begin
          \$56 [47:40] = \$9 ;
          \$56 [39:32] = register_address;
          \$56 [31:24] = data_in[7:0];
          \$56 [23:16] = data_in[15:8];
          \$56 [15:8] = data_in[23:16];
          \$56 [7:0] = data_in[31:24];
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$57  = data_out;
    casez (i2c_fsm_state)
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h4:
          /* empty */;
      4'h5:
          /* empty */;
      4'h6:
          /* empty */;
      4'h7:
          /* empty */;
      4'h3:
          /* empty */;
      4'h9:
          /* empty */;
      4'h8:
        begin
          \$57 [7:0] = read_data[31:24];
          \$57 [15:8] = read_data[23:16];
          \$57 [23:16] = read_data[15:8];
          \$57 [31:24] = read_data[7:0];
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$41  = scl_toggle;
    if (\$1 ) begin
      \$41  = \$2 ;
    end
  end
  assign \$8  = { device_address, 1'h0 };
  assign \$11  = { byte_counter, 3'h0 };
  assign \$19  = 1'h1;
  assign \$20  = { byte_counter, 3'h0 };
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:78" *)
(* generator = "Amaranth" *)
module \Controller.serial_card_shift_dma_1 (sync_100_rst, read_bram_address_input, write_bram_address_input, read_node_address_input, write_node_address_input, data_input, read_complete_input, write_complete_input, bram_read_data, write_bram_address_output, read_bram_address_output, write_node_address_output, read_node_address_output, write_complete_output, data_output, read_complete_output, bram_address, bram_write_data, bram_write_enable, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$11  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  reg \$15 ;
  reg [31:0] \$16 ;
  reg \$17 ;
  reg \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  output [15:0] bram_address;
  reg [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:70" *)
  input [31:0] bram_read_data;
  wire [31:0] bram_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  output [31:0] bram_write_data;
  reg [31:0] bram_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  output bram_write_enable;
  reg bram_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  reg [31:0] buf_data = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  reg [15:0] buf_read_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  reg buf_read_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  reg [7:0] buf_read_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  reg [15:0] buf_write_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  reg buf_write_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  reg [7:0] buf_write_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  input [31:0] data_input;
  wire [31:0] data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  output [31:0] data_output;
  reg [31:0] data_output = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  input [15:0] read_bram_address_input;
  wire [15:0] read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  output [15:0] read_bram_address_output;
  reg [15:0] read_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  input read_complete_input;
  wire read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  output read_complete_output;
  reg read_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  reg read_next = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  input [7:0] read_node_address_input;
  wire [7:0] read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  output [7:0] read_node_address_output;
  reg [7:0] read_node_address_output = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  input [15:0] write_bram_address_input;
  wire [15:0] write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  output [15:0] write_bram_address_output;
  reg [15:0] write_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  input write_complete_input;
  wire write_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  output write_complete_output;
  reg write_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  input [7:0] write_node_address_input;
  wire [7:0] write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  output [7:0] write_node_address_output;
  reg [7:0] write_node_address_output = 8'h00;
  assign \$1  = read_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) 1'h1;
  assign \$2  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$3  = \$1  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$2 ;
  assign \$4  = write_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) 1'h1;
  assign \$5  = \$4  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$6  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$7  = \$5  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$6 ;
  assign \$8  = read_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) 1'h1;
  assign \$9  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$10  = \$8  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$9 ;
  assign \$11  = write_node_address_input == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) 1'h1;
  assign \$12  = \$11  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$13  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$14  = \$12  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$13 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_bram_address <= 16'h0000;
    else buf_write_bram_address <= write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_bram_address <= 16'h0000;
    else buf_read_bram_address <= read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_node_address <= 8'h00;
    else buf_write_node_address <= write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_node_address <= 8'h00;
    else buf_read_node_address <= read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_bram_address_output <= 16'h0000;
    else write_bram_address_output <= buf_write_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_bram_address_output <= 16'h0000;
    else read_bram_address_output <= buf_read_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_node_address_output <= 8'h00;
    else write_node_address_output <= buf_write_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_node_address_output <= 8'h00;
    else read_node_address_output <= buf_read_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_data <= 32'd0;
    else buf_data <= data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_complete <= 1'h0;
    else buf_read_complete <= read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_complete_output <= 1'h0;
    else write_complete_output <= buf_write_complete;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_next <= 1'h0;
    else read_next <= \$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) data_output <= 32'd0;
    else data_output <= \$16 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_complete_output <= 1'h0;
    else read_complete_output <= \$17 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_complete <= 1'h0;
    else buf_write_complete <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$15  = read_next;
    if (\$3 ) begin
      \$15  = 1'h1;
    end else if (read_next) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$16  = bram_read_data;
    end else begin
      \$16  = buf_data;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$17  = 1'h1;
    end else begin
      \$17  = buf_read_complete;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    (* full_case = 32'd1 *)
    if (\$7 ) begin
      \$18  = 1'h1;
    end else begin
      \$18  = write_complete_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    bram_address = 16'h0000;
    if (\$10 ) begin
      bram_address = read_bram_address_input;
    end
    if (\$14 ) begin
      bram_address = write_bram_address_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    bram_write_data = 32'd0;
    if (\$14 ) begin
      bram_write_data = data_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    (* full_case = 32'd1 *)
    if (\$14 ) begin
      bram_write_enable = 1'h1;
    end else begin
      bram_write_enable = 1'h0;
    end
  end
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:184" *)
(* generator = "Amaranth" *)
module \Controller.shift_dma (sync_100_rst, instruction_memory_read_data, bram_read_data, start, \read_node_address_input$34 , \write_node_address_input$36 , \read_bram_address_input$38 , \write_bram_address_input$40 , \data_input$42 , read_complete_input, write_complete_input, data_memory_address, busy, instruction_memory_address, write_bram_address_output, read_bram_address_output, write_node_address_output, read_node_address_output, write_complete_output, data_output, read_complete_output
, data_memory_write_data, data_memory_write_enable, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$12  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire [16:0] \$12 ;
  wire [16:0] \$13 ;
  wire [16:0] \$14 ;
  reg [7:0] \$15 ;
  reg [7:0] \$16 ;
  reg [15:0] \$17 ;
  reg [15:0] \$18 ;
  reg [31:0] \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg \$21 ;
  reg \$22 ;
  reg [15:0] \$23 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  wire [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:173" *)
  input [31:0] bram_read_data;
  wire [31:0] bram_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  wire [31:0] bram_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  wire bram_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:167" *)
  output busy;
  reg busy = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  reg [31:0] data_input = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:159" *)
  input [31:0] \data_input$42 ;
  wire [31:0] \data_input$42 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:172" *)
  output [15:0] data_memory_address;
  wire [15:0] data_memory_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:173" *)
  wire [31:0] data_memory_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  output [31:0] data_memory_write_data;
  wire [31:0] data_memory_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  output data_memory_write_enable;
  wire data_memory_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  output [31:0] data_output;
  wire [31:0] data_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  wire [31:0] \data_output$23 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:191" *)
  wire [15:0] destination_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:189" *)
  wire [7:0] destination_node;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:192" *)
  wire [3:0] instruction;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:169" *)
  output [15:0] instruction_memory_address;
  reg [15:0] instruction_memory_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:170" *)
  input [63:0] instruction_memory_read_data;
  wire [63:0] instruction_memory_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:194" *)
  reg opening_available;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  reg [15:0] read_bram_address_input = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:155" *)
  input [15:0] \read_bram_address_input$38 ;
  wire [15:0] \read_bram_address_input$38 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  output [15:0] read_bram_address_output;
  wire [15:0] read_bram_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  wire [15:0] \read_bram_address_output$19 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:161" *)
  input read_complete_input;
  wire read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  reg \read_complete_input$43  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  output read_complete_output;
  wire read_complete_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  wire \read_complete_output$25 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  reg [7:0] read_node_address_input = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:151" *)
  input [7:0] \read_node_address_input$34 ;
  wire [7:0] \read_node_address_input$34 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  output [7:0] read_node_address_output;
  wire [7:0] read_node_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  wire [7:0] \read_node_address_output$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:190" *)
  wire [15:0] source_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:188" *)
  wire [7:0] source_node;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:166" *)
  input start;
  wire start;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  reg [15:0] write_bram_address_input = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:157" *)
  input [15:0] \write_bram_address_input$40 ;
  wire [15:0] \write_bram_address_input$40 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  output [15:0] write_bram_address_output;
  wire [15:0] write_bram_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  wire [15:0] \write_bram_address_output$21 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:163" *)
  input write_complete_input;
  wire write_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  reg \write_complete_input$44  = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  output write_complete_output;
  wire write_complete_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  wire \write_complete_output$27 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  reg [7:0] write_node_address_input = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:153" *)
  input [7:0] \write_node_address_input$36 ;
  wire [7:0] \write_node_address_input$36 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  output [7:0] write_node_address_output;
  wire [7:0] write_node_address_output;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  wire [7:0] \write_node_address_output$17 ;
  assign \$1  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:249" *) read_complete_input;
  assign \$2  = write_complete_input | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:249" *) \$1 ;
  assign \$3  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:249" *) read_complete_input;
  assign \$4  = write_complete_input | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:249" *) \$3 ;
  assign \$5  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:262" *) instruction_memory_read_data[51:48];
  assign \$6  = instruction_memory_address != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:262" *) 8'hff;
  assign \$7  = \$5  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:262" *) \$6 ;
  assign \$8  = start | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:262" *) busy;
  assign \$9  = \$7  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:262" *) \$8 ;
  assign \$10  = instruction_memory_read_data[51:48] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:265" *) 2'h2;
  assign \$11  = instruction_memory_read_data[51:48] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:280" *) 1'h1;
  assign \$12  = instruction_memory_address + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:277" *) 1'h1;
  assign \$13  = instruction_memory_address + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:282" *) 1'h1;
  assign \$14  = instruction_memory_address + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:296" *) 1'h1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_node_address_input <= 8'h00;
    else read_node_address_input <= \$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_node_address_input <= 8'h00;
    else write_node_address_input <= \$16 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_bram_address_input <= 16'h0000;
    else read_bram_address_input <= \$17 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_bram_address_input <= 16'h0000;
    else write_bram_address_input <= \$18 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) data_input <= 32'd0;
    else data_input <= \$19 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) \read_complete_input$43  <= 1'h0;
    else \read_complete_input$43  <= \$20 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) \write_complete_input$44  <= 1'h0;
    else \write_complete_input$44  <= \$21 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:167" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) busy <= 1'h0;
    else busy <= \$22 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:169" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) instruction_memory_address <= 16'h0000;
    else instruction_memory_address <= \$23 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:197" *)
  \Controller.shift_dma.dma_node  dma_node (
    .bram_address(bram_address),
    .bram_read_data(bram_read_data),
    .bram_write_data(data_memory_write_data),
    .bram_write_enable(data_memory_write_enable),
    .data_input(data_input),
    .data_output(data_output),
    .read_bram_address_input(read_bram_address_input),
    .read_bram_address_output(read_bram_address_output),
    .read_complete_input(\read_complete_input$43 ),
    .read_complete_output(read_complete_output),
    .read_node_address_input(read_node_address_input),
    .read_node_address_output(read_node_address_output),
    .sync_100_clk(sync_100_clk),
    .sync_100_rst(sync_100_rst),
    .write_bram_address_input(write_bram_address_input),
    .write_bram_address_output(write_bram_address_output),
    .write_complete_input(\write_complete_input$44 ),
    .write_complete_output(write_complete_output),
    .write_node_address_input(write_node_address_input),
    .write_node_address_output(write_node_address_output)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      opening_available = 1'h1;
    end else begin
      opening_available = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$15  = read_node_address_input;
    (* full_case = 32'd1 *)
    if (\$4 ) begin
    end else begin
      \$15  = \read_node_address_input$34 ;
    end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$15  = instruction_memory_read_data[7:0];
        end
      end else if (\$11 ) begin
        if (opening_available) begin
          \$15  = 8'h00;
        end
      end else begin
        if (opening_available) begin
          \$15  = 8'h00;
        end
      end
    end else begin
      if (opening_available) begin
        \$15  = 8'h00;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$16  = write_node_address_input;
    (* full_case = 32'd1 *)
    if (\$4 ) begin
    end else begin
      \$16  = \write_node_address_input$36 ;
    end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$16  = instruction_memory_read_data[15:8];
        end
      end else if (\$11 ) begin
        if (opening_available) begin
          \$16  = 8'h00;
        end
      end else begin
        if (opening_available) begin
          \$16  = 8'h00;
        end
      end
    end else begin
      if (opening_available) begin
        \$16  = 8'h00;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$17  = read_bram_address_input;
    (* full_case = 32'd1 *)
    if (\$4 ) begin
    end else begin
      \$17  = \read_bram_address_input$38 ;
    end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$17  = instruction_memory_read_data[31:16];
        end
      end else if (\$11 ) begin
        if (opening_available) begin
          \$17  = 16'h0000;
        end
      end else begin
        if (opening_available) begin
          \$17  = 16'h0000;
        end
      end
    end else begin
      if (opening_available) begin
        \$17  = 16'h0000;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$18  = write_bram_address_input;
    (* full_case = 32'd1 *)
    if (\$4 ) begin
    end else begin
      \$18  = \write_bram_address_input$40 ;
    end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$18  = instruction_memory_read_data[47:32];
        end
      end else if (\$11 ) begin
        if (opening_available) begin
          \$18  = 16'h0000;
        end
      end else begin
        if (opening_available) begin
          \$18  = 16'h0000;
        end
      end
    end else begin
      if (opening_available) begin
        \$18  = 16'h0000;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$19  = data_input;
    (* full_case = 32'd1 *)
    if (\$4 ) begin
    end else begin
      \$19  = \data_input$42 ;
    end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$19  = 32'd0;
        end
      end else if (\$11 ) begin
        if (opening_available) begin
          \$19  = 32'd0;
        end
      end else begin
        if (opening_available) begin
          \$19  = 32'd0;
        end
      end
    end else begin
      if (opening_available) begin
        \$19  = 32'd0;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$20  = \read_complete_input$43 ;
    (* full_case = 32'd1 *)
    if (\$4 ) begin
    end else begin
      \$20  = read_complete_input;
    end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$20  = 1'h0;
        end
      end else if (\$11 ) begin
        if (opening_available) begin
          \$20  = 1'h1;
        end
      end else begin
        if (opening_available) begin
          \$20  = 1'h1;
        end
      end
    end else begin
      if (opening_available) begin
        \$20  = 1'h1;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$21  = \write_complete_input$44 ;
    (* full_case = 32'd1 *)
    if (\$4 ) begin
    end else begin
      \$21  = write_complete_input;
    end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$21  = 1'h0;
        end
      end else if (\$11 ) begin
        if (opening_available) begin
          \$21  = 1'h1;
        end
      end else begin
        if (opening_available) begin
          \$21  = 1'h1;
        end
      end
    end else begin
      if (opening_available) begin
        \$21  = 1'h1;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      \$22  = 1'h1;
    end else begin
      \$22  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$23  = instruction_memory_address;
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      (* full_case = 32'd1 *)
      if (\$10 ) begin
        if (opening_available) begin
          \$23  = \$12 [15:0];
        end
      end else if (\$11 ) begin
        \$23  = \$13 [15:0];
      end else begin
        \$23  = \$14 [15:0];
      end
    end else begin
      if (start) begin
        \$23  = 16'h0000;
      end
    end
  end
  assign source_node = instruction_memory_read_data[7:0];
  assign destination_node = instruction_memory_read_data[15:8];
  assign source_address = instruction_memory_read_data[31:16];
  assign destination_address = instruction_memory_read_data[47:32];
  assign instruction = instruction_memory_read_data[51:48];
  assign bram_write_data = data_memory_write_data;
  assign bram_write_enable = data_memory_write_enable;
  assign data_memory_read_data = bram_read_data;
  assign \read_node_address_output$15  = read_node_address_output;
  assign \write_node_address_output$17  = write_node_address_output;
  assign \read_bram_address_output$19  = read_bram_address_output;
  assign \write_bram_address_output$21  = write_bram_address_output;
  assign \data_output$23  = data_output;
  assign \read_complete_output$25  = read_complete_output;
  assign \write_complete_output$27  = write_complete_output;
  assign data_memory_address = bram_address;
endmodule

(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:78" *)
(* generator = "Amaranth" *)
module \Controller.shift_dma.dma_node (sync_100_rst, bram_read_data, read_node_address_input, write_node_address_input, read_bram_address_input, write_bram_address_input, data_input, read_complete_input, write_complete_input, write_bram_address_output, read_bram_address_output, write_node_address_output, read_node_address_output, write_complete_output, data_output, read_complete_output, bram_address, bram_write_data, bram_write_enable, sync_100_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$13  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  reg \$15 ;
  reg [31:0] \$16 ;
  reg \$17 ;
  reg \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:68" *)
  output [15:0] bram_address;
  reg [15:0] bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:70" *)
  input [31:0] bram_read_data;
  wire [31:0] bram_read_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:69" *)
  output [31:0] bram_write_data;
  reg [31:0] bram_write_data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:71" *)
  output bram_write_enable;
  reg bram_write_enable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  reg [31:0] buf_data = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  reg [15:0] buf_read_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  reg buf_read_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  reg [7:0] buf_read_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  reg [15:0] buf_write_bram_address = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  reg buf_write_complete = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  reg [7:0] buf_write_node_address = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:61" *)
  input [31:0] data_input;
  wire [31:0] data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  output [31:0] data_output;
  reg [31:0] data_output = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:57" *)
  input [15:0] read_bram_address_input;
  wire [15:0] read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  output [15:0] read_bram_address_output;
  reg [15:0] read_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:63" *)
  input read_complete_input;
  wire read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  output read_complete_output;
  reg read_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  reg read_next = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:53" *)
  input [7:0] read_node_address_input;
  wire [7:0] read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  output [7:0] read_node_address_output;
  reg [7:0] read_node_address_output = 8'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_clk;
  wire sync_100_clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\controller.py:272" *)
  input sync_100_rst;
  wire sync_100_rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:59" *)
  input [15:0] write_bram_address_input;
  wire [15:0] write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  output [15:0] write_bram_address_output;
  reg [15:0] write_bram_address_output = 16'h0000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:65" *)
  input write_complete_input;
  wire write_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  output write_complete_output;
  reg write_complete_output = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:55" *)
  input [7:0] write_node_address_input;
  wire [7:0] write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  output [7:0] write_node_address_output;
  reg [7:0] write_node_address_output = 8'h00;
  assign \$1  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_node_address_input;
  assign \$2  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$3  = \$1  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$2 ;
  assign \$4  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_node_address_input;
  assign \$5  = \$4  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$6  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$7  = \$5  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$6 ;
  assign \$8  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_node_address_input;
  assign \$9  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) read_complete_input;
  assign \$10  = \$8  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:111" *) \$9 ;
  assign \$11  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_node_address_input;
  assign \$12  = \$11  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) read_complete_input;
  assign \$13  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) write_complete_input;
  assign \$14  = \$12  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:127" *) \$13 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:83" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_bram_address <= 16'h0000;
    else buf_write_bram_address <= write_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:84" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_bram_address <= 16'h0000;
    else buf_read_bram_address <= read_bram_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:85" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_node_address <= 8'h00;
    else buf_write_node_address <= write_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:86" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_node_address <= 8'h00;
    else buf_read_node_address <= read_node_address_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:60" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_bram_address_output <= 16'h0000;
    else write_bram_address_output <= buf_write_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:58" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_bram_address_output <= 16'h0000;
    else read_bram_address_output <= buf_read_bram_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:56" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_node_address_output <= 8'h00;
    else write_node_address_output <= buf_write_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:54" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_node_address_output <= 8'h00;
    else read_node_address_output <= buf_read_node_address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:87" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_data <= 32'd0;
    else buf_data <= data_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:88" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_read_complete <= 1'h0;
    else buf_read_complete <= read_complete_input;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:66" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) write_complete_output <= 1'h0;
    else write_complete_output <= buf_write_complete;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:91" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_next <= 1'h0;
    else read_next <= \$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:62" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) data_output <= 32'd0;
    else data_output <= \$16 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:64" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) read_complete_output <= 1'h0;
    else read_complete_output <= \$17 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\shift_dma.py:89" *)
  always @(posedge sync_100_clk, posedge sync_100_rst)
    if (sync_100_rst) buf_write_complete <= 1'h0;
    else buf_write_complete <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$15  = read_next;
    if (\$3 ) begin
      \$15  = 1'h1;
    end else if (read_next) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$16  = bram_read_data;
    end else begin
      \$16  = buf_data;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    if (read_next) begin
      \$17  = 1'h1;
    end else begin
      \$17  = buf_read_complete;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    if (\$7 ) begin
      \$18  = 1'h1;
    end else begin
      \$18  = write_complete_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    bram_address = 16'h0000;
    if (\$10 ) begin
      bram_address = read_bram_address_input;
    end
    if (\$14 ) begin
      bram_address = write_bram_address_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    bram_write_data = 32'd0;
    if (\$14 ) begin
      bram_write_data = data_input;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    (* full_case = 32'd1 *)
    if (\$14 ) begin
      bram_write_enable = 1'h1;
    end else begin
      bram_write_enable = 1'h0;
    end
  end
endmodule
