/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post99, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:154" *)
(* generator = "Amaranth" *)
module AXI_Master(ARESETN, AWREADY, WREADY, BID, BRESP, BUSER, BVALID, ARREADY, RID, RDATA, RRESP, RLAST, RUSER, RVALID, testTrigger, AWID, AWADDR, AWLEN, AWSIZE, AWBURST, AWLOCK
, AWCACHE, AWPROT, AWREGION, AWQOS, AWUSER, AWVALID, WID, WDATA, WSTRB, WLAST, WUSER, WVALID, BREADY, ARID, ARADDR, ARLEN, ARSIZE, ARBURST, ARLOCK, ARCACHE, ARPROT
, ARREGION, ARQOS, ARUSER, ARVALID, RREADY, LEDdebug, ACLK);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  reg \$10 ;
  reg [2:0] \$11 ;
  reg \$12 ;
  reg \$13 ;
  reg [1:0] \$14 ;
  reg [3:0] \$15 ;
  reg [3:0] \$16 ;
  reg [7:0] \$17 ;
  reg [2:0] \$18 ;
  reg [31:0] \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg [63:0] \$21 ;
  reg \$22 ;
  reg \$23 ;
  reg \$24 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 AXI_Master CLK" *)
  (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME AXI_Master, CLK_DOMAIN controller_firmware_processing_system7_0_0_FCLK_CLK3, FREQ_HZ 200000000, PHASE 0.0, PROTOCOL AXI4, DATA_WIDTH 64, ID_WIDTH 4, ADDR_WIDTH 32, HAS_BURST 0, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 0, SUPPORTS_NARROW_BURST 1, MAX_BURST_LENGTH 256, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, READ_WRITE_MODE READ_WRITE" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:157" *)
  input ACLK;
  wire ACLK;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARADDR" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:74" *)
  output [31:0] ARADDR;
  wire [31:0] ARADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARBURST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:77" *)
  output [1:0] ARBURST;
  wire [1:0] ARBURST;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARQOS" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:82" *)
  output [3:0] ARCACHE;
  wire [3:0] ARCACHE;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 AXI_Master RST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:39" *)
  input ARESETN;
  wire ARESETN;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARQOS" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:82" *)
  output [3:0] ARID;
  wire [3:0] ARID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARLEN" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:75" *)
  output [7:0] ARLEN;
  wire [7:0] ARLEN;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:94" *)
  output ARLOCK;
  wire ARLOCK;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARPROT" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:80" *)
  output [2:0] ARPROT;
  wire [2:0] ARPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARQOS" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:82" *)
  output [3:0] ARQOS;
  wire [3:0] ARQOS;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:85" *)
  input ARREADY;
  wire ARREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARQOS" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:82" *)
  output [3:0] ARREGION;
  wire [3:0] ARREGION;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARPROT" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:80" *)
  output [2:0] ARSIZE;
  wire [2:0] ARSIZE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RUSER" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:92" *)
  output [-1:0] ARUSER;
  wire [-1:0] ARUSER;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:94" *)
  output ARVALID;
  wire ARVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master AWADDR" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:43" *)
  output [31:0] AWADDR;
  reg [31:0] AWADDR = 32'd0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARBURST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:77" *)
  output [1:0] AWBURST;
  wire [1:0] AWBURST;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARQOS" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:82" *)
  output [3:0] AWCACHE;
  wire [3:0] AWCACHE;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master AWID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:42" *)
  output [3:0] AWID;
  reg [3:0] AWID = 4'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARLEN" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:75" *)
  output [7:0] AWLEN;
  wire [7:0] AWLEN;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:94" *)
  output AWLOCK;
  wire AWLOCK;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARPROT" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:80" *)
  output [2:0] AWPROT;
  wire [2:0] AWPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARQOS" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:82" *)
  output [3:0] AWQOS;
  wire [3:0] AWQOS;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master AWREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:54" *)
  input AWREADY;
  wire AWREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master ARQOS" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:82" *)
  output [3:0] AWREGION;
  wire [3:0] AWREGION;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master AWSIZE" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:45" *)
  output [2:0] AWSIZE;
  reg [2:0] AWSIZE = 3'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RUSER" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:92" *)
  output [-1:0] AWUSER;
  wire [-1:0] AWUSER;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master AWVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:53" *)
  output AWVALID;
  reg AWVALID = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master BID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:66" *)
  input [3:0] BID;
  wire [3:0] BID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master BREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:70" *)
  output BREADY;
  reg BREADY = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master BRESP" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:67" *)
  input [1:0] BRESP;
  wire [1:0] BRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RUSER" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:92" *)
  input [-1:0] BUSER;
  wire [-1:0] BUSER;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master BVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:69" *)
  input BVALID;
  wire BVALID;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:97" *)
  output [2:0] LEDdebug;
  reg [2:0] LEDdebug = 3'h7;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RDATA" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:89" *)
  input [63:0] RDATA;
  wire [63:0] RDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:88" *)
  input [3:0] RID;
  wire [3:0] RID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RLAST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:91" *)
  input RLAST;
  wire RLAST;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:94" *)
  output RREADY;
  wire RREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RRESP" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:90" *)
  input [1:0] RRESP;
  wire [1:0] RRESP;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RUSER" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:92" *)
  input [-1:0] RUSER;
  wire [-1:0] RUSER;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:93" *)
  input RVALID;
  wire RVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master WDATA" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:58" *)
  output [63:0] WDATA;
  reg [63:0] WDATA = 64'h0000000000000000;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master WID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:57" *)
  output [3:0] WID;
  reg [3:0] WID = 4'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master WLAST" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:60" *)
  output WLAST;
  reg WLAST = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master WREADY" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:63" *)
  input WREADY;
  wire WREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master WSTRB" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:59" *)
  output [7:0] WSTRB;
  reg [7:0] WSTRB = 8'h00;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master RUSER" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:92" *)
  output [-1:0] WUSER;
  wire [-1:0] WUSER;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 AXI_Master WVALID" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:62" *)
  output WVALID;
  reg WVALID = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:166" *)
  reg awready_set = 1'h0;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 AXI_Master CLK" *)
  (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME AXI_Master, CLK_DOMAIN controller_firmware_processing_system7_0_0_FCLK_CLK3, FREQ_HZ 200000000, PHASE 0.0, PROTOCOL AXI4, DATA_WIDTH 64, ID_WIDTH 4, ADDR_WIDTH 32, HAS_BURST 0, HAS_CACHE 0, HAS_LOCK 0, HAS_PROT 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 0, SUPPORTS_NARROW_BURST 1, MAX_BURST_LENGTH 256, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, READ_WRITE_MODE READ_WRITE" *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:157" *)
  wire clk;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:170" *)
  reg last_testTrigger = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:157" *)
  wire rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:96" *)
  input testTrigger;
  wire testTrigger;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:167" *)
  reg wready_set = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:169" *)
  reg write_trigger = 1'h0;
  assign rst = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:160" *) ARESETN;
  assign \$1  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) fsm_state;
  assign \$2  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 1'h1;
  assign \$3  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h2;
  assign \$4  = fsm_state == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\venv\\lib\\site-packages\\amaranth\\hdl\\_dsl.py:490" *) 2'h3;
  assign \$5  = testTrigger != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:172" *) last_testTrigger;
  assign \$7  = \$5  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:172" *) \$6 ;
  assign \$8  = AWREADY | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:209" *) awready_set;
  assign \$9  = WREADY | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:211" *) wready_set;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:169" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) write_trigger <= 1'h0;
    else write_trigger <= \$10 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:170" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) last_testTrigger <= 1'h0;
    else last_testTrigger <= testTrigger;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:97" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) LEDdebug <= 3'h7;
    else LEDdebug <= \$11 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:166" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) awready_set <= 1'h0;
    else awready_set <= \$12 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:167" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) wready_set <= 1'h0;
    else wready_set <= \$13 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\contextlib.py:142" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) fsm_state <= 2'h0;
    else fsm_state <= \$14 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:42" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) AWID <= 4'h0;
    else AWID <= \$15 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:57" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) WID <= 4'h0;
    else WID <= \$16 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:59" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) WSTRB <= 8'h00;
    else WSTRB <= \$17 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:45" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) AWSIZE <= 3'h0;
    else AWSIZE <= \$18 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:43" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) AWADDR <= 32'd0;
    else AWADDR <= \$19 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:53" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) AWVALID <= 1'h0;
    else AWVALID <= \$20 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:58" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) WDATA <= 64'h0000000000000000;
    else WDATA <= \$21 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:62" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) WVALID <= 1'h0;
    else WVALID <= \$22 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:60" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) WLAST <= 1'h0;
    else WLAST <= \$23 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\src\\axi.py:70" *)
  always @(posedge ACLK, negedge ARESETN)
    if (!ARESETN) BREADY <= 1'h0;
    else BREADY <= \$24 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$7 ) begin
      \$10  = 1'h1;
    end else begin
      \$10  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          \$11  = 3'h7;
      2'h1:
          \$11  = 3'h6;
      2'h2:
          \$11  = 3'h5;
      2'h3:
          \$11  = 3'h3;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = awready_set;
    casez (fsm_state)
      2'h0:
          if (write_trigger) begin
            \$12  = 1'h0;
          end
      2'h1:
          if (AWREADY) begin
            \$12  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = wready_set;
    casez (fsm_state)
      2'h0:
          if (write_trigger) begin
            \$13  = 1'h0;
          end
      2'h1:
          if (WREADY) begin
            \$13  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (write_trigger) begin
            \$14  = 2'h1;
          end
      2'h1:
          \$14  = 2'h2;
      2'h2:
          if (\$9 ) begin
            \$14  = 2'h3;
          end
      2'h3:
          if (BVALID) begin
            \$14  = 2'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = AWID;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$15  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$16  = WID;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$16  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$17  = WSTRB;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$17  = 8'hff;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$18  = AWSIZE;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$18  = 3'h6;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$19  = AWADDR;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$19  = 32'd983136;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$20  = AWVALID;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$20  = 1'h1;
      2'h2:
          if (\$8 ) begin
            \$20  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$21  = WDATA;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$21  = 64'h0000000012345678;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$22  = WVALID;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$22  = 1'h1;
      2'h2:
          if (\$9 ) begin
            \$22  = 1'h0;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$23  = WLAST;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$23  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$24  = BREADY;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          \$24  = 1'h1;
      2'h2:
          /* empty */;
      2'h3:
          if (BVALID) begin
            \$24  = 1'h0;
          end
    endcase
  end
  assign clk = ACLK;
  assign AWLEN = 8'h00;
  assign AWBURST = 2'h0;
  assign AWLOCK = 1'h0;
  assign AWCACHE = 4'h0;
  assign AWPROT = 3'h0;
  assign AWREGION = 4'h0;
  assign AWQOS = 4'h0;
  assign ARID = 4'h0;
  assign ARADDR = 32'd0;
  assign ARLEN = 8'h00;
  assign ARSIZE = 3'h0;
  assign ARBURST = 2'h0;
  assign ARLOCK = 1'h0;
  assign ARCACHE = 4'h0;
  assign ARPROT = 3'h0;
  assign ARREGION = 4'h0;
  assign ARQOS = 4'h0;
  assign ARVALID = 1'h0;
  assign RREADY = 1'h0;
  assign \$6  = testTrigger;
endmodule
