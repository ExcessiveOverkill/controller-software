/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post98, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:74" *)
(* generator = "Amaranth" *)
module dma(peripheral_readData_1, peripheral_readData_2, peripheral_readData_3, peripheral_readData_4, configAddress, configWriteData, configWriteEnable, address, writeData, writeEnable, clk, rst, peripheral_address_0, peripheral_writeData_0, peripheral_writeEnable_0, peripheral_address_1, peripheral_writeData_1, peripheral_writeEnable_1, peripheral_address_2, peripheral_writeData_2, peripheral_writeEnable_2
, peripheral_address_3, peripheral_writeData_3, peripheral_writeEnable_3, peripheral_address_4, peripheral_writeData_4, peripheral_writeEnable_4, configReadData, programDone, programNotFinishedFault, readData, peripheral_readData_0);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$100 ;
  wire \$101 ;
  wire \$102 ;
  wire \$103 ;
  wire \$104 ;
  wire \$105 ;
  wire \$106 ;
  wire \$107 ;
  wire \$108 ;
  wire \$109 ;
  wire [24:0] \$11 ;
  wire \$110 ;
  wire \$111 ;
  wire \$112 ;
  wire \$113 ;
  wire \$114 ;
  wire \$115 ;
  wire \$116 ;
  wire \$117 ;
  wire \$118 ;
  wire \$119 ;
  wire \$12 ;
  wire \$120 ;
  wire \$121 ;
  wire \$122 ;
  wire \$123 ;
  wire \$124 ;
  wire \$125 ;
  wire \$126 ;
  wire \$127 ;
  wire \$128 ;
  wire \$129 ;
  wire \$13 ;
  wire \$130 ;
  wire \$131 ;
  wire \$132 ;
  wire \$133 ;
  wire \$134 ;
  wire \$135 ;
  wire \$136 ;
  wire \$137 ;
  wire \$138 ;
  wire \$139 ;
  wire \$14 ;
  wire \$140 ;
  wire \$141 ;
  wire \$142 ;
  wire \$143 ;
  wire \$144 ;
  wire \$145 ;
  wire \$146 ;
  wire \$147 ;
  wire \$148 ;
  wire \$149 ;
  wire \$15 ;
  wire \$150 ;
  wire \$151 ;
  wire \$152 ;
  wire \$153 ;
  wire \$154 ;
  reg [6:0] \$155 ;
  reg \$156 ;
  reg [31:0] \$157 ;
  reg [23:0] \$158 ;
  reg [1:0] \$159 ;
  wire \$16 ;
  reg [23:0] \$160 ;
  reg \$161 ;
  reg \$162 ;
  reg \$163 ;
  reg \$164 ;
  wire [31:0] \$17 ;
  wire [31:0] \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire [7:0] \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire \$69 ;
  wire \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  wire \$76 ;
  wire \$77 ;
  wire \$78 ;
  wire \$79 ;
  wire \$8 ;
  wire \$80 ;
  wire \$81 ;
  wire \$82 ;
  wire \$83 ;
  wire \$84 ;
  wire \$85 ;
  wire \$86 ;
  wire \$87 ;
  wire \$88 ;
  wire \$89 ;
  wire \$9 ;
  wire \$90 ;
  wire \$91 ;
  wire \$92 ;
  wire \$93 ;
  wire \$94 ;
  wire \$95 ;
  wire \$96 ;
  wire \$97 ;
  wire \$98 ;
  wire \$99 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:140" *)
  input [15:0] address;
  wire [15:0] address;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:93" *)
  reg allowSkip = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:49" *)
  input [15:0] configAddress;
  wire [15:0] configAddress;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:51" *)
  output [31:0] configReadData;
  reg [31:0] configReadData = 32'd0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:50" *)
  input [31:0] configWriteData;
  wire [31:0] configWriteData;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:52" *)
  input configWriteEnable;
  wire configWriteEnable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:79" *)
  reg [6:0] currentInstructionStep = 7'h00;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:188" *)
  reg [31:0] data_node_0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [6:0] externalReadPort__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [6:0] \externalReadPort__addr$50 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [6:0] \externalReadPort__addr$55 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [15:0] externalReadPort__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [31:0] \externalReadPort__data$54 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [31:0] \externalReadPort__data$59 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:401" *)
  reg [6:0] externalWritePort__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:401" *)
  reg [6:0] \externalWritePort__addr$51 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:401" *)
  reg [6:0] \externalWritePort__addr$56 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:402" *)
  reg [15:0] externalWritePort__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:402" *)
  reg [31:0] \externalWritePort__data$52 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:402" *)
  reg [31:0] \externalWritePort__data$57 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:400" *)
  reg externalWritePort__en;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:400" *)
  reg \externalWritePort__en$53 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:400" *)
  reg \externalWritePort__en$58 ;
  (* init = 7'h00 *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  wire [6:0] instructionReadPort__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [15:0] instructionReadPort__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:39" *)
  output [15:0] peripheral_address_0;
  reg [15:0] peripheral_address_0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:39" *)
  output [15:0] peripheral_address_1;
  reg [15:0] peripheral_address_1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:39" *)
  output [15:0] peripheral_address_2;
  reg [15:0] peripheral_address_2;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:39" *)
  output [15:0] peripheral_address_3;
  reg [15:0] peripheral_address_3;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:39" *)
  output [15:0] peripheral_address_4;
  reg [15:0] peripheral_address_4;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:41" *)
  input [31:0] peripheral_readData_0;
  wire [31:0] peripheral_readData_0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:41" *)
  input [31:0] peripheral_readData_1;
  wire [31:0] peripheral_readData_1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:41" *)
  input [31:0] peripheral_readData_2;
  wire [31:0] peripheral_readData_2;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:41" *)
  input [31:0] peripheral_readData_3;
  wire [31:0] peripheral_readData_3;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:41" *)
  input [31:0] peripheral_readData_4;
  wire [31:0] peripheral_readData_4;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:40" *)
  output [31:0] peripheral_writeData_0;
  reg [31:0] peripheral_writeData_0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:40" *)
  output [31:0] peripheral_writeData_1;
  reg [31:0] peripheral_writeData_1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:40" *)
  output [31:0] peripheral_writeData_2;
  reg [31:0] peripheral_writeData_2;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:40" *)
  output [31:0] peripheral_writeData_3;
  reg [31:0] peripheral_writeData_3;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:40" *)
  output [31:0] peripheral_writeData_4;
  reg [31:0] peripheral_writeData_4;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:42" *)
  output peripheral_writeEnable_0;
  reg peripheral_writeEnable_0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:42" *)
  output peripheral_writeEnable_1;
  reg peripheral_writeEnable_1;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:42" *)
  output peripheral_writeEnable_2;
  reg peripheral_writeEnable_2;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:42" *)
  output peripheral_writeEnable_3;
  reg peripheral_writeEnable_3;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:42" *)
  output peripheral_writeEnable_4;
  reg peripheral_writeEnable_4;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:95" *)
  output programDone;
  reg programDone;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:97" *)
  output programNotFinishedFault;
  reg programNotFinishedFault = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:142" *)
  output [31:0] readData;
  reg [31:0] readData;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:77" *)
  reg [1:0] selectedMemType = 2'h0;
  (* init = {0{1'b0}} *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:76" *)
  wire [-1:0] selectedWorker;
  (* init = 7'h00 *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  wire [6:0] sourcesReadPort__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [31:0] sourcesReadPort__data;
  (* init = 7'h00 *)
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:240" *)
  wire [6:0] targetsReadPort__addr;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\lib\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [31:0] targetsReadPort__data;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:82" *)
  reg [23:0] timer = 24'h000000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:81" *)
  reg [23:0] timerSetpoint = 24'h000000;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:84" *)
  reg triggerProgram = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:92" *)
  reg workerDone = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:167" *)
  reg worker_0_read_ready = 1'h0;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:141" *)
  input [31:0] writeData;
  wire [31:0] writeData;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:143" *)
  input writeEnable;
  wire writeEnable;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:163" *)
  reg [15:0] memory_0_instructions [99:0];
  initial begin
    memory_0_instructions[0] = 16'h0000;
    memory_0_instructions[1] = 16'h0000;
    memory_0_instructions[2] = 16'h0000;
    memory_0_instructions[3] = 16'h0000;
    memory_0_instructions[4] = 16'h0000;
    memory_0_instructions[5] = 16'h0000;
    memory_0_instructions[6] = 16'h0000;
    memory_0_instructions[7] = 16'h0000;
    memory_0_instructions[8] = 16'h0000;
    memory_0_instructions[9] = 16'h0000;
    memory_0_instructions[10] = 16'h0000;
    memory_0_instructions[11] = 16'h0000;
    memory_0_instructions[12] = 16'h0000;
    memory_0_instructions[13] = 16'h0000;
    memory_0_instructions[14] = 16'h0000;
    memory_0_instructions[15] = 16'h0000;
    memory_0_instructions[16] = 16'h0000;
    memory_0_instructions[17] = 16'h0000;
    memory_0_instructions[18] = 16'h0000;
    memory_0_instructions[19] = 16'h0000;
    memory_0_instructions[20] = 16'h0000;
    memory_0_instructions[21] = 16'h0000;
    memory_0_instructions[22] = 16'h0000;
    memory_0_instructions[23] = 16'h0000;
    memory_0_instructions[24] = 16'h0000;
    memory_0_instructions[25] = 16'h0000;
    memory_0_instructions[26] = 16'h0000;
    memory_0_instructions[27] = 16'h0000;
    memory_0_instructions[28] = 16'h0000;
    memory_0_instructions[29] = 16'h0000;
    memory_0_instructions[30] = 16'h0000;
    memory_0_instructions[31] = 16'h0000;
    memory_0_instructions[32] = 16'h0000;
    memory_0_instructions[33] = 16'h0000;
    memory_0_instructions[34] = 16'h0000;
    memory_0_instructions[35] = 16'h0000;
    memory_0_instructions[36] = 16'h0000;
    memory_0_instructions[37] = 16'h0000;
    memory_0_instructions[38] = 16'h0000;
    memory_0_instructions[39] = 16'h0000;
    memory_0_instructions[40] = 16'h0000;
    memory_0_instructions[41] = 16'h0000;
    memory_0_instructions[42] = 16'h0000;
    memory_0_instructions[43] = 16'h0000;
    memory_0_instructions[44] = 16'h0000;
    memory_0_instructions[45] = 16'h0000;
    memory_0_instructions[46] = 16'h0000;
    memory_0_instructions[47] = 16'h0000;
    memory_0_instructions[48] = 16'h0000;
    memory_0_instructions[49] = 16'h0000;
    memory_0_instructions[50] = 16'h0000;
    memory_0_instructions[51] = 16'h0000;
    memory_0_instructions[52] = 16'h0000;
    memory_0_instructions[53] = 16'h0000;
    memory_0_instructions[54] = 16'h0000;
    memory_0_instructions[55] = 16'h0000;
    memory_0_instructions[56] = 16'h0000;
    memory_0_instructions[57] = 16'h0000;
    memory_0_instructions[58] = 16'h0000;
    memory_0_instructions[59] = 16'h0000;
    memory_0_instructions[60] = 16'h0000;
    memory_0_instructions[61] = 16'h0000;
    memory_0_instructions[62] = 16'h0000;
    memory_0_instructions[63] = 16'h0000;
    memory_0_instructions[64] = 16'h0000;
    memory_0_instructions[65] = 16'h0000;
    memory_0_instructions[66] = 16'h0000;
    memory_0_instructions[67] = 16'h0000;
    memory_0_instructions[68] = 16'h0000;
    memory_0_instructions[69] = 16'h0000;
    memory_0_instructions[70] = 16'h0000;
    memory_0_instructions[71] = 16'h0000;
    memory_0_instructions[72] = 16'h0000;
    memory_0_instructions[73] = 16'h0000;
    memory_0_instructions[74] = 16'h0000;
    memory_0_instructions[75] = 16'h0000;
    memory_0_instructions[76] = 16'h0000;
    memory_0_instructions[77] = 16'h0000;
    memory_0_instructions[78] = 16'h0000;
    memory_0_instructions[79] = 16'h0000;
    memory_0_instructions[80] = 16'h0000;
    memory_0_instructions[81] = 16'h0000;
    memory_0_instructions[82] = 16'h0000;
    memory_0_instructions[83] = 16'h0000;
    memory_0_instructions[84] = 16'h0000;
    memory_0_instructions[85] = 16'h0000;
    memory_0_instructions[86] = 16'h0000;
    memory_0_instructions[87] = 16'h0000;
    memory_0_instructions[88] = 16'h0000;
    memory_0_instructions[89] = 16'h0000;
    memory_0_instructions[90] = 16'h0000;
    memory_0_instructions[91] = 16'h0000;
    memory_0_instructions[92] = 16'h0000;
    memory_0_instructions[93] = 16'h0000;
    memory_0_instructions[94] = 16'h0000;
    memory_0_instructions[95] = 16'h0000;
    memory_0_instructions[96] = 16'h0000;
    memory_0_instructions[97] = 16'h0000;
    memory_0_instructions[98] = 16'h0000;
    memory_0_instructions[99] = 16'h0000;
  end
  always @(posedge clk) begin
    if (externalWritePort__en)
      memory_0_instructions[externalWritePort__addr] <= externalWritePort__data;
  end
  reg [15:0] _0_;
  reg [15:0] _1_;
  always @(posedge clk) begin
    _0_ <= memory_0_instructions[currentInstructionStep];
    _1_ <= memory_0_instructions[externalReadPort__addr];
  end
  assign instructionReadPort__data = _0_;
  assign externalReadPort__data = _1_;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:164" *)
  reg [31:0] memory_0_sources [99:0];
  initial begin
    memory_0_sources[0] = 32'd0;
    memory_0_sources[1] = 32'd0;
    memory_0_sources[2] = 32'd0;
    memory_0_sources[3] = 32'd0;
    memory_0_sources[4] = 32'd0;
    memory_0_sources[5] = 32'd0;
    memory_0_sources[6] = 32'd0;
    memory_0_sources[7] = 32'd0;
    memory_0_sources[8] = 32'd0;
    memory_0_sources[9] = 32'd0;
    memory_0_sources[10] = 32'd0;
    memory_0_sources[11] = 32'd0;
    memory_0_sources[12] = 32'd0;
    memory_0_sources[13] = 32'd0;
    memory_0_sources[14] = 32'd0;
    memory_0_sources[15] = 32'd0;
    memory_0_sources[16] = 32'd0;
    memory_0_sources[17] = 32'd0;
    memory_0_sources[18] = 32'd0;
    memory_0_sources[19] = 32'd0;
    memory_0_sources[20] = 32'd0;
    memory_0_sources[21] = 32'd0;
    memory_0_sources[22] = 32'd0;
    memory_0_sources[23] = 32'd0;
    memory_0_sources[24] = 32'd0;
    memory_0_sources[25] = 32'd0;
    memory_0_sources[26] = 32'd0;
    memory_0_sources[27] = 32'd0;
    memory_0_sources[28] = 32'd0;
    memory_0_sources[29] = 32'd0;
    memory_0_sources[30] = 32'd0;
    memory_0_sources[31] = 32'd0;
    memory_0_sources[32] = 32'd0;
    memory_0_sources[33] = 32'd0;
    memory_0_sources[34] = 32'd0;
    memory_0_sources[35] = 32'd0;
    memory_0_sources[36] = 32'd0;
    memory_0_sources[37] = 32'd0;
    memory_0_sources[38] = 32'd0;
    memory_0_sources[39] = 32'd0;
    memory_0_sources[40] = 32'd0;
    memory_0_sources[41] = 32'd0;
    memory_0_sources[42] = 32'd0;
    memory_0_sources[43] = 32'd0;
    memory_0_sources[44] = 32'd0;
    memory_0_sources[45] = 32'd0;
    memory_0_sources[46] = 32'd0;
    memory_0_sources[47] = 32'd0;
    memory_0_sources[48] = 32'd0;
    memory_0_sources[49] = 32'd0;
    memory_0_sources[50] = 32'd0;
    memory_0_sources[51] = 32'd0;
    memory_0_sources[52] = 32'd0;
    memory_0_sources[53] = 32'd0;
    memory_0_sources[54] = 32'd0;
    memory_0_sources[55] = 32'd0;
    memory_0_sources[56] = 32'd0;
    memory_0_sources[57] = 32'd0;
    memory_0_sources[58] = 32'd0;
    memory_0_sources[59] = 32'd0;
    memory_0_sources[60] = 32'd0;
    memory_0_sources[61] = 32'd0;
    memory_0_sources[62] = 32'd0;
    memory_0_sources[63] = 32'd0;
    memory_0_sources[64] = 32'd0;
    memory_0_sources[65] = 32'd0;
    memory_0_sources[66] = 32'd0;
    memory_0_sources[67] = 32'd0;
    memory_0_sources[68] = 32'd0;
    memory_0_sources[69] = 32'd0;
    memory_0_sources[70] = 32'd0;
    memory_0_sources[71] = 32'd0;
    memory_0_sources[72] = 32'd0;
    memory_0_sources[73] = 32'd0;
    memory_0_sources[74] = 32'd0;
    memory_0_sources[75] = 32'd0;
    memory_0_sources[76] = 32'd0;
    memory_0_sources[77] = 32'd0;
    memory_0_sources[78] = 32'd0;
    memory_0_sources[79] = 32'd0;
    memory_0_sources[80] = 32'd0;
    memory_0_sources[81] = 32'd0;
    memory_0_sources[82] = 32'd0;
    memory_0_sources[83] = 32'd0;
    memory_0_sources[84] = 32'd0;
    memory_0_sources[85] = 32'd0;
    memory_0_sources[86] = 32'd0;
    memory_0_sources[87] = 32'd0;
    memory_0_sources[88] = 32'd0;
    memory_0_sources[89] = 32'd0;
    memory_0_sources[90] = 32'd0;
    memory_0_sources[91] = 32'd0;
    memory_0_sources[92] = 32'd0;
    memory_0_sources[93] = 32'd0;
    memory_0_sources[94] = 32'd0;
    memory_0_sources[95] = 32'd0;
    memory_0_sources[96] = 32'd0;
    memory_0_sources[97] = 32'd0;
    memory_0_sources[98] = 32'd0;
    memory_0_sources[99] = 32'd0;
  end
  always @(posedge clk) begin
    if (\externalWritePort__en$53 )
      memory_0_sources[\externalWritePort__addr$51 ] <= \externalWritePort__data$52 ;
  end
  reg [31:0] _2_;
  reg [31:0] _3_;
  always @(posedge clk) begin
    _2_ <= memory_0_sources[currentInstructionStep];
    _3_ <= memory_0_sources[\externalReadPort__addr$50 ];
  end
  assign sourcesReadPort__data = _2_;
  assign \externalReadPort__data$54  = _3_;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:165" *)
  reg [31:0] memory_0_targets [99:0];
  initial begin
    memory_0_targets[0] = 32'd0;
    memory_0_targets[1] = 32'd0;
    memory_0_targets[2] = 32'd0;
    memory_0_targets[3] = 32'd0;
    memory_0_targets[4] = 32'd0;
    memory_0_targets[5] = 32'd0;
    memory_0_targets[6] = 32'd0;
    memory_0_targets[7] = 32'd0;
    memory_0_targets[8] = 32'd0;
    memory_0_targets[9] = 32'd0;
    memory_0_targets[10] = 32'd0;
    memory_0_targets[11] = 32'd0;
    memory_0_targets[12] = 32'd0;
    memory_0_targets[13] = 32'd0;
    memory_0_targets[14] = 32'd0;
    memory_0_targets[15] = 32'd0;
    memory_0_targets[16] = 32'd0;
    memory_0_targets[17] = 32'd0;
    memory_0_targets[18] = 32'd0;
    memory_0_targets[19] = 32'd0;
    memory_0_targets[20] = 32'd0;
    memory_0_targets[21] = 32'd0;
    memory_0_targets[22] = 32'd0;
    memory_0_targets[23] = 32'd0;
    memory_0_targets[24] = 32'd0;
    memory_0_targets[25] = 32'd0;
    memory_0_targets[26] = 32'd0;
    memory_0_targets[27] = 32'd0;
    memory_0_targets[28] = 32'd0;
    memory_0_targets[29] = 32'd0;
    memory_0_targets[30] = 32'd0;
    memory_0_targets[31] = 32'd0;
    memory_0_targets[32] = 32'd0;
    memory_0_targets[33] = 32'd0;
    memory_0_targets[34] = 32'd0;
    memory_0_targets[35] = 32'd0;
    memory_0_targets[36] = 32'd0;
    memory_0_targets[37] = 32'd0;
    memory_0_targets[38] = 32'd0;
    memory_0_targets[39] = 32'd0;
    memory_0_targets[40] = 32'd0;
    memory_0_targets[41] = 32'd0;
    memory_0_targets[42] = 32'd0;
    memory_0_targets[43] = 32'd0;
    memory_0_targets[44] = 32'd0;
    memory_0_targets[45] = 32'd0;
    memory_0_targets[46] = 32'd0;
    memory_0_targets[47] = 32'd0;
    memory_0_targets[48] = 32'd0;
    memory_0_targets[49] = 32'd0;
    memory_0_targets[50] = 32'd0;
    memory_0_targets[51] = 32'd0;
    memory_0_targets[52] = 32'd0;
    memory_0_targets[53] = 32'd0;
    memory_0_targets[54] = 32'd0;
    memory_0_targets[55] = 32'd0;
    memory_0_targets[56] = 32'd0;
    memory_0_targets[57] = 32'd0;
    memory_0_targets[58] = 32'd0;
    memory_0_targets[59] = 32'd0;
    memory_0_targets[60] = 32'd0;
    memory_0_targets[61] = 32'd0;
    memory_0_targets[62] = 32'd0;
    memory_0_targets[63] = 32'd0;
    memory_0_targets[64] = 32'd0;
    memory_0_targets[65] = 32'd0;
    memory_0_targets[66] = 32'd0;
    memory_0_targets[67] = 32'd0;
    memory_0_targets[68] = 32'd0;
    memory_0_targets[69] = 32'd0;
    memory_0_targets[70] = 32'd0;
    memory_0_targets[71] = 32'd0;
    memory_0_targets[72] = 32'd0;
    memory_0_targets[73] = 32'd0;
    memory_0_targets[74] = 32'd0;
    memory_0_targets[75] = 32'd0;
    memory_0_targets[76] = 32'd0;
    memory_0_targets[77] = 32'd0;
    memory_0_targets[78] = 32'd0;
    memory_0_targets[79] = 32'd0;
    memory_0_targets[80] = 32'd0;
    memory_0_targets[81] = 32'd0;
    memory_0_targets[82] = 32'd0;
    memory_0_targets[83] = 32'd0;
    memory_0_targets[84] = 32'd0;
    memory_0_targets[85] = 32'd0;
    memory_0_targets[86] = 32'd0;
    memory_0_targets[87] = 32'd0;
    memory_0_targets[88] = 32'd0;
    memory_0_targets[89] = 32'd0;
    memory_0_targets[90] = 32'd0;
    memory_0_targets[91] = 32'd0;
    memory_0_targets[92] = 32'd0;
    memory_0_targets[93] = 32'd0;
    memory_0_targets[94] = 32'd0;
    memory_0_targets[95] = 32'd0;
    memory_0_targets[96] = 32'd0;
    memory_0_targets[97] = 32'd0;
    memory_0_targets[98] = 32'd0;
    memory_0_targets[99] = 32'd0;
  end
  always @(posedge clk) begin
    if (\externalWritePort__en$58 )
      memory_0_targets[\externalWritePort__addr$56 ] <= \externalWritePort__data$57 ;
  end
  reg [31:0] _4_;
  reg [31:0] _5_;
  always @(posedge clk) begin
    _4_ <= memory_0_targets[currentInstructionStep];
    _5_ <= memory_0_targets[\externalReadPort__addr$55 ];
  end
  assign targetsReadPort__data = _4_;
  assign \externalReadPort__data$59  = _5_;
  assign \$1  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:103" *) configAddress;
  assign \$2  = configAddress == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:108" *) 1'h1;
  assign \$3  = configAddress == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:113" *) 2'h2;
  assign \$4  = configAddress == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:116" *) 2'h3;
  assign \$5  = configAddress == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:119" *) 3'h4;
  assign \$6  = configAddress == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:124" *) 3'h5;
  assign \$7  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:131" *) timerSetpoint;
  assign \$8  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:131" *) timer;
  assign \$9  = \$7  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:131" *) \$8 ;
  assign \$10  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:135" *) timer;
  assign \$11  = timer - (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:136" *) 1'h1;
  assign \$12  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:190" *) 1'h1;
  assign \$13  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:193" *) 1'h1;
  assign \$14  = \$13  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:193" *) worker_0_read_ready;
  assign \$15  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:196" *) 2'h2;
  assign \$16  = \$15  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:196" *) worker_0_read_ready;
  assign \$17  = ~ (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:197" *) data_node_0;
  assign \$18  = \$17  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:197" *) targetsReadPort__data;
  assign \$19  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:197" *) \$18 ;
  assign \$20  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:202" *) instructionReadPort__data;
  assign \$21  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:206" *) 4'hf;
  assign \$22  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$23  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$24  = \$22  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$23 ;
  assign \$25  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) sourcesReadPort__data[31:16];
  assign \$26  = \$24  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$25 ;
  assign \$27  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$28  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$29  = \$27  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$28 ;
  assign \$30  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$31  = \$29  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$30 ;
  assign \$32  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$33  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$34  = \$32  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$33 ;
  assign \$35  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$36  = \$34  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$35 ;
  assign \$37  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$38  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$39  = \$37  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$38 ;
  assign \$40  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h3;
  assign \$41  = \$39  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$40 ;
  assign \$42  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$43  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$44  = \$42  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$43 ;
  assign \$45  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 3'h4;
  assign \$46  = \$44  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$45 ;
  assign \$48  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:242" *) programDone;
  assign \$49  = \$47  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:242" *) \$48 ;
  assign \$51  = currentInstructionStep + (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:244" *) 1'h1;
  assign \$52  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:255" *) programDone;
  assign \$53  = triggerProgram & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:255" *) \$52 ;
  assign \$54  = triggerProgram & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:258" *) programNotFinishedFault;
  assign \$56  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:173" *) selectedMemType;
  assign \$59  = selectedMemType == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:173" *) 1'h1;
  assign \$62  = selectedMemType == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:173" *) 2'h2;
  assign \$64  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:206" *) 4'hf;
  assign \$65  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$66  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$67  = \$65  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$66 ;
  assign \$68  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) sourcesReadPort__data[31:16];
  assign \$69  = \$67  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$68 ;
  assign \$70  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 1'h1;
  assign \$71  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 2'h2;
  assign \$72  = \$70  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$71 ;
  assign \$73  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) sourcesReadPort__data[31:16];
  assign \$74  = \$72  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$73 ;
  assign \$75  = \$74  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) worker_0_read_ready;
  assign \$76  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 1'h1;
  assign \$77  = ! (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) targetsReadPort__data[31:16];
  assign \$78  = \$76  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) \$77 ;
  assign \$79  = \$78  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) worker_0_read_ready;
  assign \$80  = instructionReadPort__data != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 1'h1;
  assign \$81  = | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) targetsReadPort__data[31:16];
  assign \$82  = \$80  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) \$81 ;
  assign \$83  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$84  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$85  = \$83  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$84 ;
  assign \$86  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$87  = \$85  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$86 ;
  assign \$88  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 1'h1;
  assign \$89  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 2'h2;
  assign \$90  = \$88  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$89 ;
  assign \$91  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 1'h1;
  assign \$92  = \$90  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$91 ;
  assign \$93  = \$92  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) worker_0_read_ready;
  assign \$94  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 1'h1;
  assign \$95  = targetsReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 1'h1;
  assign \$96  = \$94  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) \$95 ;
  assign \$97  = \$96  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) worker_0_read_ready;
  assign \$98  = instructionReadPort__data != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 1'h1;
  assign \$99  = targetsReadPort__data[31:16] != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 1'h1;
  assign \$100  = \$98  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) \$99 ;
  assign \$101  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$102  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$103  = \$101  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$102 ;
  assign \$104  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$105  = \$103  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$104 ;
  assign \$106  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 1'h1;
  assign \$107  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 2'h2;
  assign \$108  = \$106  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$107 ;
  assign \$109  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 2'h2;
  assign \$110  = \$108  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$109 ;
  assign \$111  = \$110  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) worker_0_read_ready;
  assign \$112  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 1'h1;
  assign \$113  = targetsReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 2'h2;
  assign \$114  = \$112  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) \$113 ;
  assign \$115  = \$114  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) worker_0_read_ready;
  assign \$116  = instructionReadPort__data != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 1'h1;
  assign \$117  = targetsReadPort__data[31:16] != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 2'h2;
  assign \$118  = \$116  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) \$117 ;
  assign \$119  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$120  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$121  = \$119  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$120 ;
  assign \$122  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h3;
  assign \$123  = \$121  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$122 ;
  assign \$124  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 1'h1;
  assign \$125  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 2'h2;
  assign \$126  = \$124  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$125 ;
  assign \$127  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 2'h3;
  assign \$128  = \$126  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$127 ;
  assign \$129  = \$128  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) worker_0_read_ready;
  assign \$130  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 1'h1;
  assign \$131  = targetsReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 2'h3;
  assign \$132  = \$130  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) \$131 ;
  assign \$133  = \$132  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) worker_0_read_ready;
  assign \$134  = instructionReadPort__data != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 1'h1;
  assign \$135  = targetsReadPort__data[31:16] != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 2'h3;
  assign \$136  = \$134  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) \$135 ;
  assign \$137  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 1'h1;
  assign \$138  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 2'h2;
  assign \$139  = \$137  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$138 ;
  assign \$140  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) 3'h4;
  assign \$141  = \$139  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:216" *) \$140 ;
  assign \$142  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 1'h1;
  assign \$143  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 2'h2;
  assign \$144  = \$142  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$143 ;
  assign \$145  = sourcesReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) 3'h4;
  assign \$146  = \$144  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) \$145 ;
  assign \$147  = \$146  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:220" *) worker_0_read_ready;
  assign \$148  = instructionReadPort__data == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 1'h1;
  assign \$149  = targetsReadPort__data[31:16] == (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) 3'h4;
  assign \$150  = \$148  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) \$149 ;
  assign \$151  = \$150  & (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:223" *) worker_0_read_ready;
  assign \$152  = instructionReadPort__data != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 1'h1;
  assign \$153  = targetsReadPort__data[31:16] != (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) 3'h4;
  assign \$154  = \$152  | (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:228" *) \$153 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:79" *)
  always @(posedge clk)
    currentInstructionStep <= \$155 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:84" *)
  always @(posedge clk)
    triggerProgram <= \$156 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:51" *)
  always @(posedge clk)
    configReadData <= \$157 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:81" *)
  always @(posedge clk)
    timerSetpoint <= \$158 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:77" *)
  always @(posedge clk)
    selectedMemType <= \$159 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:82" *)
  always @(posedge clk)
    timer <= \$160 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:93" *)
  always @(posedge clk)
    allowSkip <= \$161 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:92" *)
  always @(posedge clk)
    workerDone <= \$162 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:167" *)
  always @(posedge clk)
    worker_0_read_ready <= \$163 ;
  (* src = "c:\\Users\\voids\\Documents\\GitHub\\controller-software\\controller-firmware\\python\\amaranth_sources\\dma.py:97" *)
  always @(posedge clk)
    programNotFinishedFault <= \$164 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$155  = currentInstructionStep;
    if (triggerProgram) begin
      \$155  = 7'h00;
    end
    if (\$2 ) begin
      if (configWriteEnable) begin
        \$155  = configWriteData[6:0];
      end
    end
    if (\$49 ) begin
      if (\$50 ) begin
        \$155  = \$51 [6:0];
      end
    end
    if (triggerProgram) begin
      \$155  = 7'h00;
    end
    if (rst) begin
      \$155  = 7'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$156  = triggerProgram;
    if (triggerProgram) begin
      \$156  = 1'h0;
    end
    if (\$9 ) begin
      \$156  = 1'h1;
    end
    if (rst) begin
      \$156  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$157  = configReadData;
    if (\$1 ) begin
      \$157  = { 8'h00, timerSetpoint };
    end
    if (\$2 ) begin
      \$157  = { 25'h0000000, currentInstructionStep };
    end
    if (\$3 ) begin
      \$157  = { 31'h00000000, programDone };
    end
    if (\$4 ) begin
      \$157  = { 31'h00000000, workerDone };
    end
    if (\$5 ) begin
      \$157  = 32'd0;
    end
    if (\$6 ) begin
      \$157  = { 30'h00000000, selectedMemType };
    end
    if (rst) begin
      \$157  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$158  = timerSetpoint;
    if (\$1 ) begin
      if (configWriteEnable) begin
        \$158  = configWriteData[23:0];
      end
    end
    if (rst) begin
      \$158  = 24'h000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$159  = selectedMemType;
    if (\$6 ) begin
      if (configWriteEnable) begin
        \$159  = configWriteData[1:0];
      end
    end
    if (rst) begin
      \$159  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$160  = timer;
    if (\$9 ) begin
      \$160  = timerSetpoint;
    end
    if (\$10 ) begin
      \$160  = \$11 [23:0];
    end
    if (rst) begin
      \$160  = 24'h000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$161  = allowSkip;
    if (\$12 ) begin
      \$161  = 1'h1;
    end
    if (\$20 ) begin
      \$161  = 1'h1;
    end
    if (\$49 ) begin
      (* full_case = 32'd1 *)
      if (\$50 ) begin
        \$161  = 1'h0;
      end else begin
        \$161  = 1'h1;
      end
    end
    if (triggerProgram) begin
      \$161  = 1'h0;
    end
    if (rst) begin
      \$161  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$162  = workerDone;
    if (\$14 ) begin
      \$162  = 1'h1;
    end
    if (\$16 ) begin
      (* full_case = 32'd1 *)
      if (\$19 ) begin
        \$162  = 1'h1;
      end else begin
        \$162  = 1'h0;
      end
    end
    if (\$20 ) begin
      \$162  = 1'h1;
    end
    if (\$21 ) begin
      \$162  = 1'h1;
    end
    if (\$49 ) begin
      if (\$50 ) begin
        \$162  = 1'h0;
      end
    end
    if (triggerProgram) begin
      \$162  = 1'h0;
    end
    if (rst) begin
      \$162  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$163  = worker_0_read_ready;
    if (\$26 ) begin
      \$163  = 1'h1;
    end
    if (\$31 ) begin
      \$163  = 1'h1;
    end
    if (\$36 ) begin
      \$163  = 1'h1;
    end
    if (\$41 ) begin
      \$163  = 1'h1;
    end
    if (\$46 ) begin
      \$163  = 1'h1;
    end
    if (rst) begin
      \$163  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$164  = programNotFinishedFault;
    if (\$53 ) begin
      \$164  = 1'h1;
    end
    if (\$54 ) begin
      \$164  = 1'h0;
    end
    if (rst) begin
      \$164  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    externalReadPort__addr = 7'h00;
    if (\$57 ) begin
      externalReadPort__addr = address[6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    externalWritePort__addr = 7'h00;
    if (\$57 ) begin
      externalWritePort__addr = address[6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    externalWritePort__data = 16'h0000;
    if (\$57 ) begin
      externalWritePort__data = writeData[15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    externalWritePort__en = 1'h0;
    if (\$57 ) begin
      externalWritePort__en = writeEnable;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    readData = 32'd0;
    if (\$57 ) begin
      readData = { 16'h0000, externalReadPort__data };
    end
    if (\$60 ) begin
      readData = \externalReadPort__data$54 ;
    end
    if (\$63 ) begin
      readData = \externalReadPort__data$59 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalReadPort__addr$50  = 7'h00;
    if (\$60 ) begin
      \externalReadPort__addr$50  = address[6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalWritePort__addr$51  = 7'h00;
    if (\$60 ) begin
      \externalWritePort__addr$51  = address[6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalWritePort__data$52  = 32'd0;
    if (\$60 ) begin
      \externalWritePort__data$52  = writeData;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalWritePort__en$53  = 1'h0;
    if (\$60 ) begin
      \externalWritePort__en$53  = writeEnable;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalReadPort__addr$55  = 7'h00;
    if (\$63 ) begin
      \externalReadPort__addr$55  = address[6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalWritePort__addr$56  = 7'h00;
    if (\$63 ) begin
      \externalWritePort__addr$56  = address[6:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalWritePort__data$57  = 32'd0;
    if (\$63 ) begin
      \externalWritePort__data$57  = writeData;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \externalWritePort__en$58  = 1'h0;
    if (\$63 ) begin
      \externalWritePort__en$58  = writeEnable;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    programDone = 1'h0;
    if (\$64 ) begin
      programDone = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeEnable_0 = 1'h0;
    if (triggerProgram) begin
      peripheral_writeEnable_0 = 1'h0;
    end
    if (\$79 ) begin
      peripheral_writeEnable_0 = 1'h1;
    end
    if (\$82 ) begin
      peripheral_writeEnable_0 = 1'h0;
    end
    if (workerDone) begin
      peripheral_writeEnable_0 = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_address_0 = 16'h0000;
    if (\$69 ) begin
      peripheral_address_0 = sourcesReadPort__data[15:0];
    end
    if (\$79 ) begin
      peripheral_address_0 = targetsReadPort__data[15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    data_node_0 = 32'd0;
    if (\$75 ) begin
      data_node_0 = peripheral_readData_0;
    end
    if (\$93 ) begin
      data_node_0 = peripheral_readData_1;
    end
    if (\$111 ) begin
      data_node_0 = peripheral_readData_2;
    end
    if (\$129 ) begin
      data_node_0 = peripheral_readData_3;
    end
    if (\$147 ) begin
      data_node_0 = peripheral_readData_4;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeData_0 = 32'd0;
    if (\$79 ) begin
      peripheral_writeData_0 = data_node_0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeEnable_1 = 1'h0;
    if (triggerProgram) begin
      peripheral_writeEnable_1 = 1'h0;
    end
    if (\$97 ) begin
      peripheral_writeEnable_1 = 1'h1;
    end
    if (\$100 ) begin
      peripheral_writeEnable_1 = 1'h0;
    end
    if (workerDone) begin
      peripheral_writeEnable_1 = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_address_1 = 16'h0000;
    if (\$87 ) begin
      peripheral_address_1 = sourcesReadPort__data[15:0];
    end
    if (\$97 ) begin
      peripheral_address_1 = targetsReadPort__data[15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeData_1 = 32'd0;
    if (\$97 ) begin
      peripheral_writeData_1 = data_node_0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeEnable_2 = 1'h0;
    if (triggerProgram) begin
      peripheral_writeEnable_2 = 1'h0;
    end
    if (\$115 ) begin
      peripheral_writeEnable_2 = 1'h1;
    end
    if (\$118 ) begin
      peripheral_writeEnable_2 = 1'h0;
    end
    if (workerDone) begin
      peripheral_writeEnable_2 = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_address_2 = 16'h0000;
    if (\$105 ) begin
      peripheral_address_2 = sourcesReadPort__data[15:0];
    end
    if (\$115 ) begin
      peripheral_address_2 = targetsReadPort__data[15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeData_2 = 32'd0;
    if (\$115 ) begin
      peripheral_writeData_2 = data_node_0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeEnable_3 = 1'h0;
    if (triggerProgram) begin
      peripheral_writeEnable_3 = 1'h0;
    end
    if (\$133 ) begin
      peripheral_writeEnable_3 = 1'h1;
    end
    if (\$136 ) begin
      peripheral_writeEnable_3 = 1'h0;
    end
    if (workerDone) begin
      peripheral_writeEnable_3 = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_address_3 = 16'h0000;
    if (\$123 ) begin
      peripheral_address_3 = sourcesReadPort__data[15:0];
    end
    if (\$133 ) begin
      peripheral_address_3 = targetsReadPort__data[15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeData_3 = 32'd0;
    if (\$133 ) begin
      peripheral_writeData_3 = data_node_0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeEnable_4 = 1'h0;
    if (triggerProgram) begin
      peripheral_writeEnable_4 = 1'h0;
    end
    if (\$151 ) begin
      peripheral_writeEnable_4 = 1'h1;
    end
    if (\$154 ) begin
      peripheral_writeEnable_4 = 1'h0;
    end
    if (workerDone) begin
      peripheral_writeEnable_4 = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_address_4 = 16'h0000;
    if (\$141 ) begin
      peripheral_address_4 = sourcesReadPort__data[15:0];
    end
    if (\$151 ) begin
      peripheral_address_4 = targetsReadPort__data[15:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    peripheral_writeData_4 = 32'd0;
    if (\$151 ) begin
      peripheral_writeData_4 = data_node_0;
    end
  end
  assign instructionReadPort__addr = currentInstructionStep;
  assign sourcesReadPort__addr = currentInstructionStep;
  assign targetsReadPort__addr = currentInstructionStep;
  assign \$47  = workerDone;
  assign \$50  = allowSkip;
  assign \$55  = 1'h1;
  assign \$57  = \$56 ;
  assign \$58  = 1'h1;
  assign \$60  = \$59 ;
  assign \$61  = 1'h1;
  assign \$63  = \$62 ;
endmodule
